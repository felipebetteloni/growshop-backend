# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type AffectedRows {
  count: Int!
}

type AggregateBanner {
  _avg: BannerAvgAggregate
  _count: BannerCountAggregate
  _max: BannerMaxAggregate
  _min: BannerMinAggregate
  _sum: BannerSumAggregate
}

type AggregateBrand {
  _count: BrandCountAggregate
  _max: BrandMaxAggregate
  _min: BrandMinAggregate
}

type AggregateCategory {
  _count: CategoryCountAggregate
  _max: CategoryMaxAggregate
  _min: CategoryMinAggregate
}

type AggregateChat {
  _count: ChatCountAggregate
  _max: ChatMaxAggregate
  _min: ChatMinAggregate
}

type AggregateCity {
  _count: CityCountAggregate
  _max: CityMaxAggregate
  _min: CityMinAggregate
}

type AggregateComment {
  _count: CommentCountAggregate
  _max: CommentMaxAggregate
  _min: CommentMinAggregate
}

type AggregateCondition {
  _count: ConditionCountAggregate
  _max: ConditionMaxAggregate
  _min: ConditionMinAggregate
}

type AggregateCountry {
  _count: CountryCountAggregate
  _max: CountryMaxAggregate
  _min: CountryMinAggregate
}

type AggregateFavorite {
  _count: FavoriteCountAggregate
  _max: FavoriteMaxAggregate
  _min: FavoriteMinAggregate
}

type AggregateGlobalSettings {
  _count: GlobalSettingsCountAggregate
  _max: GlobalSettingsMaxAggregate
  _min: GlobalSettingsMinAggregate
}

type AggregateMessage {
  _count: MessageCountAggregate
  _max: MessageMaxAggregate
  _min: MessageMinAggregate
}

type AggregateNeighbourhood {
  _count: NeighbourhoodCountAggregate
  _max: NeighbourhoodMaxAggregate
  _min: NeighbourhoodMinAggregate
}

type AggregateNotification {
  _count: NotificationCountAggregate
  _max: NotificationMaxAggregate
  _min: NotificationMinAggregate
}

type AggregateProduct {
  _avg: ProductAvgAggregate
  _count: ProductCountAggregate
  _max: ProductMaxAggregate
  _min: ProductMinAggregate
  _sum: ProductSumAggregate
}

type AggregateProductImg {
  _count: ProductImgCountAggregate
  _max: ProductImgMaxAggregate
  _min: ProductImgMinAggregate
}

type AggregateReply {
  _count: ReplyCountAggregate
  _max: ReplyMaxAggregate
  _min: ReplyMinAggregate
}

type AggregateReport {
  _count: ReportCountAggregate
  _max: ReportMaxAggregate
  _min: ReportMinAggregate
}

type AggregateReview {
  _count: ReviewCountAggregate
  _max: ReviewMaxAggregate
  _min: ReviewMinAggregate
}

type AggregateReviewImg {
  _count: ReviewImgCountAggregate
  _max: ReviewImgMaxAggregate
  _min: ReviewImgMinAggregate
}

type AggregateShare {
  _count: ShareCountAggregate
  _max: ShareMaxAggregate
  _min: ShareMinAggregate
}

type AggregateState {
  _count: StateCountAggregate
  _max: StateMaxAggregate
  _min: StateMinAggregate
}

type AggregateSubCategory {
  _count: SubCategoryCountAggregate
  _max: SubCategoryMaxAggregate
  _min: SubCategoryMinAggregate
}

type AggregateSubscription {
  _count: SubscriptionCountAggregate
  _max: SubscriptionMaxAggregate
  _min: SubscriptionMinAggregate
}

type AggregateUser {
  _count: UserCountAggregate
  _max: UserMaxAggregate
  _min: UserMinAggregate
}

type Banner {
  clickCount: Int
  createdAt: Timestamp!
  id: ID!
  imgUrl: String
  isActive: Boolean!
  link: String
  sorting: Int!
  text: String!
  title: String!
  viewCount: Int
}

input BannerActiveSortingCompoundUniqueInput {
  isActive: Boolean!
  sorting: Int!
}

type BannerAvgAggregate {
  clickCount: Float
  sorting: Float
  viewCount: Float
}

input BannerAvgAggregateInput {
  clickCount: Boolean
  sorting: Boolean
  viewCount: Boolean
}

input BannerAvgOrderByAggregateInput {
  clickCount: SortOrder
  sorting: SortOrder
  viewCount: SortOrder
}

type BannerCountAggregate {
  _all: Int!
  clickCount: Int!
  createdAt: Int!
  id: Int!
  imgUrl: Int!
  isActive: Int!
  link: Int!
  sorting: Int!
  text: Int!
  title: Int!
  viewCount: Int!
}

input BannerCountAggregateInput {
  _all: Boolean
  clickCount: Boolean
  createdAt: Boolean
  id: Boolean
  imgUrl: Boolean
  isActive: Boolean
  link: Boolean
  sorting: Boolean
  text: Boolean
  title: Boolean
  viewCount: Boolean
}

input BannerCountOrderByAggregateInput {
  clickCount: SortOrder
  createdAt: SortOrder
  id: SortOrder
  imgUrl: SortOrder
  isActive: SortOrder
  link: SortOrder
  sorting: SortOrder
  text: SortOrder
  title: SortOrder
  viewCount: SortOrder
}

input BannerCreateInput {
  clickCount: Int
  createdAt: Timestamp
  id: String
  imgUrl: String
  isActive: Boolean
  link: String
  sorting: Int
  text: String!
  title: String!
  viewCount: Int
}

input BannerCreateManyInput {
  clickCount: Int
  createdAt: Timestamp
  id: String
  imgUrl: String
  isActive: Boolean
  link: String
  sorting: Int
  text: String!
  title: String!
  viewCount: Int
}

type BannerGroupBy {
  _avg: BannerAvgAggregate
  _count: BannerCountAggregate
  _max: BannerMaxAggregate
  _min: BannerMinAggregate
  _sum: BannerSumAggregate
  clickCount: Int
  createdAt: Timestamp!
  id: String!
  imgUrl: String
  isActive: Boolean!
  link: String
  sorting: Int!
  text: String!
  title: String!
  viewCount: Int
}

type BannerMaxAggregate {
  clickCount: Int
  createdAt: Timestamp
  id: String
  imgUrl: String
  isActive: Boolean
  link: String
  sorting: Int
  text: String
  title: String
  viewCount: Int
}

input BannerMaxAggregateInput {
  clickCount: Boolean
  createdAt: Boolean
  id: Boolean
  imgUrl: Boolean
  isActive: Boolean
  link: Boolean
  sorting: Boolean
  text: Boolean
  title: Boolean
  viewCount: Boolean
}

input BannerMaxOrderByAggregateInput {
  clickCount: SortOrder
  createdAt: SortOrder
  id: SortOrder
  imgUrl: SortOrder
  isActive: SortOrder
  link: SortOrder
  sorting: SortOrder
  text: SortOrder
  title: SortOrder
  viewCount: SortOrder
}

type BannerMinAggregate {
  clickCount: Int
  createdAt: Timestamp
  id: String
  imgUrl: String
  isActive: Boolean
  link: String
  sorting: Int
  text: String
  title: String
  viewCount: Int
}

input BannerMinAggregateInput {
  clickCount: Boolean
  createdAt: Boolean
  id: Boolean
  imgUrl: Boolean
  isActive: Boolean
  link: Boolean
  sorting: Boolean
  text: Boolean
  title: Boolean
  viewCount: Boolean
}

input BannerMinOrderByAggregateInput {
  clickCount: SortOrder
  createdAt: SortOrder
  id: SortOrder
  imgUrl: SortOrder
  isActive: SortOrder
  link: SortOrder
  sorting: SortOrder
  text: SortOrder
  title: SortOrder
  viewCount: SortOrder
}

input BannerOrderByWithAggregationInput {
  _avg: BannerAvgOrderByAggregateInput
  _count: BannerCountOrderByAggregateInput
  _max: BannerMaxOrderByAggregateInput
  _min: BannerMinOrderByAggregateInput
  _sum: BannerSumOrderByAggregateInput
  clickCount: SortOrderInput
  createdAt: SortOrder
  id: SortOrder
  imgUrl: SortOrderInput
  isActive: SortOrder
  link: SortOrderInput
  sorting: SortOrder
  text: SortOrder
  title: SortOrder
  viewCount: SortOrderInput
}

input BannerOrderByWithRelationInput {
  clickCount: SortOrderInput
  createdAt: SortOrder
  id: SortOrder
  imgUrl: SortOrderInput
  isActive: SortOrder
  link: SortOrderInput
  sorting: SortOrder
  text: SortOrder
  title: SortOrder
  viewCount: SortOrderInput
}

enum BannerScalarFieldEnum {
  clickCount
  createdAt
  id
  imgUrl
  isActive
  link
  sorting
  text
  title
  viewCount
}

input BannerScalarWhereWithAggregatesInput {
  AND: [BannerScalarWhereWithAggregatesInput!]
  NOT: [BannerScalarWhereWithAggregatesInput!]
  OR: [BannerScalarWhereWithAggregatesInput!]
  clickCount: IntNullableWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  id: StringWithAggregatesFilter
  imgUrl: StringNullableWithAggregatesFilter
  isActive: BoolWithAggregatesFilter
  link: StringNullableWithAggregatesFilter
  sorting: IntWithAggregatesFilter
  text: StringWithAggregatesFilter
  title: StringWithAggregatesFilter
  viewCount: IntNullableWithAggregatesFilter
}

type BannerSumAggregate {
  clickCount: Int
  sorting: Int
  viewCount: Int
}

input BannerSumAggregateInput {
  clickCount: Boolean
  sorting: Boolean
  viewCount: Boolean
}

input BannerSumOrderByAggregateInput {
  clickCount: SortOrder
  sorting: SortOrder
  viewCount: SortOrder
}

input BannerUpdateInput {
  clickCount: NullableIntFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  imgUrl: NullableStringFieldUpdateOperationsInput
  isActive: BoolFieldUpdateOperationsInput
  link: NullableStringFieldUpdateOperationsInput
  sorting: IntFieldUpdateOperationsInput
  text: StringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  viewCount: NullableIntFieldUpdateOperationsInput
}

input BannerUpdateManyMutationInput {
  clickCount: NullableIntFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  imgUrl: NullableStringFieldUpdateOperationsInput
  isActive: BoolFieldUpdateOperationsInput
  link: NullableStringFieldUpdateOperationsInput
  sorting: IntFieldUpdateOperationsInput
  text: StringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  viewCount: NullableIntFieldUpdateOperationsInput
}

input BannerWhereInput {
  AND: [BannerWhereInput!]
  NOT: [BannerWhereInput!]
  OR: [BannerWhereInput!]
  clickCount: IntNullableFilter
  createdAt: DateTimeFilter
  id: StringFilter
  imgUrl: StringNullableFilter
  isActive: BoolFilter
  link: StringNullableFilter
  sorting: IntFilter
  text: StringFilter
  title: StringFilter
  viewCount: IntNullableFilter
}

input BannerWhereUniqueInput {
  AND: [BannerWhereInput!]
  NOT: [BannerWhereInput!]
  OR: [BannerWhereInput!]
  activeSorting: BannerActiveSortingCompoundUniqueInput
  clickCount: IntNullableFilter
  createdAt: DateTimeFilter
  id: String
  imgUrl: StringNullableFilter
  isActive: BoolFilter
  link: StringNullableFilter
  sorting: IntFilter
  text: StringFilter
  title: StringFilter
  viewCount: IntNullableFilter
}

input BoolFieldUpdateOperationsInput {
  set: Boolean
}

input BoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input BoolWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedBoolFilter
  _min: NestedBoolFilter
  equals: Boolean
  not: NestedBoolWithAggregatesFilter
}

type Brand {
  _count: BrandCount!
  createdAt: Timestamp!
  id: ID!
  name: String!
  products: [Product!]
  updatedAt: Timestamp
}

type BrandCount {
  products: Int!
}

type BrandCountAggregate {
  _all: Int!
  createdAt: Int!
  id: Int!
  name: Int!
  updatedAt: Int!
}

input BrandCountAggregateInput {
  _all: Boolean
  createdAt: Boolean
  id: Boolean
  name: Boolean
  updatedAt: Boolean
}

input BrandCountOrderByAggregateInput {
  createdAt: SortOrder
  id: SortOrder
  name: SortOrder
  updatedAt: SortOrder
}

input BrandCreateInput {
  createdAt: Timestamp
  id: String
  name: String!
  products: ProductCreateNestedManyWithoutBrandInput
  updatedAt: Timestamp
}

input BrandCreateManyInput {
  createdAt: Timestamp
  id: String
  name: String!
  updatedAt: Timestamp
}

input BrandCreateNestedOneWithoutProductsInput {
  connect: BrandWhereUniqueInput
  connectOrCreate: BrandCreateOrConnectWithoutProductsInput
  create: BrandCreateWithoutProductsInput
}

input BrandCreateOrConnectWithoutProductsInput {
  create: BrandCreateWithoutProductsInput!
  where: BrandWhereUniqueInput!
}

input BrandCreateWithoutProductsInput {
  createdAt: Timestamp
  id: String
  name: String!
  updatedAt: Timestamp
}

type BrandGroupBy {
  _count: BrandCountAggregate
  _max: BrandMaxAggregate
  _min: BrandMinAggregate
  createdAt: Timestamp!
  id: String!
  name: String!
  updatedAt: Timestamp
}

type BrandMaxAggregate {
  createdAt: Timestamp
  id: String
  name: String
  updatedAt: Timestamp
}

input BrandMaxAggregateInput {
  createdAt: Boolean
  id: Boolean
  name: Boolean
  updatedAt: Boolean
}

input BrandMaxOrderByAggregateInput {
  createdAt: SortOrder
  id: SortOrder
  name: SortOrder
  updatedAt: SortOrder
}

type BrandMinAggregate {
  createdAt: Timestamp
  id: String
  name: String
  updatedAt: Timestamp
}

input BrandMinAggregateInput {
  createdAt: Boolean
  id: Boolean
  name: Boolean
  updatedAt: Boolean
}

input BrandMinOrderByAggregateInput {
  createdAt: SortOrder
  id: SortOrder
  name: SortOrder
  updatedAt: SortOrder
}

input BrandOrderByWithAggregationInput {
  _count: BrandCountOrderByAggregateInput
  _max: BrandMaxOrderByAggregateInput
  _min: BrandMinOrderByAggregateInput
  createdAt: SortOrder
  id: SortOrder
  name: SortOrder
  updatedAt: SortOrderInput
}

input BrandOrderByWithRelationInput {
  createdAt: SortOrder
  id: SortOrder
  name: SortOrder
  products: ProductOrderByRelationAggregateInput
  updatedAt: SortOrderInput
}

input BrandRelationFilter {
  is: BrandWhereInput
  isNot: BrandWhereInput
}

enum BrandScalarFieldEnum {
  createdAt
  id
  name
  updatedAt
}

input BrandScalarWhereWithAggregatesInput {
  AND: [BrandScalarWhereWithAggregatesInput!]
  NOT: [BrandScalarWhereWithAggregatesInput!]
  OR: [BrandScalarWhereWithAggregatesInput!]
  createdAt: DateTimeWithAggregatesFilter
  id: StringWithAggregatesFilter
  name: StringWithAggregatesFilter
  updatedAt: DateTimeNullableWithAggregatesFilter
}

input BrandUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  products: ProductUpdateManyWithoutBrandNestedInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
}

input BrandUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
}

input BrandUpdateOneRequiredWithoutProductsNestedInput {
  connect: BrandWhereUniqueInput
  connectOrCreate: BrandCreateOrConnectWithoutProductsInput
  create: BrandCreateWithoutProductsInput
  update: BrandUpdateToOneWithWhereWithoutProductsInput
  upsert: BrandUpsertWithoutProductsInput
}

input BrandUpdateToOneWithWhereWithoutProductsInput {
  data: BrandUpdateWithoutProductsInput!
  where: BrandWhereInput
}

input BrandUpdateWithoutProductsInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
}

input BrandUpsertWithoutProductsInput {
  create: BrandCreateWithoutProductsInput!
  update: BrandUpdateWithoutProductsInput!
  where: BrandWhereInput
}

input BrandWhereInput {
  AND: [BrandWhereInput!]
  NOT: [BrandWhereInput!]
  OR: [BrandWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  name: StringFilter
  products: ProductListRelationFilter
  updatedAt: DateTimeNullableFilter
}

input BrandWhereUniqueInput {
  AND: [BrandWhereInput!]
  NOT: [BrandWhereInput!]
  OR: [BrandWhereInput!]
  createdAt: DateTimeFilter
  id: String
  name: StringFilter
  products: ProductListRelationFilter
  updatedAt: DateTimeNullableFilter
}

type Category {
  Product: [Product!]
  SubCategory: [SubCategory!]
  _count: CategoryCount!
  createdAt: Timestamp!
  id: ID!
  name: String!
  updatedAt: Timestamp
}

type CategoryCount {
  Product: Int!
  SubCategory: Int!
}

type CategoryCountAggregate {
  _all: Int!
  createdAt: Int!
  id: Int!
  name: Int!
  updatedAt: Int!
}

input CategoryCountAggregateInput {
  _all: Boolean
  createdAt: Boolean
  id: Boolean
  name: Boolean
  updatedAt: Boolean
}

input CategoryCountOrderByAggregateInput {
  createdAt: SortOrder
  id: SortOrder
  name: SortOrder
  updatedAt: SortOrder
}

input CategoryCreateInput {
  Product: ProductCreateNestedManyWithoutCategoryInput
  SubCategory: SubCategoryCreateNestedManyWithoutCategoryInput
  createdAt: Timestamp
  id: String
  name: String!
  updatedAt: Timestamp
}

input CategoryCreateManyInput {
  createdAt: Timestamp
  id: String
  name: String!
  updatedAt: Timestamp
}

input CategoryCreateNestedOneWithoutProductInput {
  connect: CategoryWhereUniqueInput
  connectOrCreate: CategoryCreateOrConnectWithoutProductInput
  create: CategoryCreateWithoutProductInput
}

input CategoryCreateNestedOneWithoutSubCategoryInput {
  connect: CategoryWhereUniqueInput
  connectOrCreate: CategoryCreateOrConnectWithoutSubCategoryInput
  create: CategoryCreateWithoutSubCategoryInput
}

input CategoryCreateOrConnectWithoutProductInput {
  create: CategoryCreateWithoutProductInput!
  where: CategoryWhereUniqueInput!
}

input CategoryCreateOrConnectWithoutSubCategoryInput {
  create: CategoryCreateWithoutSubCategoryInput!
  where: CategoryWhereUniqueInput!
}

input CategoryCreateWithoutProductInput {
  SubCategory: SubCategoryCreateNestedManyWithoutCategoryInput
  createdAt: Timestamp
  id: String
  name: String!
  updatedAt: Timestamp
}

input CategoryCreateWithoutSubCategoryInput {
  Product: ProductCreateNestedManyWithoutCategoryInput
  createdAt: Timestamp
  id: String
  name: String!
  updatedAt: Timestamp
}

type CategoryGroupBy {
  _count: CategoryCountAggregate
  _max: CategoryMaxAggregate
  _min: CategoryMinAggregate
  createdAt: Timestamp!
  id: String!
  name: String!
  updatedAt: Timestamp
}

type CategoryMaxAggregate {
  createdAt: Timestamp
  id: String
  name: String
  updatedAt: Timestamp
}

input CategoryMaxAggregateInput {
  createdAt: Boolean
  id: Boolean
  name: Boolean
  updatedAt: Boolean
}

input CategoryMaxOrderByAggregateInput {
  createdAt: SortOrder
  id: SortOrder
  name: SortOrder
  updatedAt: SortOrder
}

type CategoryMinAggregate {
  createdAt: Timestamp
  id: String
  name: String
  updatedAt: Timestamp
}

input CategoryMinAggregateInput {
  createdAt: Boolean
  id: Boolean
  name: Boolean
  updatedAt: Boolean
}

input CategoryMinOrderByAggregateInput {
  createdAt: SortOrder
  id: SortOrder
  name: SortOrder
  updatedAt: SortOrder
}

input CategoryOrderByWithAggregationInput {
  _count: CategoryCountOrderByAggregateInput
  _max: CategoryMaxOrderByAggregateInput
  _min: CategoryMinOrderByAggregateInput
  createdAt: SortOrder
  id: SortOrder
  name: SortOrder
  updatedAt: SortOrderInput
}

input CategoryOrderByWithRelationInput {
  Product: ProductOrderByRelationAggregateInput
  SubCategory: SubCategoryOrderByRelationAggregateInput
  createdAt: SortOrder
  id: SortOrder
  name: SortOrder
  updatedAt: SortOrderInput
}

input CategoryRelationFilter {
  is: CategoryWhereInput
  isNot: CategoryWhereInput
}

enum CategoryScalarFieldEnum {
  createdAt
  id
  name
  updatedAt
}

input CategoryScalarWhereWithAggregatesInput {
  AND: [CategoryScalarWhereWithAggregatesInput!]
  NOT: [CategoryScalarWhereWithAggregatesInput!]
  OR: [CategoryScalarWhereWithAggregatesInput!]
  createdAt: DateTimeWithAggregatesFilter
  id: StringWithAggregatesFilter
  name: StringWithAggregatesFilter
  updatedAt: DateTimeNullableWithAggregatesFilter
}

input CategoryUpdateInput {
  Product: ProductUpdateManyWithoutCategoryNestedInput
  SubCategory: SubCategoryUpdateManyWithoutCategoryNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
}

input CategoryUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
}

input CategoryUpdateOneRequiredWithoutProductNestedInput {
  connect: CategoryWhereUniqueInput
  connectOrCreate: CategoryCreateOrConnectWithoutProductInput
  create: CategoryCreateWithoutProductInput
  update: CategoryUpdateToOneWithWhereWithoutProductInput
  upsert: CategoryUpsertWithoutProductInput
}

input CategoryUpdateOneRequiredWithoutSubCategoryNestedInput {
  connect: CategoryWhereUniqueInput
  connectOrCreate: CategoryCreateOrConnectWithoutSubCategoryInput
  create: CategoryCreateWithoutSubCategoryInput
  update: CategoryUpdateToOneWithWhereWithoutSubCategoryInput
  upsert: CategoryUpsertWithoutSubCategoryInput
}

input CategoryUpdateToOneWithWhereWithoutProductInput {
  data: CategoryUpdateWithoutProductInput!
  where: CategoryWhereInput
}

input CategoryUpdateToOneWithWhereWithoutSubCategoryInput {
  data: CategoryUpdateWithoutSubCategoryInput!
  where: CategoryWhereInput
}

input CategoryUpdateWithoutProductInput {
  SubCategory: SubCategoryUpdateManyWithoutCategoryNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
}

input CategoryUpdateWithoutSubCategoryInput {
  Product: ProductUpdateManyWithoutCategoryNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
}

input CategoryUpsertWithoutProductInput {
  create: CategoryCreateWithoutProductInput!
  update: CategoryUpdateWithoutProductInput!
  where: CategoryWhereInput
}

input CategoryUpsertWithoutSubCategoryInput {
  create: CategoryCreateWithoutSubCategoryInput!
  update: CategoryUpdateWithoutSubCategoryInput!
  where: CategoryWhereInput
}

input CategoryWhereInput {
  AND: [CategoryWhereInput!]
  NOT: [CategoryWhereInput!]
  OR: [CategoryWhereInput!]
  Product: ProductListRelationFilter
  SubCategory: SubCategoryListRelationFilter
  createdAt: DateTimeFilter
  id: StringFilter
  name: StringFilter
  updatedAt: DateTimeNullableFilter
}

input CategoryWhereUniqueInput {
  AND: [CategoryWhereInput!]
  NOT: [CategoryWhereInput!]
  OR: [CategoryWhereInput!]
  Product: ProductListRelationFilter
  SubCategory: SubCategoryListRelationFilter
  createdAt: DateTimeFilter
  id: String
  name: StringFilter
  updatedAt: DateTimeNullableFilter
}

type Chat {
  _count: ChatCount!
  createdAt: Timestamp!
  id: ID!
  isActive: Boolean!
  messages: [Message!]
  review: Review
  userFrom: User!
  userFromId: String!
  userTo: User!
  userToId: String!
}

type ChatCount {
  messages: Int!
}

type ChatCountAggregate {
  _all: Int!
  createdAt: Int!
  id: Int!
  isActive: Int!
  userFromId: Int!
  userToId: Int!
}

input ChatCountAggregateInput {
  _all: Boolean
  createdAt: Boolean
  id: Boolean
  isActive: Boolean
  userFromId: Boolean
  userToId: Boolean
}

input ChatCountOrderByAggregateInput {
  createdAt: SortOrder
  id: SortOrder
  isActive: SortOrder
  userFromId: SortOrder
  userToId: SortOrder
}

input ChatCreateInput {
  createdAt: Timestamp
  id: String
  isActive: Boolean
  messages: MessageCreateNestedManyWithoutChatInput
  review: ReviewCreateNestedOneWithoutChatInput
  userFrom: UserCreateNestedOneWithoutChatsFromInput!
  userTo: UserCreateNestedOneWithoutChatsToInput!
}

input ChatCreateManyInput {
  createdAt: Timestamp
  id: String
  isActive: Boolean
  userFromId: String!
  userToId: String!
}

input ChatCreateManyUserFromInput {
  createdAt: Timestamp
  id: String
  isActive: Boolean
  userToId: String!
}

input ChatCreateManyUserFromInputEnvelope {
  data: [ChatCreateManyUserFromInput!]!
  skipDuplicates: Boolean
}

input ChatCreateManyUserToInput {
  createdAt: Timestamp
  id: String
  isActive: Boolean
  userFromId: String!
}

input ChatCreateManyUserToInputEnvelope {
  data: [ChatCreateManyUserToInput!]!
  skipDuplicates: Boolean
}

input ChatCreateNestedManyWithoutUserFromInput {
  connect: [ChatWhereUniqueInput!]
  connectOrCreate: [ChatCreateOrConnectWithoutUserFromInput!]
  create: [ChatCreateWithoutUserFromInput!]
  createMany: ChatCreateManyUserFromInputEnvelope
}

input ChatCreateNestedManyWithoutUserToInput {
  connect: [ChatWhereUniqueInput!]
  connectOrCreate: [ChatCreateOrConnectWithoutUserToInput!]
  create: [ChatCreateWithoutUserToInput!]
  createMany: ChatCreateManyUserToInputEnvelope
}

input ChatCreateNestedOneWithoutMessagesInput {
  connect: ChatWhereUniqueInput
  connectOrCreate: ChatCreateOrConnectWithoutMessagesInput
  create: ChatCreateWithoutMessagesInput
}

input ChatCreateNestedOneWithoutReviewInput {
  connect: ChatWhereUniqueInput
  connectOrCreate: ChatCreateOrConnectWithoutReviewInput
  create: ChatCreateWithoutReviewInput
}

input ChatCreateOrConnectWithoutMessagesInput {
  create: ChatCreateWithoutMessagesInput!
  where: ChatWhereUniqueInput!
}

input ChatCreateOrConnectWithoutReviewInput {
  create: ChatCreateWithoutReviewInput!
  where: ChatWhereUniqueInput!
}

input ChatCreateOrConnectWithoutUserFromInput {
  create: ChatCreateWithoutUserFromInput!
  where: ChatWhereUniqueInput!
}

input ChatCreateOrConnectWithoutUserToInput {
  create: ChatCreateWithoutUserToInput!
  where: ChatWhereUniqueInput!
}

input ChatCreateWithoutMessagesInput {
  createdAt: Timestamp
  id: String
  isActive: Boolean
  review: ReviewCreateNestedOneWithoutChatInput
  userFrom: UserCreateNestedOneWithoutChatsFromInput!
  userTo: UserCreateNestedOneWithoutChatsToInput!
}

input ChatCreateWithoutReviewInput {
  createdAt: Timestamp
  id: String
  isActive: Boolean
  messages: MessageCreateNestedManyWithoutChatInput
  userFrom: UserCreateNestedOneWithoutChatsFromInput!
  userTo: UserCreateNestedOneWithoutChatsToInput!
}

input ChatCreateWithoutUserFromInput {
  createdAt: Timestamp
  id: String
  isActive: Boolean
  messages: MessageCreateNestedManyWithoutChatInput
  review: ReviewCreateNestedOneWithoutChatInput
  userTo: UserCreateNestedOneWithoutChatsToInput!
}

input ChatCreateWithoutUserToInput {
  createdAt: Timestamp
  id: String
  isActive: Boolean
  messages: MessageCreateNestedManyWithoutChatInput
  review: ReviewCreateNestedOneWithoutChatInput
  userFrom: UserCreateNestedOneWithoutChatsFromInput!
}

type ChatGroupBy {
  _count: ChatCountAggregate
  _max: ChatMaxAggregate
  _min: ChatMinAggregate
  createdAt: Timestamp!
  id: String!
  isActive: Boolean!
  userFromId: String!
  userToId: String!
}

input ChatListRelationFilter {
  every: ChatWhereInput
  none: ChatWhereInput
  some: ChatWhereInput
}

type ChatMaxAggregate {
  createdAt: Timestamp
  id: String
  isActive: Boolean
  userFromId: String
  userToId: String
}

input ChatMaxAggregateInput {
  createdAt: Boolean
  id: Boolean
  isActive: Boolean
  userFromId: Boolean
  userToId: Boolean
}

input ChatMaxOrderByAggregateInput {
  createdAt: SortOrder
  id: SortOrder
  isActive: SortOrder
  userFromId: SortOrder
  userToId: SortOrder
}

type ChatMinAggregate {
  createdAt: Timestamp
  id: String
  isActive: Boolean
  userFromId: String
  userToId: String
}

input ChatMinAggregateInput {
  createdAt: Boolean
  id: Boolean
  isActive: Boolean
  userFromId: Boolean
  userToId: Boolean
}

input ChatMinOrderByAggregateInput {
  createdAt: SortOrder
  id: SortOrder
  isActive: SortOrder
  userFromId: SortOrder
  userToId: SortOrder
}

input ChatOrderByRelationAggregateInput {
  _count: SortOrder
}

input ChatOrderByWithAggregationInput {
  _count: ChatCountOrderByAggregateInput
  _max: ChatMaxOrderByAggregateInput
  _min: ChatMinOrderByAggregateInput
  createdAt: SortOrder
  id: SortOrder
  isActive: SortOrder
  userFromId: SortOrder
  userToId: SortOrder
}

input ChatOrderByWithRelationInput {
  createdAt: SortOrder
  id: SortOrder
  isActive: SortOrder
  messages: MessageOrderByRelationAggregateInput
  review: ReviewOrderByWithRelationInput
  userFrom: UserOrderByWithRelationInput
  userFromId: SortOrder
  userTo: UserOrderByWithRelationInput
  userToId: SortOrder
}

input ChatRelationFilter {
  is: ChatWhereInput
  isNot: ChatWhereInput
}

enum ChatScalarFieldEnum {
  createdAt
  id
  isActive
  userFromId
  userToId
}

input ChatScalarWhereInput {
  AND: [ChatScalarWhereInput!]
  NOT: [ChatScalarWhereInput!]
  OR: [ChatScalarWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  isActive: BoolFilter
  userFromId: StringFilter
  userToId: StringFilter
}

input ChatScalarWhereWithAggregatesInput {
  AND: [ChatScalarWhereWithAggregatesInput!]
  NOT: [ChatScalarWhereWithAggregatesInput!]
  OR: [ChatScalarWhereWithAggregatesInput!]
  createdAt: DateTimeWithAggregatesFilter
  id: StringWithAggregatesFilter
  isActive: BoolWithAggregatesFilter
  userFromId: StringWithAggregatesFilter
  userToId: StringWithAggregatesFilter
}

input ChatUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  isActive: BoolFieldUpdateOperationsInput
  messages: MessageUpdateManyWithoutChatNestedInput
  review: ReviewUpdateOneWithoutChatNestedInput
  userFrom: UserUpdateOneRequiredWithoutChatsFromNestedInput
  userTo: UserUpdateOneRequiredWithoutChatsToNestedInput
}

input ChatUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  isActive: BoolFieldUpdateOperationsInput
}

input ChatUpdateManyWithWhereWithoutUserFromInput {
  data: ChatUpdateManyMutationInput!
  where: ChatScalarWhereInput!
}

input ChatUpdateManyWithWhereWithoutUserToInput {
  data: ChatUpdateManyMutationInput!
  where: ChatScalarWhereInput!
}

input ChatUpdateManyWithoutUserFromNestedInput {
  connect: [ChatWhereUniqueInput!]
  connectOrCreate: [ChatCreateOrConnectWithoutUserFromInput!]
  create: [ChatCreateWithoutUserFromInput!]
  createMany: ChatCreateManyUserFromInputEnvelope
  delete: [ChatWhereUniqueInput!]
  deleteMany: [ChatScalarWhereInput!]
  disconnect: [ChatWhereUniqueInput!]
  set: [ChatWhereUniqueInput!]
  update: [ChatUpdateWithWhereUniqueWithoutUserFromInput!]
  updateMany: [ChatUpdateManyWithWhereWithoutUserFromInput!]
  upsert: [ChatUpsertWithWhereUniqueWithoutUserFromInput!]
}

input ChatUpdateManyWithoutUserToNestedInput {
  connect: [ChatWhereUniqueInput!]
  connectOrCreate: [ChatCreateOrConnectWithoutUserToInput!]
  create: [ChatCreateWithoutUserToInput!]
  createMany: ChatCreateManyUserToInputEnvelope
  delete: [ChatWhereUniqueInput!]
  deleteMany: [ChatScalarWhereInput!]
  disconnect: [ChatWhereUniqueInput!]
  set: [ChatWhereUniqueInput!]
  update: [ChatUpdateWithWhereUniqueWithoutUserToInput!]
  updateMany: [ChatUpdateManyWithWhereWithoutUserToInput!]
  upsert: [ChatUpsertWithWhereUniqueWithoutUserToInput!]
}

input ChatUpdateOneRequiredWithoutMessagesNestedInput {
  connect: ChatWhereUniqueInput
  connectOrCreate: ChatCreateOrConnectWithoutMessagesInput
  create: ChatCreateWithoutMessagesInput
  update: ChatUpdateToOneWithWhereWithoutMessagesInput
  upsert: ChatUpsertWithoutMessagesInput
}

input ChatUpdateOneRequiredWithoutReviewNestedInput {
  connect: ChatWhereUniqueInput
  connectOrCreate: ChatCreateOrConnectWithoutReviewInput
  create: ChatCreateWithoutReviewInput
  update: ChatUpdateToOneWithWhereWithoutReviewInput
  upsert: ChatUpsertWithoutReviewInput
}

input ChatUpdateToOneWithWhereWithoutMessagesInput {
  data: ChatUpdateWithoutMessagesInput!
  where: ChatWhereInput
}

input ChatUpdateToOneWithWhereWithoutReviewInput {
  data: ChatUpdateWithoutReviewInput!
  where: ChatWhereInput
}

input ChatUpdateWithWhereUniqueWithoutUserFromInput {
  data: ChatUpdateWithoutUserFromInput!
  where: ChatWhereUniqueInput!
}

input ChatUpdateWithWhereUniqueWithoutUserToInput {
  data: ChatUpdateWithoutUserToInput!
  where: ChatWhereUniqueInput!
}

input ChatUpdateWithoutMessagesInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  isActive: BoolFieldUpdateOperationsInput
  review: ReviewUpdateOneWithoutChatNestedInput
  userFrom: UserUpdateOneRequiredWithoutChatsFromNestedInput
  userTo: UserUpdateOneRequiredWithoutChatsToNestedInput
}

input ChatUpdateWithoutReviewInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  isActive: BoolFieldUpdateOperationsInput
  messages: MessageUpdateManyWithoutChatNestedInput
  userFrom: UserUpdateOneRequiredWithoutChatsFromNestedInput
  userTo: UserUpdateOneRequiredWithoutChatsToNestedInput
}

input ChatUpdateWithoutUserFromInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  isActive: BoolFieldUpdateOperationsInput
  messages: MessageUpdateManyWithoutChatNestedInput
  review: ReviewUpdateOneWithoutChatNestedInput
  userTo: UserUpdateOneRequiredWithoutChatsToNestedInput
}

input ChatUpdateWithoutUserToInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  isActive: BoolFieldUpdateOperationsInput
  messages: MessageUpdateManyWithoutChatNestedInput
  review: ReviewUpdateOneWithoutChatNestedInput
  userFrom: UserUpdateOneRequiredWithoutChatsFromNestedInput
}

input ChatUpsertWithWhereUniqueWithoutUserFromInput {
  create: ChatCreateWithoutUserFromInput!
  update: ChatUpdateWithoutUserFromInput!
  where: ChatWhereUniqueInput!
}

input ChatUpsertWithWhereUniqueWithoutUserToInput {
  create: ChatCreateWithoutUserToInput!
  update: ChatUpdateWithoutUserToInput!
  where: ChatWhereUniqueInput!
}

input ChatUpsertWithoutMessagesInput {
  create: ChatCreateWithoutMessagesInput!
  update: ChatUpdateWithoutMessagesInput!
  where: ChatWhereInput
}

input ChatUpsertWithoutReviewInput {
  create: ChatCreateWithoutReviewInput!
  update: ChatUpdateWithoutReviewInput!
  where: ChatWhereInput
}

input ChatWhereInput {
  AND: [ChatWhereInput!]
  NOT: [ChatWhereInput!]
  OR: [ChatWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  isActive: BoolFilter
  messages: MessageListRelationFilter
  review: ReviewNullableRelationFilter
  userFrom: UserRelationFilter
  userFromId: StringFilter
  userTo: UserRelationFilter
  userToId: StringFilter
}

input ChatWhereUniqueInput {
  AND: [ChatWhereInput!]
  NOT: [ChatWhereInput!]
  OR: [ChatWhereInput!]
  createdAt: DateTimeFilter
  id: String
  isActive: BoolFilter
  messages: MessageListRelationFilter
  review: ReviewNullableRelationFilter
  userFrom: UserRelationFilter
  userFromId: StringFilter
  userTo: UserRelationFilter
  userToId: StringFilter
}

type City {
  _count: CityCount!
  id: ID!
  name: String!
  neighbourhood: [Neighbourhood!]
  products: [Product!]
  state: State!
  stateId: String!
}

type CityCount {
  neighbourhood: Int!
  products: Int!
}

type CityCountAggregate {
  _all: Int!
  id: Int!
  name: Int!
  stateId: Int!
}

input CityCountAggregateInput {
  _all: Boolean
  id: Boolean
  name: Boolean
  stateId: Boolean
}

input CityCountOrderByAggregateInput {
  id: SortOrder
  name: SortOrder
  stateId: SortOrder
}

input CityCreateInput {
  id: String
  name: String!
  neighbourhood: NeighbourhoodCreateNestedManyWithoutCityInput
  products: ProductCreateNestedManyWithoutCityInput
  state: StateCreateNestedOneWithoutCitiesInput!
}

input CityCreateManyInput {
  id: String
  name: String!
  stateId: String!
}

input CityCreateManyStateInput {
  id: String
  name: String!
}

input CityCreateManyStateInputEnvelope {
  data: [CityCreateManyStateInput!]!
  skipDuplicates: Boolean
}

input CityCreateNestedManyWithoutStateInput {
  connect: [CityWhereUniqueInput!]
  connectOrCreate: [CityCreateOrConnectWithoutStateInput!]
  create: [CityCreateWithoutStateInput!]
  createMany: CityCreateManyStateInputEnvelope
}

input CityCreateNestedOneWithoutNeighbourhoodInput {
  connect: CityWhereUniqueInput
  connectOrCreate: CityCreateOrConnectWithoutNeighbourhoodInput
  create: CityCreateWithoutNeighbourhoodInput
}

input CityCreateNestedOneWithoutProductsInput {
  connect: CityWhereUniqueInput
  connectOrCreate: CityCreateOrConnectWithoutProductsInput
  create: CityCreateWithoutProductsInput
}

input CityCreateOrConnectWithoutNeighbourhoodInput {
  create: CityCreateWithoutNeighbourhoodInput!
  where: CityWhereUniqueInput!
}

input CityCreateOrConnectWithoutProductsInput {
  create: CityCreateWithoutProductsInput!
  where: CityWhereUniqueInput!
}

input CityCreateOrConnectWithoutStateInput {
  create: CityCreateWithoutStateInput!
  where: CityWhereUniqueInput!
}

input CityCreateWithoutNeighbourhoodInput {
  id: String
  name: String!
  products: ProductCreateNestedManyWithoutCityInput
  state: StateCreateNestedOneWithoutCitiesInput!
}

input CityCreateWithoutProductsInput {
  id: String
  name: String!
  neighbourhood: NeighbourhoodCreateNestedManyWithoutCityInput
  state: StateCreateNestedOneWithoutCitiesInput!
}

input CityCreateWithoutStateInput {
  id: String
  name: String!
  neighbourhood: NeighbourhoodCreateNestedManyWithoutCityInput
  products: ProductCreateNestedManyWithoutCityInput
}

type CityGroupBy {
  _count: CityCountAggregate
  _max: CityMaxAggregate
  _min: CityMinAggregate
  id: String!
  name: String!
  stateId: String!
}

input CityListRelationFilter {
  every: CityWhereInput
  none: CityWhereInput
  some: CityWhereInput
}

type CityMaxAggregate {
  id: String
  name: String
  stateId: String
}

input CityMaxAggregateInput {
  id: Boolean
  name: Boolean
  stateId: Boolean
}

input CityMaxOrderByAggregateInput {
  id: SortOrder
  name: SortOrder
  stateId: SortOrder
}

type CityMinAggregate {
  id: String
  name: String
  stateId: String
}

input CityMinAggregateInput {
  id: Boolean
  name: Boolean
  stateId: Boolean
}

input CityMinOrderByAggregateInput {
  id: SortOrder
  name: SortOrder
  stateId: SortOrder
}

input CityNullableRelationFilter {
  is: CityWhereInput
  isNot: CityWhereInput
}

input CityOrderByRelationAggregateInput {
  _count: SortOrder
}

input CityOrderByWithAggregationInput {
  _count: CityCountOrderByAggregateInput
  _max: CityMaxOrderByAggregateInput
  _min: CityMinOrderByAggregateInput
  id: SortOrder
  name: SortOrder
  stateId: SortOrder
}

input CityOrderByWithRelationInput {
  id: SortOrder
  name: SortOrder
  neighbourhood: NeighbourhoodOrderByRelationAggregateInput
  products: ProductOrderByRelationAggregateInput
  state: StateOrderByWithRelationInput
  stateId: SortOrder
}

input CityRelationFilter {
  is: CityWhereInput
  isNot: CityWhereInput
}

enum CityScalarFieldEnum {
  id
  name
  stateId
}

input CityScalarWhereInput {
  AND: [CityScalarWhereInput!]
  NOT: [CityScalarWhereInput!]
  OR: [CityScalarWhereInput!]
  id: StringFilter
  name: StringFilter
  stateId: StringFilter
}

input CityScalarWhereWithAggregatesInput {
  AND: [CityScalarWhereWithAggregatesInput!]
  NOT: [CityScalarWhereWithAggregatesInput!]
  OR: [CityScalarWhereWithAggregatesInput!]
  id: StringWithAggregatesFilter
  name: StringWithAggregatesFilter
  stateId: StringWithAggregatesFilter
}

input CityUpdateInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  neighbourhood: NeighbourhoodUpdateManyWithoutCityNestedInput
  products: ProductUpdateManyWithoutCityNestedInput
  state: StateUpdateOneRequiredWithoutCitiesNestedInput
}

input CityUpdateManyMutationInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
}

input CityUpdateManyWithWhereWithoutStateInput {
  data: CityUpdateManyMutationInput!
  where: CityScalarWhereInput!
}

input CityUpdateManyWithoutStateNestedInput {
  connect: [CityWhereUniqueInput!]
  connectOrCreate: [CityCreateOrConnectWithoutStateInput!]
  create: [CityCreateWithoutStateInput!]
  createMany: CityCreateManyStateInputEnvelope
  delete: [CityWhereUniqueInput!]
  deleteMany: [CityScalarWhereInput!]
  disconnect: [CityWhereUniqueInput!]
  set: [CityWhereUniqueInput!]
  update: [CityUpdateWithWhereUniqueWithoutStateInput!]
  updateMany: [CityUpdateManyWithWhereWithoutStateInput!]
  upsert: [CityUpsertWithWhereUniqueWithoutStateInput!]
}

input CityUpdateOneRequiredWithoutNeighbourhoodNestedInput {
  connect: CityWhereUniqueInput
  connectOrCreate: CityCreateOrConnectWithoutNeighbourhoodInput
  create: CityCreateWithoutNeighbourhoodInput
  update: CityUpdateToOneWithWhereWithoutNeighbourhoodInput
  upsert: CityUpsertWithoutNeighbourhoodInput
}

input CityUpdateOneWithoutProductsNestedInput {
  connect: CityWhereUniqueInput
  connectOrCreate: CityCreateOrConnectWithoutProductsInput
  create: CityCreateWithoutProductsInput
  delete: CityWhereInput
  disconnect: CityWhereInput
  update: CityUpdateToOneWithWhereWithoutProductsInput
  upsert: CityUpsertWithoutProductsInput
}

input CityUpdateToOneWithWhereWithoutNeighbourhoodInput {
  data: CityUpdateWithoutNeighbourhoodInput!
  where: CityWhereInput
}

input CityUpdateToOneWithWhereWithoutProductsInput {
  data: CityUpdateWithoutProductsInput!
  where: CityWhereInput
}

input CityUpdateWithWhereUniqueWithoutStateInput {
  data: CityUpdateWithoutStateInput!
  where: CityWhereUniqueInput!
}

input CityUpdateWithoutNeighbourhoodInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  products: ProductUpdateManyWithoutCityNestedInput
  state: StateUpdateOneRequiredWithoutCitiesNestedInput
}

input CityUpdateWithoutProductsInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  neighbourhood: NeighbourhoodUpdateManyWithoutCityNestedInput
  state: StateUpdateOneRequiredWithoutCitiesNestedInput
}

input CityUpdateWithoutStateInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  neighbourhood: NeighbourhoodUpdateManyWithoutCityNestedInput
  products: ProductUpdateManyWithoutCityNestedInput
}

input CityUpsertWithWhereUniqueWithoutStateInput {
  create: CityCreateWithoutStateInput!
  update: CityUpdateWithoutStateInput!
  where: CityWhereUniqueInput!
}

input CityUpsertWithoutNeighbourhoodInput {
  create: CityCreateWithoutNeighbourhoodInput!
  update: CityUpdateWithoutNeighbourhoodInput!
  where: CityWhereInput
}

input CityUpsertWithoutProductsInput {
  create: CityCreateWithoutProductsInput!
  update: CityUpdateWithoutProductsInput!
  where: CityWhereInput
}

input CityWhereInput {
  AND: [CityWhereInput!]
  NOT: [CityWhereInput!]
  OR: [CityWhereInput!]
  id: StringFilter
  name: StringFilter
  neighbourhood: NeighbourhoodListRelationFilter
  products: ProductListRelationFilter
  state: StateRelationFilter
  stateId: StringFilter
}

input CityWhereUniqueInput {
  AND: [CityWhereInput!]
  NOT: [CityWhereInput!]
  OR: [CityWhereInput!]
  id: String
  name: StringFilter
  neighbourhood: NeighbourhoodListRelationFilter
  products: ProductListRelationFilter
  state: StateRelationFilter
  stateId: StringFilter
}

type Comment {
  _count: CommentCount!
  createdAt: Timestamp!
  id: ID!
  isActive: Boolean!
  product: Product!
  productId: String!
  replies: [Reply!]
  text: String!
  user: User!
  userId: String!
}

type CommentCount {
  replies: Int!
}

type CommentCountAggregate {
  _all: Int!
  createdAt: Int!
  id: Int!
  isActive: Int!
  productId: Int!
  text: Int!
  userId: Int!
}

input CommentCountAggregateInput {
  _all: Boolean
  createdAt: Boolean
  id: Boolean
  isActive: Boolean
  productId: Boolean
  text: Boolean
  userId: Boolean
}

input CommentCountOrderByAggregateInput {
  createdAt: SortOrder
  id: SortOrder
  isActive: SortOrder
  productId: SortOrder
  text: SortOrder
  userId: SortOrder
}

input CommentCreateInput {
  createdAt: Timestamp
  id: String
  isActive: Boolean
  product: ProductCreateNestedOneWithoutCommentsInput!
  replies: ReplyCreateNestedManyWithoutCommentInput
  text: String!
  user: UserCreateNestedOneWithoutCommentsInput!
}

input CommentCreateManyInput {
  createdAt: Timestamp
  id: String
  isActive: Boolean
  productId: String!
  text: String!
  userId: String!
}

input CommentCreateManyProductInput {
  createdAt: Timestamp
  id: String
  isActive: Boolean
  text: String!
  userId: String!
}

input CommentCreateManyProductInputEnvelope {
  data: [CommentCreateManyProductInput!]!
  skipDuplicates: Boolean
}

input CommentCreateManyUserInput {
  createdAt: Timestamp
  id: String
  isActive: Boolean
  productId: String!
  text: String!
}

input CommentCreateManyUserInputEnvelope {
  data: [CommentCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input CommentCreateNestedManyWithoutProductInput {
  connect: [CommentWhereUniqueInput!]
  connectOrCreate: [CommentCreateOrConnectWithoutProductInput!]
  create: [CommentCreateWithoutProductInput!]
  createMany: CommentCreateManyProductInputEnvelope
}

input CommentCreateNestedManyWithoutUserInput {
  connect: [CommentWhereUniqueInput!]
  connectOrCreate: [CommentCreateOrConnectWithoutUserInput!]
  create: [CommentCreateWithoutUserInput!]
  createMany: CommentCreateManyUserInputEnvelope
}

input CommentCreateNestedOneWithoutRepliesInput {
  connect: CommentWhereUniqueInput
  connectOrCreate: CommentCreateOrConnectWithoutRepliesInput
  create: CommentCreateWithoutRepliesInput
}

input CommentCreateOrConnectWithoutProductInput {
  create: CommentCreateWithoutProductInput!
  where: CommentWhereUniqueInput!
}

input CommentCreateOrConnectWithoutRepliesInput {
  create: CommentCreateWithoutRepliesInput!
  where: CommentWhereUniqueInput!
}

input CommentCreateOrConnectWithoutUserInput {
  create: CommentCreateWithoutUserInput!
  where: CommentWhereUniqueInput!
}

input CommentCreateWithoutProductInput {
  createdAt: Timestamp
  id: String
  isActive: Boolean
  replies: ReplyCreateNestedManyWithoutCommentInput
  text: String!
  user: UserCreateNestedOneWithoutCommentsInput!
}

input CommentCreateWithoutRepliesInput {
  createdAt: Timestamp
  id: String
  isActive: Boolean
  product: ProductCreateNestedOneWithoutCommentsInput!
  text: String!
  user: UserCreateNestedOneWithoutCommentsInput!
}

input CommentCreateWithoutUserInput {
  createdAt: Timestamp
  id: String
  isActive: Boolean
  product: ProductCreateNestedOneWithoutCommentsInput!
  replies: ReplyCreateNestedManyWithoutCommentInput
  text: String!
}

type CommentGroupBy {
  _count: CommentCountAggregate
  _max: CommentMaxAggregate
  _min: CommentMinAggregate
  createdAt: Timestamp!
  id: String!
  isActive: Boolean!
  productId: String!
  text: String!
  userId: String!
}

input CommentListRelationFilter {
  every: CommentWhereInput
  none: CommentWhereInput
  some: CommentWhereInput
}

type CommentMaxAggregate {
  createdAt: Timestamp
  id: String
  isActive: Boolean
  productId: String
  text: String
  userId: String
}

input CommentMaxAggregateInput {
  createdAt: Boolean
  id: Boolean
  isActive: Boolean
  productId: Boolean
  text: Boolean
  userId: Boolean
}

input CommentMaxOrderByAggregateInput {
  createdAt: SortOrder
  id: SortOrder
  isActive: SortOrder
  productId: SortOrder
  text: SortOrder
  userId: SortOrder
}

type CommentMinAggregate {
  createdAt: Timestamp
  id: String
  isActive: Boolean
  productId: String
  text: String
  userId: String
}

input CommentMinAggregateInput {
  createdAt: Boolean
  id: Boolean
  isActive: Boolean
  productId: Boolean
  text: Boolean
  userId: Boolean
}

input CommentMinOrderByAggregateInput {
  createdAt: SortOrder
  id: SortOrder
  isActive: SortOrder
  productId: SortOrder
  text: SortOrder
  userId: SortOrder
}

input CommentOrderByRelationAggregateInput {
  _count: SortOrder
}

input CommentOrderByWithAggregationInput {
  _count: CommentCountOrderByAggregateInput
  _max: CommentMaxOrderByAggregateInput
  _min: CommentMinOrderByAggregateInput
  createdAt: SortOrder
  id: SortOrder
  isActive: SortOrder
  productId: SortOrder
  text: SortOrder
  userId: SortOrder
}

input CommentOrderByWithRelationInput {
  createdAt: SortOrder
  id: SortOrder
  isActive: SortOrder
  product: ProductOrderByWithRelationInput
  productId: SortOrder
  replies: ReplyOrderByRelationAggregateInput
  text: SortOrder
  user: UserOrderByWithRelationInput
  userId: SortOrder
}

input CommentRelationFilter {
  is: CommentWhereInput
  isNot: CommentWhereInput
}

enum CommentScalarFieldEnum {
  createdAt
  id
  isActive
  productId
  text
  userId
}

input CommentScalarWhereInput {
  AND: [CommentScalarWhereInput!]
  NOT: [CommentScalarWhereInput!]
  OR: [CommentScalarWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  isActive: BoolFilter
  productId: StringFilter
  text: StringFilter
  userId: StringFilter
}

input CommentScalarWhereWithAggregatesInput {
  AND: [CommentScalarWhereWithAggregatesInput!]
  NOT: [CommentScalarWhereWithAggregatesInput!]
  OR: [CommentScalarWhereWithAggregatesInput!]
  createdAt: DateTimeWithAggregatesFilter
  id: StringWithAggregatesFilter
  isActive: BoolWithAggregatesFilter
  productId: StringWithAggregatesFilter
  text: StringWithAggregatesFilter
  userId: StringWithAggregatesFilter
}

input CommentUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  isActive: BoolFieldUpdateOperationsInput
  product: ProductUpdateOneRequiredWithoutCommentsNestedInput
  replies: ReplyUpdateManyWithoutCommentNestedInput
  text: StringFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutCommentsNestedInput
}

input CommentUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  isActive: BoolFieldUpdateOperationsInput
  text: StringFieldUpdateOperationsInput
}

input CommentUpdateManyWithWhereWithoutProductInput {
  data: CommentUpdateManyMutationInput!
  where: CommentScalarWhereInput!
}

input CommentUpdateManyWithWhereWithoutUserInput {
  data: CommentUpdateManyMutationInput!
  where: CommentScalarWhereInput!
}

input CommentUpdateManyWithoutProductNestedInput {
  connect: [CommentWhereUniqueInput!]
  connectOrCreate: [CommentCreateOrConnectWithoutProductInput!]
  create: [CommentCreateWithoutProductInput!]
  createMany: CommentCreateManyProductInputEnvelope
  delete: [CommentWhereUniqueInput!]
  deleteMany: [CommentScalarWhereInput!]
  disconnect: [CommentWhereUniqueInput!]
  set: [CommentWhereUniqueInput!]
  update: [CommentUpdateWithWhereUniqueWithoutProductInput!]
  updateMany: [CommentUpdateManyWithWhereWithoutProductInput!]
  upsert: [CommentUpsertWithWhereUniqueWithoutProductInput!]
}

input CommentUpdateManyWithoutUserNestedInput {
  connect: [CommentWhereUniqueInput!]
  connectOrCreate: [CommentCreateOrConnectWithoutUserInput!]
  create: [CommentCreateWithoutUserInput!]
  createMany: CommentCreateManyUserInputEnvelope
  delete: [CommentWhereUniqueInput!]
  deleteMany: [CommentScalarWhereInput!]
  disconnect: [CommentWhereUniqueInput!]
  set: [CommentWhereUniqueInput!]
  update: [CommentUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [CommentUpdateManyWithWhereWithoutUserInput!]
  upsert: [CommentUpsertWithWhereUniqueWithoutUserInput!]
}

input CommentUpdateOneRequiredWithoutRepliesNestedInput {
  connect: CommentWhereUniqueInput
  connectOrCreate: CommentCreateOrConnectWithoutRepliesInput
  create: CommentCreateWithoutRepliesInput
  update: CommentUpdateToOneWithWhereWithoutRepliesInput
  upsert: CommentUpsertWithoutRepliesInput
}

input CommentUpdateToOneWithWhereWithoutRepliesInput {
  data: CommentUpdateWithoutRepliesInput!
  where: CommentWhereInput
}

input CommentUpdateWithWhereUniqueWithoutProductInput {
  data: CommentUpdateWithoutProductInput!
  where: CommentWhereUniqueInput!
}

input CommentUpdateWithWhereUniqueWithoutUserInput {
  data: CommentUpdateWithoutUserInput!
  where: CommentWhereUniqueInput!
}

input CommentUpdateWithoutProductInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  isActive: BoolFieldUpdateOperationsInput
  replies: ReplyUpdateManyWithoutCommentNestedInput
  text: StringFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutCommentsNestedInput
}

input CommentUpdateWithoutRepliesInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  isActive: BoolFieldUpdateOperationsInput
  product: ProductUpdateOneRequiredWithoutCommentsNestedInput
  text: StringFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutCommentsNestedInput
}

input CommentUpdateWithoutUserInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  isActive: BoolFieldUpdateOperationsInput
  product: ProductUpdateOneRequiredWithoutCommentsNestedInput
  replies: ReplyUpdateManyWithoutCommentNestedInput
  text: StringFieldUpdateOperationsInput
}

input CommentUpsertWithWhereUniqueWithoutProductInput {
  create: CommentCreateWithoutProductInput!
  update: CommentUpdateWithoutProductInput!
  where: CommentWhereUniqueInput!
}

input CommentUpsertWithWhereUniqueWithoutUserInput {
  create: CommentCreateWithoutUserInput!
  update: CommentUpdateWithoutUserInput!
  where: CommentWhereUniqueInput!
}

input CommentUpsertWithoutRepliesInput {
  create: CommentCreateWithoutRepliesInput!
  update: CommentUpdateWithoutRepliesInput!
  where: CommentWhereInput
}

input CommentWhereInput {
  AND: [CommentWhereInput!]
  NOT: [CommentWhereInput!]
  OR: [CommentWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  isActive: BoolFilter
  product: ProductRelationFilter
  productId: StringFilter
  replies: ReplyListRelationFilter
  text: StringFilter
  user: UserRelationFilter
  userId: StringFilter
}

input CommentWhereUniqueInput {
  AND: [CommentWhereInput!]
  NOT: [CommentWhereInput!]
  OR: [CommentWhereInput!]
  createdAt: DateTimeFilter
  id: String
  isActive: BoolFilter
  product: ProductRelationFilter
  productId: StringFilter
  replies: ReplyListRelationFilter
  text: StringFilter
  user: UserRelationFilter
  userId: StringFilter
}

type Condition {
  _count: ConditionCount!
  id: ID!
  name: String!
  products: [Product!]
}

type ConditionCount {
  products: Int!
}

type ConditionCountAggregate {
  _all: Int!
  id: Int!
  name: Int!
}

input ConditionCountAggregateInput {
  _all: Boolean
  id: Boolean
  name: Boolean
}

input ConditionCountOrderByAggregateInput {
  id: SortOrder
  name: SortOrder
}

input ConditionCreateInput {
  id: String
  name: String!
  products: ProductCreateNestedManyWithoutConditionInput
}

input ConditionCreateManyInput {
  id: String
  name: String!
}

input ConditionCreateNestedOneWithoutProductsInput {
  connect: ConditionWhereUniqueInput
  connectOrCreate: ConditionCreateOrConnectWithoutProductsInput
  create: ConditionCreateWithoutProductsInput
}

input ConditionCreateOrConnectWithoutProductsInput {
  create: ConditionCreateWithoutProductsInput!
  where: ConditionWhereUniqueInput!
}

input ConditionCreateWithoutProductsInput {
  id: String
  name: String!
}

type ConditionGroupBy {
  _count: ConditionCountAggregate
  _max: ConditionMaxAggregate
  _min: ConditionMinAggregate
  id: String!
  name: String!
}

type ConditionMaxAggregate {
  id: String
  name: String
}

input ConditionMaxAggregateInput {
  id: Boolean
  name: Boolean
}

input ConditionMaxOrderByAggregateInput {
  id: SortOrder
  name: SortOrder
}

type ConditionMinAggregate {
  id: String
  name: String
}

input ConditionMinAggregateInput {
  id: Boolean
  name: Boolean
}

input ConditionMinOrderByAggregateInput {
  id: SortOrder
  name: SortOrder
}

input ConditionOrderByWithAggregationInput {
  _count: ConditionCountOrderByAggregateInput
  _max: ConditionMaxOrderByAggregateInput
  _min: ConditionMinOrderByAggregateInput
  id: SortOrder
  name: SortOrder
}

input ConditionOrderByWithRelationInput {
  id: SortOrder
  name: SortOrder
  products: ProductOrderByRelationAggregateInput
}

input ConditionRelationFilter {
  is: ConditionWhereInput
  isNot: ConditionWhereInput
}

enum ConditionScalarFieldEnum {
  id
  name
}

input ConditionScalarWhereWithAggregatesInput {
  AND: [ConditionScalarWhereWithAggregatesInput!]
  NOT: [ConditionScalarWhereWithAggregatesInput!]
  OR: [ConditionScalarWhereWithAggregatesInput!]
  id: StringWithAggregatesFilter
  name: StringWithAggregatesFilter
}

input ConditionUpdateInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  products: ProductUpdateManyWithoutConditionNestedInput
}

input ConditionUpdateManyMutationInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
}

input ConditionUpdateOneRequiredWithoutProductsNestedInput {
  connect: ConditionWhereUniqueInput
  connectOrCreate: ConditionCreateOrConnectWithoutProductsInput
  create: ConditionCreateWithoutProductsInput
  update: ConditionUpdateToOneWithWhereWithoutProductsInput
  upsert: ConditionUpsertWithoutProductsInput
}

input ConditionUpdateToOneWithWhereWithoutProductsInput {
  data: ConditionUpdateWithoutProductsInput!
  where: ConditionWhereInput
}

input ConditionUpdateWithoutProductsInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
}

input ConditionUpsertWithoutProductsInput {
  create: ConditionCreateWithoutProductsInput!
  update: ConditionUpdateWithoutProductsInput!
  where: ConditionWhereInput
}

input ConditionWhereInput {
  AND: [ConditionWhereInput!]
  NOT: [ConditionWhereInput!]
  OR: [ConditionWhereInput!]
  id: StringFilter
  name: StringFilter
  products: ProductListRelationFilter
}

input ConditionWhereUniqueInput {
  AND: [ConditionWhereInput!]
  NOT: [ConditionWhereInput!]
  OR: [ConditionWhereInput!]
  id: String
  name: StringFilter
  products: ProductListRelationFilter
}

type Country {
  _count: CountryCount!
  id: ID!
  name: String!
  products: [Product!]
  states: [State!]
}

type CountryCount {
  products: Int!
  states: Int!
}

type CountryCountAggregate {
  _all: Int!
  id: Int!
  name: Int!
}

input CountryCountAggregateInput {
  _all: Boolean
  id: Boolean
  name: Boolean
}

input CountryCountOrderByAggregateInput {
  id: SortOrder
  name: SortOrder
}

input CountryCreateInput {
  id: String
  name: String!
  products: ProductCreateNestedManyWithoutCountryInput
  states: StateCreateNestedManyWithoutCountryInput
}

input CountryCreateManyInput {
  id: String
  name: String!
}

input CountryCreateNestedOneWithoutProductsInput {
  connect: CountryWhereUniqueInput
  connectOrCreate: CountryCreateOrConnectWithoutProductsInput
  create: CountryCreateWithoutProductsInput
}

input CountryCreateNestedOneWithoutStatesInput {
  connect: CountryWhereUniqueInput
  connectOrCreate: CountryCreateOrConnectWithoutStatesInput
  create: CountryCreateWithoutStatesInput
}

input CountryCreateOrConnectWithoutProductsInput {
  create: CountryCreateWithoutProductsInput!
  where: CountryWhereUniqueInput!
}

input CountryCreateOrConnectWithoutStatesInput {
  create: CountryCreateWithoutStatesInput!
  where: CountryWhereUniqueInput!
}

input CountryCreateWithoutProductsInput {
  id: String
  name: String!
  states: StateCreateNestedManyWithoutCountryInput
}

input CountryCreateWithoutStatesInput {
  id: String
  name: String!
  products: ProductCreateNestedManyWithoutCountryInput
}

type CountryGroupBy {
  _count: CountryCountAggregate
  _max: CountryMaxAggregate
  _min: CountryMinAggregate
  id: String!
  name: String!
}

type CountryMaxAggregate {
  id: String
  name: String
}

input CountryMaxAggregateInput {
  id: Boolean
  name: Boolean
}

input CountryMaxOrderByAggregateInput {
  id: SortOrder
  name: SortOrder
}

type CountryMinAggregate {
  id: String
  name: String
}

input CountryMinAggregateInput {
  id: Boolean
  name: Boolean
}

input CountryMinOrderByAggregateInput {
  id: SortOrder
  name: SortOrder
}

input CountryNullableRelationFilter {
  is: CountryWhereInput
  isNot: CountryWhereInput
}

input CountryOrderByWithAggregationInput {
  _count: CountryCountOrderByAggregateInput
  _max: CountryMaxOrderByAggregateInput
  _min: CountryMinOrderByAggregateInput
  id: SortOrder
  name: SortOrder
}

input CountryOrderByWithRelationInput {
  id: SortOrder
  name: SortOrder
  products: ProductOrderByRelationAggregateInput
  states: StateOrderByRelationAggregateInput
}

input CountryRelationFilter {
  is: CountryWhereInput
  isNot: CountryWhereInput
}

enum CountryScalarFieldEnum {
  id
  name
}

input CountryScalarWhereWithAggregatesInput {
  AND: [CountryScalarWhereWithAggregatesInput!]
  NOT: [CountryScalarWhereWithAggregatesInput!]
  OR: [CountryScalarWhereWithAggregatesInput!]
  id: StringWithAggregatesFilter
  name: StringWithAggregatesFilter
}

input CountryUpdateInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  products: ProductUpdateManyWithoutCountryNestedInput
  states: StateUpdateManyWithoutCountryNestedInput
}

input CountryUpdateManyMutationInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
}

input CountryUpdateOneRequiredWithoutStatesNestedInput {
  connect: CountryWhereUniqueInput
  connectOrCreate: CountryCreateOrConnectWithoutStatesInput
  create: CountryCreateWithoutStatesInput
  update: CountryUpdateToOneWithWhereWithoutStatesInput
  upsert: CountryUpsertWithoutStatesInput
}

input CountryUpdateOneWithoutProductsNestedInput {
  connect: CountryWhereUniqueInput
  connectOrCreate: CountryCreateOrConnectWithoutProductsInput
  create: CountryCreateWithoutProductsInput
  delete: CountryWhereInput
  disconnect: CountryWhereInput
  update: CountryUpdateToOneWithWhereWithoutProductsInput
  upsert: CountryUpsertWithoutProductsInput
}

input CountryUpdateToOneWithWhereWithoutProductsInput {
  data: CountryUpdateWithoutProductsInput!
  where: CountryWhereInput
}

input CountryUpdateToOneWithWhereWithoutStatesInput {
  data: CountryUpdateWithoutStatesInput!
  where: CountryWhereInput
}

input CountryUpdateWithoutProductsInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  states: StateUpdateManyWithoutCountryNestedInput
}

input CountryUpdateWithoutStatesInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  products: ProductUpdateManyWithoutCountryNestedInput
}

input CountryUpsertWithoutProductsInput {
  create: CountryCreateWithoutProductsInput!
  update: CountryUpdateWithoutProductsInput!
  where: CountryWhereInput
}

input CountryUpsertWithoutStatesInput {
  create: CountryCreateWithoutStatesInput!
  update: CountryUpdateWithoutStatesInput!
  where: CountryWhereInput
}

input CountryWhereInput {
  AND: [CountryWhereInput!]
  NOT: [CountryWhereInput!]
  OR: [CountryWhereInput!]
  id: StringFilter
  name: StringFilter
  products: ProductListRelationFilter
  states: StateListRelationFilter
}

input CountryWhereUniqueInput {
  AND: [CountryWhereInput!]
  NOT: [CountryWhereInput!]
  OR: [CountryWhereInput!]
  id: String
  name: StringFilter
  products: ProductListRelationFilter
  states: StateListRelationFilter
}

input DateTimeFieldUpdateOperationsInput {
  set: Timestamp
}

input DateTimeFilter {
  equals: Timestamp
  gt: Timestamp
  gte: Timestamp
  in: [Timestamp!]
  lt: Timestamp
  lte: Timestamp
  not: NestedDateTimeFilter
  notIn: [Timestamp!]
}

input DateTimeNullableFilter {
  equals: Timestamp
  gt: Timestamp
  gte: Timestamp
  in: [Timestamp!]
  lt: Timestamp
  lte: Timestamp
  not: NestedDateTimeNullableFilter
  notIn: [Timestamp!]
}

input DateTimeNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedDateTimeNullableFilter
  _min: NestedDateTimeNullableFilter
  equals: Timestamp
  gt: Timestamp
  gte: Timestamp
  in: [Timestamp!]
  lt: Timestamp
  lte: Timestamp
  not: NestedDateTimeNullableWithAggregatesFilter
  notIn: [Timestamp!]
}

input DateTimeWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedDateTimeFilter
  _min: NestedDateTimeFilter
  equals: Timestamp
  gt: Timestamp
  gte: Timestamp
  in: [Timestamp!]
  lt: Timestamp
  lte: Timestamp
  not: NestedDateTimeWithAggregatesFilter
  notIn: [Timestamp!]
}

input EnumSubscriptionTypeFieldUpdateOperationsInput {
  set: SubscriptionType
}

input EnumSubscriptionTypeFilter {
  equals: SubscriptionType
  in: [SubscriptionType!]
  not: NestedEnumSubscriptionTypeFilter
  notIn: [SubscriptionType!]
}

input EnumSubscriptionTypeWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedEnumSubscriptionTypeFilter
  _min: NestedEnumSubscriptionTypeFilter
  equals: SubscriptionType
  in: [SubscriptionType!]
  not: NestedEnumSubscriptionTypeWithAggregatesFilter
  notIn: [SubscriptionType!]
}

type Favorite {
  product: Product!
  productId: String!
  user: User!
  userId: String!
}

type FavoriteCountAggregate {
  _all: Int!
  productId: Int!
  userId: Int!
}

input FavoriteCountAggregateInput {
  _all: Boolean
  productId: Boolean
  userId: Boolean
}

input FavoriteCountOrderByAggregateInput {
  productId: SortOrder
  userId: SortOrder
}

input FavoriteCreateInput {
  product: ProductCreateNestedOneWithoutFavoritesInput!
  user: UserCreateNestedOneWithoutFavoritesInput!
}

input FavoriteCreateManyInput {
  productId: String!
  userId: String!
}

input FavoriteCreateManyProductInput {
  userId: String!
}

input FavoriteCreateManyProductInputEnvelope {
  data: [FavoriteCreateManyProductInput!]!
  skipDuplicates: Boolean
}

input FavoriteCreateManyUserInput {
  productId: String!
}

input FavoriteCreateManyUserInputEnvelope {
  data: [FavoriteCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input FavoriteCreateNestedManyWithoutProductInput {
  connect: [FavoriteWhereUniqueInput!]
  connectOrCreate: [FavoriteCreateOrConnectWithoutProductInput!]
  create: [FavoriteCreateWithoutProductInput!]
  createMany: FavoriteCreateManyProductInputEnvelope
}

input FavoriteCreateNestedManyWithoutUserInput {
  connect: [FavoriteWhereUniqueInput!]
  connectOrCreate: [FavoriteCreateOrConnectWithoutUserInput!]
  create: [FavoriteCreateWithoutUserInput!]
  createMany: FavoriteCreateManyUserInputEnvelope
}

input FavoriteCreateOrConnectWithoutProductInput {
  create: FavoriteCreateWithoutProductInput!
  where: FavoriteWhereUniqueInput!
}

input FavoriteCreateOrConnectWithoutUserInput {
  create: FavoriteCreateWithoutUserInput!
  where: FavoriteWhereUniqueInput!
}

input FavoriteCreateWithoutProductInput {
  user: UserCreateNestedOneWithoutFavoritesInput!
}

input FavoriteCreateWithoutUserInput {
  product: ProductCreateNestedOneWithoutFavoritesInput!
}

type FavoriteGroupBy {
  _count: FavoriteCountAggregate
  _max: FavoriteMaxAggregate
  _min: FavoriteMinAggregate
  productId: String!
  userId: String!
}

input FavoriteListRelationFilter {
  every: FavoriteWhereInput
  none: FavoriteWhereInput
  some: FavoriteWhereInput
}

type FavoriteMaxAggregate {
  productId: String
  userId: String
}

input FavoriteMaxAggregateInput {
  productId: Boolean
  userId: Boolean
}

input FavoriteMaxOrderByAggregateInput {
  productId: SortOrder
  userId: SortOrder
}

type FavoriteMinAggregate {
  productId: String
  userId: String
}

input FavoriteMinAggregateInput {
  productId: Boolean
  userId: Boolean
}

input FavoriteMinOrderByAggregateInput {
  productId: SortOrder
  userId: SortOrder
}

input FavoriteOrderByRelationAggregateInput {
  _count: SortOrder
}

input FavoriteOrderByWithAggregationInput {
  _count: FavoriteCountOrderByAggregateInput
  _max: FavoriteMaxOrderByAggregateInput
  _min: FavoriteMinOrderByAggregateInput
  productId: SortOrder
  userId: SortOrder
}

input FavoriteOrderByWithRelationInput {
  product: ProductOrderByWithRelationInput
  productId: SortOrder
  user: UserOrderByWithRelationInput
  userId: SortOrder
}

enum FavoriteScalarFieldEnum {
  productId
  userId
}

input FavoriteScalarWhereInput {
  AND: [FavoriteScalarWhereInput!]
  NOT: [FavoriteScalarWhereInput!]
  OR: [FavoriteScalarWhereInput!]
  productId: StringFilter
  userId: StringFilter
}

input FavoriteScalarWhereWithAggregatesInput {
  AND: [FavoriteScalarWhereWithAggregatesInput!]
  NOT: [FavoriteScalarWhereWithAggregatesInput!]
  OR: [FavoriteScalarWhereWithAggregatesInput!]
  productId: StringWithAggregatesFilter
  userId: StringWithAggregatesFilter
}

input FavoriteUncheckedUpdateManyInput {
  productId: StringFieldUpdateOperationsInput
  userId: StringFieldUpdateOperationsInput
}

input FavoriteUncheckedUpdateManyWithoutProductInput {
  userId: StringFieldUpdateOperationsInput
}

input FavoriteUncheckedUpdateManyWithoutUserInput {
  productId: StringFieldUpdateOperationsInput
}

input FavoriteUpdateInput {
  product: ProductUpdateOneRequiredWithoutFavoritesNestedInput
  user: UserUpdateOneRequiredWithoutFavoritesNestedInput
}

input FavoriteUpdateManyWithWhereWithoutProductInput {
  data: FavoriteUncheckedUpdateManyWithoutProductInput!
  where: FavoriteScalarWhereInput!
}

input FavoriteUpdateManyWithWhereWithoutUserInput {
  data: FavoriteUncheckedUpdateManyWithoutUserInput!
  where: FavoriteScalarWhereInput!
}

input FavoriteUpdateManyWithoutProductNestedInput {
  connect: [FavoriteWhereUniqueInput!]
  connectOrCreate: [FavoriteCreateOrConnectWithoutProductInput!]
  create: [FavoriteCreateWithoutProductInput!]
  createMany: FavoriteCreateManyProductInputEnvelope
  delete: [FavoriteWhereUniqueInput!]
  deleteMany: [FavoriteScalarWhereInput!]
  disconnect: [FavoriteWhereUniqueInput!]
  set: [FavoriteWhereUniqueInput!]
  update: [FavoriteUpdateWithWhereUniqueWithoutProductInput!]
  updateMany: [FavoriteUpdateManyWithWhereWithoutProductInput!]
  upsert: [FavoriteUpsertWithWhereUniqueWithoutProductInput!]
}

input FavoriteUpdateManyWithoutUserNestedInput {
  connect: [FavoriteWhereUniqueInput!]
  connectOrCreate: [FavoriteCreateOrConnectWithoutUserInput!]
  create: [FavoriteCreateWithoutUserInput!]
  createMany: FavoriteCreateManyUserInputEnvelope
  delete: [FavoriteWhereUniqueInput!]
  deleteMany: [FavoriteScalarWhereInput!]
  disconnect: [FavoriteWhereUniqueInput!]
  set: [FavoriteWhereUniqueInput!]
  update: [FavoriteUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [FavoriteUpdateManyWithWhereWithoutUserInput!]
  upsert: [FavoriteUpsertWithWhereUniqueWithoutUserInput!]
}

input FavoriteUpdateWithWhereUniqueWithoutProductInput {
  data: FavoriteUpdateWithoutProductInput!
  where: FavoriteWhereUniqueInput!
}

input FavoriteUpdateWithWhereUniqueWithoutUserInput {
  data: FavoriteUpdateWithoutUserInput!
  where: FavoriteWhereUniqueInput!
}

input FavoriteUpdateWithoutProductInput {
  user: UserUpdateOneRequiredWithoutFavoritesNestedInput
}

input FavoriteUpdateWithoutUserInput {
  product: ProductUpdateOneRequiredWithoutFavoritesNestedInput
}

input FavoriteUpsertWithWhereUniqueWithoutProductInput {
  create: FavoriteCreateWithoutProductInput!
  update: FavoriteUpdateWithoutProductInput!
  where: FavoriteWhereUniqueInput!
}

input FavoriteUpsertWithWhereUniqueWithoutUserInput {
  create: FavoriteCreateWithoutUserInput!
  update: FavoriteUpdateWithoutUserInput!
  where: FavoriteWhereUniqueInput!
}

input FavoriteUserIdProductIdCompoundUniqueInput {
  productId: String!
  userId: String!
}

input FavoriteWhereInput {
  AND: [FavoriteWhereInput!]
  NOT: [FavoriteWhereInput!]
  OR: [FavoriteWhereInput!]
  product: ProductRelationFilter
  productId: StringFilter
  user: UserRelationFilter
  userId: StringFilter
}

input FavoriteWhereUniqueInput {
  AND: [FavoriteWhereInput!]
  NOT: [FavoriteWhereInput!]
  OR: [FavoriteWhereInput!]
  product: ProductRelationFilter
  productId: StringFilter
  user: UserRelationFilter
  userId: StringFilter
  userId_productId: FavoriteUserIdProductIdCompoundUniqueInput
}

input FloatFieldUpdateOperationsInput {
  decrement: Float
  divide: Float
  increment: Float
  multiply: Float
  set: Float
}

input FloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatFilter
  notIn: [Float!]
}

input FloatWithAggregatesFilter {
  _avg: NestedFloatFilter
  _count: NestedIntFilter
  _max: NestedFloatFilter
  _min: NestedFloatFilter
  _sum: NestedFloatFilter
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatWithAggregatesFilter
  notIn: [Float!]
}

type GlobalSettings {
  createdAt: Timestamp!
  description: String
  id: ID!
  isActive: Boolean!
  value: String!
}

type GlobalSettingsCountAggregate {
  _all: Int!
  createdAt: Int!
  description: Int!
  id: Int!
  isActive: Int!
  value: Int!
}

input GlobalSettingsCountAggregateInput {
  _all: Boolean
  createdAt: Boolean
  description: Boolean
  id: Boolean
  isActive: Boolean
  value: Boolean
}

input GlobalSettingsCountOrderByAggregateInput {
  createdAt: SortOrder
  description: SortOrder
  id: SortOrder
  isActive: SortOrder
  value: SortOrder
}

input GlobalSettingsCreateInput {
  createdAt: Timestamp
  description: String
  id: String!
  isActive: Boolean
  value: String!
}

input GlobalSettingsCreateManyInput {
  createdAt: Timestamp
  description: String
  id: String!
  isActive: Boolean
  value: String!
}

type GlobalSettingsGroupBy {
  _count: GlobalSettingsCountAggregate
  _max: GlobalSettingsMaxAggregate
  _min: GlobalSettingsMinAggregate
  createdAt: Timestamp!
  description: String
  id: String!
  isActive: Boolean!
  value: String!
}

type GlobalSettingsMaxAggregate {
  createdAt: Timestamp
  description: String
  id: String
  isActive: Boolean
  value: String
}

input GlobalSettingsMaxAggregateInput {
  createdAt: Boolean
  description: Boolean
  id: Boolean
  isActive: Boolean
  value: Boolean
}

input GlobalSettingsMaxOrderByAggregateInput {
  createdAt: SortOrder
  description: SortOrder
  id: SortOrder
  isActive: SortOrder
  value: SortOrder
}

type GlobalSettingsMinAggregate {
  createdAt: Timestamp
  description: String
  id: String
  isActive: Boolean
  value: String
}

input GlobalSettingsMinAggregateInput {
  createdAt: Boolean
  description: Boolean
  id: Boolean
  isActive: Boolean
  value: Boolean
}

input GlobalSettingsMinOrderByAggregateInput {
  createdAt: SortOrder
  description: SortOrder
  id: SortOrder
  isActive: SortOrder
  value: SortOrder
}

input GlobalSettingsOrderByWithAggregationInput {
  _count: GlobalSettingsCountOrderByAggregateInput
  _max: GlobalSettingsMaxOrderByAggregateInput
  _min: GlobalSettingsMinOrderByAggregateInput
  createdAt: SortOrder
  description: SortOrderInput
  id: SortOrder
  isActive: SortOrder
  value: SortOrder
}

input GlobalSettingsOrderByWithRelationInput {
  createdAt: SortOrder
  description: SortOrderInput
  id: SortOrder
  isActive: SortOrder
  value: SortOrder
}

enum GlobalSettingsScalarFieldEnum {
  createdAt
  description
  id
  isActive
  value
}

input GlobalSettingsScalarWhereWithAggregatesInput {
  AND: [GlobalSettingsScalarWhereWithAggregatesInput!]
  NOT: [GlobalSettingsScalarWhereWithAggregatesInput!]
  OR: [GlobalSettingsScalarWhereWithAggregatesInput!]
  createdAt: DateTimeWithAggregatesFilter
  description: StringNullableWithAggregatesFilter
  id: StringWithAggregatesFilter
  isActive: BoolWithAggregatesFilter
  value: StringWithAggregatesFilter
}

input GlobalSettingsUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  isActive: BoolFieldUpdateOperationsInput
  value: StringFieldUpdateOperationsInput
}

input GlobalSettingsUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  isActive: BoolFieldUpdateOperationsInput
  value: StringFieldUpdateOperationsInput
}

input GlobalSettingsWhereInput {
  AND: [GlobalSettingsWhereInput!]
  NOT: [GlobalSettingsWhereInput!]
  OR: [GlobalSettingsWhereInput!]
  createdAt: DateTimeFilter
  description: StringNullableFilter
  id: StringFilter
  isActive: BoolFilter
  value: StringFilter
}

input GlobalSettingsWhereUniqueInput {
  AND: [GlobalSettingsWhereInput!]
  NOT: [GlobalSettingsWhereInput!]
  OR: [GlobalSettingsWhereInput!]
  createdAt: DateTimeFilter
  description: StringNullableFilter
  id: String
  isActive: BoolFilter
  value: StringFilter
}

input IntFieldUpdateOperationsInput {
  decrement: Int
  divide: Int
  increment: Int
  multiply: Int
  set: Int
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input IntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

input IntNullableWithAggregatesFilter {
  _avg: NestedFloatNullableFilter
  _count: NestedIntNullableFilter
  _max: NestedIntNullableFilter
  _min: NestedIntNullableFilter
  _sum: NestedIntNullableFilter
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableWithAggregatesFilter
  notIn: [Int!]
}

input IntWithAggregatesFilter {
  _avg: NestedFloatFilter
  _count: NestedIntFilter
  _max: NestedIntFilter
  _min: NestedIntFilter
  _sum: NestedIntFilter
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntWithAggregatesFilter
  notIn: [Int!]
}

type Message {
  chat: Chat!
  chatId: String!
  createdAt: Timestamp!
  id: ID!
  imgUrl: String
  isRead: Boolean!
  text: String!
  user: User!
  userId: String!
}

type MessageCountAggregate {
  _all: Int!
  chatId: Int!
  createdAt: Int!
  id: Int!
  imgUrl: Int!
  isRead: Int!
  text: Int!
  userId: Int!
}

input MessageCountAggregateInput {
  _all: Boolean
  chatId: Boolean
  createdAt: Boolean
  id: Boolean
  imgUrl: Boolean
  isRead: Boolean
  text: Boolean
  userId: Boolean
}

input MessageCountOrderByAggregateInput {
  chatId: SortOrder
  createdAt: SortOrder
  id: SortOrder
  imgUrl: SortOrder
  isRead: SortOrder
  text: SortOrder
  userId: SortOrder
}

input MessageCreateInput {
  chat: ChatCreateNestedOneWithoutMessagesInput!
  createdAt: Timestamp
  id: String
  imgUrl: String
  isRead: Boolean
  text: String!
  user: UserCreateNestedOneWithoutMessagesInput!
}

input MessageCreateManyChatInput {
  createdAt: Timestamp
  id: String
  imgUrl: String
  isRead: Boolean
  text: String!
  userId: String!
}

input MessageCreateManyChatInputEnvelope {
  data: [MessageCreateManyChatInput!]!
  skipDuplicates: Boolean
}

input MessageCreateManyInput {
  chatId: String!
  createdAt: Timestamp
  id: String
  imgUrl: String
  isRead: Boolean
  text: String!
  userId: String!
}

input MessageCreateManyUserInput {
  chatId: String!
  createdAt: Timestamp
  id: String
  imgUrl: String
  isRead: Boolean
  text: String!
}

input MessageCreateManyUserInputEnvelope {
  data: [MessageCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input MessageCreateNestedManyWithoutChatInput {
  connect: [MessageWhereUniqueInput!]
  connectOrCreate: [MessageCreateOrConnectWithoutChatInput!]
  create: [MessageCreateWithoutChatInput!]
  createMany: MessageCreateManyChatInputEnvelope
}

input MessageCreateNestedManyWithoutUserInput {
  connect: [MessageWhereUniqueInput!]
  connectOrCreate: [MessageCreateOrConnectWithoutUserInput!]
  create: [MessageCreateWithoutUserInput!]
  createMany: MessageCreateManyUserInputEnvelope
}

input MessageCreateOrConnectWithoutChatInput {
  create: MessageCreateWithoutChatInput!
  where: MessageWhereUniqueInput!
}

input MessageCreateOrConnectWithoutUserInput {
  create: MessageCreateWithoutUserInput!
  where: MessageWhereUniqueInput!
}

input MessageCreateWithoutChatInput {
  createdAt: Timestamp
  id: String
  imgUrl: String
  isRead: Boolean
  text: String!
  user: UserCreateNestedOneWithoutMessagesInput!
}

input MessageCreateWithoutUserInput {
  chat: ChatCreateNestedOneWithoutMessagesInput!
  createdAt: Timestamp
  id: String
  imgUrl: String
  isRead: Boolean
  text: String!
}

type MessageGroupBy {
  _count: MessageCountAggregate
  _max: MessageMaxAggregate
  _min: MessageMinAggregate
  chatId: String!
  createdAt: Timestamp!
  id: String!
  imgUrl: String
  isRead: Boolean!
  text: String!
  userId: String!
}

input MessageListRelationFilter {
  every: MessageWhereInput
  none: MessageWhereInput
  some: MessageWhereInput
}

type MessageMaxAggregate {
  chatId: String
  createdAt: Timestamp
  id: String
  imgUrl: String
  isRead: Boolean
  text: String
  userId: String
}

input MessageMaxAggregateInput {
  chatId: Boolean
  createdAt: Boolean
  id: Boolean
  imgUrl: Boolean
  isRead: Boolean
  text: Boolean
  userId: Boolean
}

input MessageMaxOrderByAggregateInput {
  chatId: SortOrder
  createdAt: SortOrder
  id: SortOrder
  imgUrl: SortOrder
  isRead: SortOrder
  text: SortOrder
  userId: SortOrder
}

type MessageMinAggregate {
  chatId: String
  createdAt: Timestamp
  id: String
  imgUrl: String
  isRead: Boolean
  text: String
  userId: String
}

input MessageMinAggregateInput {
  chatId: Boolean
  createdAt: Boolean
  id: Boolean
  imgUrl: Boolean
  isRead: Boolean
  text: Boolean
  userId: Boolean
}

input MessageMinOrderByAggregateInput {
  chatId: SortOrder
  createdAt: SortOrder
  id: SortOrder
  imgUrl: SortOrder
  isRead: SortOrder
  text: SortOrder
  userId: SortOrder
}

input MessageOrderByRelationAggregateInput {
  _count: SortOrder
}

input MessageOrderByWithAggregationInput {
  _count: MessageCountOrderByAggregateInput
  _max: MessageMaxOrderByAggregateInput
  _min: MessageMinOrderByAggregateInput
  chatId: SortOrder
  createdAt: SortOrder
  id: SortOrder
  imgUrl: SortOrderInput
  isRead: SortOrder
  text: SortOrder
  userId: SortOrder
}

input MessageOrderByWithRelationInput {
  chat: ChatOrderByWithRelationInput
  chatId: SortOrder
  createdAt: SortOrder
  id: SortOrder
  imgUrl: SortOrderInput
  isRead: SortOrder
  text: SortOrder
  user: UserOrderByWithRelationInput
  userId: SortOrder
}

enum MessageScalarFieldEnum {
  chatId
  createdAt
  id
  imgUrl
  isRead
  text
  userId
}

input MessageScalarWhereInput {
  AND: [MessageScalarWhereInput!]
  NOT: [MessageScalarWhereInput!]
  OR: [MessageScalarWhereInput!]
  chatId: StringFilter
  createdAt: DateTimeFilter
  id: StringFilter
  imgUrl: StringNullableFilter
  isRead: BoolFilter
  text: StringFilter
  userId: StringFilter
}

input MessageScalarWhereWithAggregatesInput {
  AND: [MessageScalarWhereWithAggregatesInput!]
  NOT: [MessageScalarWhereWithAggregatesInput!]
  OR: [MessageScalarWhereWithAggregatesInput!]
  chatId: StringWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  id: StringWithAggregatesFilter
  imgUrl: StringNullableWithAggregatesFilter
  isRead: BoolWithAggregatesFilter
  text: StringWithAggregatesFilter
  userId: StringWithAggregatesFilter
}

input MessageUpdateInput {
  chat: ChatUpdateOneRequiredWithoutMessagesNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  imgUrl: NullableStringFieldUpdateOperationsInput
  isRead: BoolFieldUpdateOperationsInput
  text: StringFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutMessagesNestedInput
}

input MessageUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  imgUrl: NullableStringFieldUpdateOperationsInput
  isRead: BoolFieldUpdateOperationsInput
  text: StringFieldUpdateOperationsInput
}

input MessageUpdateManyWithWhereWithoutChatInput {
  data: MessageUpdateManyMutationInput!
  where: MessageScalarWhereInput!
}

input MessageUpdateManyWithWhereWithoutUserInput {
  data: MessageUpdateManyMutationInput!
  where: MessageScalarWhereInput!
}

input MessageUpdateManyWithoutChatNestedInput {
  connect: [MessageWhereUniqueInput!]
  connectOrCreate: [MessageCreateOrConnectWithoutChatInput!]
  create: [MessageCreateWithoutChatInput!]
  createMany: MessageCreateManyChatInputEnvelope
  delete: [MessageWhereUniqueInput!]
  deleteMany: [MessageScalarWhereInput!]
  disconnect: [MessageWhereUniqueInput!]
  set: [MessageWhereUniqueInput!]
  update: [MessageUpdateWithWhereUniqueWithoutChatInput!]
  updateMany: [MessageUpdateManyWithWhereWithoutChatInput!]
  upsert: [MessageUpsertWithWhereUniqueWithoutChatInput!]
}

input MessageUpdateManyWithoutUserNestedInput {
  connect: [MessageWhereUniqueInput!]
  connectOrCreate: [MessageCreateOrConnectWithoutUserInput!]
  create: [MessageCreateWithoutUserInput!]
  createMany: MessageCreateManyUserInputEnvelope
  delete: [MessageWhereUniqueInput!]
  deleteMany: [MessageScalarWhereInput!]
  disconnect: [MessageWhereUniqueInput!]
  set: [MessageWhereUniqueInput!]
  update: [MessageUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [MessageUpdateManyWithWhereWithoutUserInput!]
  upsert: [MessageUpsertWithWhereUniqueWithoutUserInput!]
}

input MessageUpdateWithWhereUniqueWithoutChatInput {
  data: MessageUpdateWithoutChatInput!
  where: MessageWhereUniqueInput!
}

input MessageUpdateWithWhereUniqueWithoutUserInput {
  data: MessageUpdateWithoutUserInput!
  where: MessageWhereUniqueInput!
}

input MessageUpdateWithoutChatInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  imgUrl: NullableStringFieldUpdateOperationsInput
  isRead: BoolFieldUpdateOperationsInput
  text: StringFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutMessagesNestedInput
}

input MessageUpdateWithoutUserInput {
  chat: ChatUpdateOneRequiredWithoutMessagesNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  imgUrl: NullableStringFieldUpdateOperationsInput
  isRead: BoolFieldUpdateOperationsInput
  text: StringFieldUpdateOperationsInput
}

input MessageUpsertWithWhereUniqueWithoutChatInput {
  create: MessageCreateWithoutChatInput!
  update: MessageUpdateWithoutChatInput!
  where: MessageWhereUniqueInput!
}

input MessageUpsertWithWhereUniqueWithoutUserInput {
  create: MessageCreateWithoutUserInput!
  update: MessageUpdateWithoutUserInput!
  where: MessageWhereUniqueInput!
}

input MessageWhereInput {
  AND: [MessageWhereInput!]
  NOT: [MessageWhereInput!]
  OR: [MessageWhereInput!]
  chat: ChatRelationFilter
  chatId: StringFilter
  createdAt: DateTimeFilter
  id: StringFilter
  imgUrl: StringNullableFilter
  isRead: BoolFilter
  text: StringFilter
  user: UserRelationFilter
  userId: StringFilter
}

input MessageWhereUniqueInput {
  AND: [MessageWhereInput!]
  NOT: [MessageWhereInput!]
  OR: [MessageWhereInput!]
  chat: ChatRelationFilter
  chatId: StringFilter
  createdAt: DateTimeFilter
  id: String
  imgUrl: StringNullableFilter
  isRead: BoolFilter
  text: StringFilter
  user: UserRelationFilter
  userId: StringFilter
}

type Mutation {
  createBanner(data: BannerCreateInput!): Banner
  createBrand(data: BrandCreateInput!): Brand
  createCategory(data: CategoryCreateInput!): Category
  createChat(data: ChatCreateInput!): Chat
  createCity(data: CityCreateInput!): City
  createComment(data: CommentCreateInput!): Comment
  createCondition(data: ConditionCreateInput!): Condition
  createCountry(data: CountryCreateInput!): Country
  createFavorite(data: FavoriteCreateInput!): Favorite
  createGlobalSettings(data: GlobalSettingsCreateInput!): GlobalSettings
  createManyBanner(data: [BannerCreateManyInput!]!, skipDuplicates: Boolean): AffectedRows
  createManyBrand(data: [BrandCreateManyInput!]!, skipDuplicates: Boolean): AffectedRows
  createManyCategory(data: [CategoryCreateManyInput!]!, skipDuplicates: Boolean): AffectedRows
  createManyChat(data: [ChatCreateManyInput!]!, skipDuplicates: Boolean): AffectedRows
  createManyCity(data: [CityCreateManyInput!]!, skipDuplicates: Boolean): AffectedRows
  createManyComment(data: [CommentCreateManyInput!]!, skipDuplicates: Boolean): AffectedRows
  createManyCondition(data: [ConditionCreateManyInput!]!, skipDuplicates: Boolean): AffectedRows
  createManyCountry(data: [CountryCreateManyInput!]!, skipDuplicates: Boolean): AffectedRows
  createManyFavorite(data: [FavoriteCreateManyInput!]!, skipDuplicates: Boolean): AffectedRows
  createManyGlobalSettings(data: [GlobalSettingsCreateManyInput!]!, skipDuplicates: Boolean): AffectedRows
  createManyMessage(data: [MessageCreateManyInput!]!, skipDuplicates: Boolean): AffectedRows
  createManyNeighbourhood(data: [NeighbourhoodCreateManyInput!]!, skipDuplicates: Boolean): AffectedRows
  createManyNotification(data: [NotificationCreateManyInput!]!, skipDuplicates: Boolean): AffectedRows
  createManyProduct(data: [ProductCreateManyInput!]!, skipDuplicates: Boolean): AffectedRows
  createManyProductImg(data: [ProductImgCreateManyInput!]!, skipDuplicates: Boolean): AffectedRows
  createManyReply(data: [ReplyCreateManyInput!]!, skipDuplicates: Boolean): AffectedRows
  createManyReport(data: [ReportCreateManyInput!]!, skipDuplicates: Boolean): AffectedRows
  createManyReview(data: [ReviewCreateManyInput!]!, skipDuplicates: Boolean): AffectedRows
  createManyReviewImg(data: [ReviewImgCreateManyInput!]!, skipDuplicates: Boolean): AffectedRows
  createManyShare(data: [ShareCreateManyInput!]!, skipDuplicates: Boolean): AffectedRows
  createManyState(data: [StateCreateManyInput!]!, skipDuplicates: Boolean): AffectedRows
  createManySubCategory(data: [SubCategoryCreateManyInput!]!, skipDuplicates: Boolean): AffectedRows
  createManySubscription(data: [SubscriptionCreateManyInput!]!, skipDuplicates: Boolean): AffectedRows
  createManyUser(data: [UserCreateManyInput!]!, skipDuplicates: Boolean): AffectedRows
  createMessage(data: MessageCreateInput!): Message
  createNeighbourhood(data: NeighbourhoodCreateInput!): Neighbourhood
  createNotification(data: NotificationCreateInput!): Notification
  createProduct(data: ProductCreateInput!): Product
  createProductImg(data: ProductImgCreateInput!): ProductImg
  createReply(data: ReplyCreateInput!): Reply
  createReport(data: ReportCreateInput!): Report
  createReview(data: ReviewCreateInput!): Review
  createReviewImg(data: ReviewImgCreateInput!): ReviewImg
  createShare(data: ShareCreateInput!): Share
  createState(data: StateCreateInput!): State
  createSubCategory(data: SubCategoryCreateInput!): SubCategory
  createSubscription(data: SubscriptionCreateInput!): Subscription
  createUser(data: UserCreateInput!): User
  deleteBanner(where: BannerWhereUniqueInput!): Banner
  deleteBrand(where: BrandWhereUniqueInput!): Brand
  deleteCategory(where: CategoryWhereUniqueInput!): Category
  deleteChat(where: ChatWhereUniqueInput!): Chat
  deleteCity(where: CityWhereUniqueInput!): City
  deleteComment(where: CommentWhereUniqueInput!): Comment
  deleteCondition(where: ConditionWhereUniqueInput!): Condition
  deleteCountry(where: CountryWhereUniqueInput!): Country
  deleteFavorite(where: FavoriteWhereUniqueInput!): Favorite
  deleteGlobalSettings(where: GlobalSettingsWhereUniqueInput!): GlobalSettings
  deleteManyBanner(where: BannerWhereInput): AffectedRows
  deleteManyBrand(where: BrandWhereInput): AffectedRows
  deleteManyCategory(where: CategoryWhereInput): AffectedRows
  deleteManyChat(where: ChatWhereInput): AffectedRows
  deleteManyCity(where: CityWhereInput): AffectedRows
  deleteManyComment(where: CommentWhereInput): AffectedRows
  deleteManyCondition(where: ConditionWhereInput): AffectedRows
  deleteManyCountry(where: CountryWhereInput): AffectedRows
  deleteManyFavorite(where: FavoriteWhereInput): AffectedRows
  deleteManyGlobalSettings(where: GlobalSettingsWhereInput): AffectedRows
  deleteManyMessage(where: MessageWhereInput): AffectedRows
  deleteManyNeighbourhood(where: NeighbourhoodWhereInput): AffectedRows
  deleteManyNotification(where: NotificationWhereInput): AffectedRows
  deleteManyProduct(where: ProductWhereInput): AffectedRows
  deleteManyProductImg(where: ProductImgWhereInput): AffectedRows
  deleteManyReply(where: ReplyWhereInput): AffectedRows
  deleteManyReport(where: ReportWhereInput): AffectedRows
  deleteManyReview(where: ReviewWhereInput): AffectedRows
  deleteManyReviewImg(where: ReviewImgWhereInput): AffectedRows
  deleteManyShare(where: ShareWhereInput): AffectedRows
  deleteManyState(where: StateWhereInput): AffectedRows
  deleteManySubCategory(where: SubCategoryWhereInput): AffectedRows
  deleteManySubscription(where: SubscriptionWhereInput): AffectedRows
  deleteManyUser(where: UserWhereInput): AffectedRows
  deleteMessage(where: MessageWhereUniqueInput!): Message
  deleteNeighbourhood(where: NeighbourhoodWhereUniqueInput!): Neighbourhood
  deleteNotification(where: NotificationWhereUniqueInput!): Notification
  deleteProduct(where: ProductWhereUniqueInput!): Product
  deleteProductImg(where: ProductImgWhereUniqueInput!): ProductImg
  deleteReply(where: ReplyWhereUniqueInput!): Reply
  deleteReport(where: ReportWhereUniqueInput!): Report
  deleteReview(where: ReviewWhereUniqueInput!): Review
  deleteReviewImg(where: ReviewImgWhereUniqueInput!): ReviewImg
  deleteShare(where: ShareWhereUniqueInput!): Share
  deleteState(where: StateWhereUniqueInput!): State
  deleteSubCategory(where: SubCategoryWhereUniqueInput!): SubCategory
  deleteSubscription(where: SubscriptionWhereUniqueInput!): Subscription
  deleteUser(where: UserWhereUniqueInput!): User
  updateBanner(data: BannerUpdateInput!, where: BannerWhereUniqueInput!): Banner
  updateBrand(data: BrandUpdateInput!, where: BrandWhereUniqueInput!): Brand
  updateCategory(data: CategoryUpdateInput!, where: CategoryWhereUniqueInput!): Category
  updateChat(data: ChatUpdateInput!, where: ChatWhereUniqueInput!): Chat
  updateCity(data: CityUpdateInput!, where: CityWhereUniqueInput!): City
  updateComment(data: CommentUpdateInput!, where: CommentWhereUniqueInput!): Comment
  updateCondition(data: ConditionUpdateInput!, where: ConditionWhereUniqueInput!): Condition
  updateCountry(data: CountryUpdateInput!, where: CountryWhereUniqueInput!): Country
  updateFavorite(data: FavoriteUpdateInput!, where: FavoriteWhereUniqueInput!): Favorite
  updateGlobalSettings(data: GlobalSettingsUpdateInput!, where: GlobalSettingsWhereUniqueInput!): GlobalSettings
  updateManyBanner(data: BannerUpdateManyMutationInput!, where: BannerWhereInput): AffectedRows
  updateManyBrand(data: BrandUpdateManyMutationInput!, where: BrandWhereInput): AffectedRows
  updateManyCategory(data: CategoryUpdateManyMutationInput!, where: CategoryWhereInput): AffectedRows
  updateManyChat(data: ChatUpdateManyMutationInput!, where: ChatWhereInput): AffectedRows
  updateManyCity(data: CityUpdateManyMutationInput!, where: CityWhereInput): AffectedRows
  updateManyComment(data: CommentUpdateManyMutationInput!, where: CommentWhereInput): AffectedRows
  updateManyCondition(data: ConditionUpdateManyMutationInput!, where: ConditionWhereInput): AffectedRows
  updateManyCountry(data: CountryUpdateManyMutationInput!, where: CountryWhereInput): AffectedRows
  updateManyFavorite(data: FavoriteUncheckedUpdateManyInput!, where: FavoriteWhereInput): AffectedRows
  updateManyGlobalSettings(data: GlobalSettingsUpdateManyMutationInput!, where: GlobalSettingsWhereInput): AffectedRows
  updateManyMessage(data: MessageUpdateManyMutationInput!, where: MessageWhereInput): AffectedRows
  updateManyNeighbourhood(data: NeighbourhoodUpdateManyMutationInput!, where: NeighbourhoodWhereInput): AffectedRows
  updateManyNotification(data: NotificationUpdateManyMutationInput!, where: NotificationWhereInput): AffectedRows
  updateManyProduct(data: ProductUpdateManyMutationInput!, where: ProductWhereInput): AffectedRows
  updateManyProductImg(data: ProductImgUpdateManyMutationInput!, where: ProductImgWhereInput): AffectedRows
  updateManyReply(data: ReplyUpdateManyMutationInput!, where: ReplyWhereInput): AffectedRows
  updateManyReport(data: ReportUpdateManyMutationInput!, where: ReportWhereInput): AffectedRows
  updateManyReview(data: ReviewUpdateManyMutationInput!, where: ReviewWhereInput): AffectedRows
  updateManyReviewImg(data: ReviewImgUpdateManyMutationInput!, where: ReviewImgWhereInput): AffectedRows
  updateManyShare(data: ShareUncheckedUpdateManyInput!, where: ShareWhereInput): AffectedRows
  updateManyState(data: StateUpdateManyMutationInput!, where: StateWhereInput): AffectedRows
  updateManySubCategory(data: SubCategoryUpdateManyMutationInput!, where: SubCategoryWhereInput): AffectedRows
  updateManySubscription(data: SubscriptionUpdateManyMutationInput!, where: SubscriptionWhereInput): AffectedRows
  updateManyUser(data: UserUpdateManyMutationInput!, where: UserWhereInput): AffectedRows
  updateMessage(data: MessageUpdateInput!, where: MessageWhereUniqueInput!): Message
  updateNeighbourhood(data: NeighbourhoodUpdateInput!, where: NeighbourhoodWhereUniqueInput!): Neighbourhood
  updateNotification(data: NotificationUpdateInput!, where: NotificationWhereUniqueInput!): Notification
  updateProduct(data: ProductUpdateInput!, where: ProductWhereUniqueInput!): Product
  updateProductImg(data: ProductImgUpdateInput!, where: ProductImgWhereUniqueInput!): ProductImg
  updateReply(data: ReplyUpdateInput!, where: ReplyWhereUniqueInput!): Reply
  updateReport(data: ReportUpdateInput!, where: ReportWhereUniqueInput!): Report
  updateReview(data: ReviewUpdateInput!, where: ReviewWhereUniqueInput!): Review
  updateReviewImg(data: ReviewImgUpdateInput!, where: ReviewImgWhereUniqueInput!): ReviewImg
  updateShare(data: ShareUpdateInput!, where: ShareWhereUniqueInput!): Share
  updateState(data: StateUpdateInput!, where: StateWhereUniqueInput!): State
  updateSubCategory(data: SubCategoryUpdateInput!, where: SubCategoryWhereUniqueInput!): SubCategory
  updateSubscription(data: SubscriptionUpdateInput!, where: SubscriptionWhereUniqueInput!): Subscription
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
}

type Neighbourhood {
  _count: NeighbourhoodCount!
  city: City!
  cityId: String!
  id: ID!
  name: String!
  products: [Product!]
}

type NeighbourhoodCount {
  products: Int!
}

type NeighbourhoodCountAggregate {
  _all: Int!
  cityId: Int!
  id: Int!
  name: Int!
}

input NeighbourhoodCountAggregateInput {
  _all: Boolean
  cityId: Boolean
  id: Boolean
  name: Boolean
}

input NeighbourhoodCountOrderByAggregateInput {
  cityId: SortOrder
  id: SortOrder
  name: SortOrder
}

input NeighbourhoodCreateInput {
  city: CityCreateNestedOneWithoutNeighbourhoodInput!
  id: String
  name: String!
  products: ProductCreateNestedManyWithoutNeighbourhoodInput
}

input NeighbourhoodCreateManyCityInput {
  id: String
  name: String!
}

input NeighbourhoodCreateManyCityInputEnvelope {
  data: [NeighbourhoodCreateManyCityInput!]!
  skipDuplicates: Boolean
}

input NeighbourhoodCreateManyInput {
  cityId: String!
  id: String
  name: String!
}

input NeighbourhoodCreateNestedManyWithoutCityInput {
  connect: [NeighbourhoodWhereUniqueInput!]
  connectOrCreate: [NeighbourhoodCreateOrConnectWithoutCityInput!]
  create: [NeighbourhoodCreateWithoutCityInput!]
  createMany: NeighbourhoodCreateManyCityInputEnvelope
}

input NeighbourhoodCreateNestedOneWithoutProductsInput {
  connect: NeighbourhoodWhereUniqueInput
  connectOrCreate: NeighbourhoodCreateOrConnectWithoutProductsInput
  create: NeighbourhoodCreateWithoutProductsInput
}

input NeighbourhoodCreateOrConnectWithoutCityInput {
  create: NeighbourhoodCreateWithoutCityInput!
  where: NeighbourhoodWhereUniqueInput!
}

input NeighbourhoodCreateOrConnectWithoutProductsInput {
  create: NeighbourhoodCreateWithoutProductsInput!
  where: NeighbourhoodWhereUniqueInput!
}

input NeighbourhoodCreateWithoutCityInput {
  id: String
  name: String!
  products: ProductCreateNestedManyWithoutNeighbourhoodInput
}

input NeighbourhoodCreateWithoutProductsInput {
  city: CityCreateNestedOneWithoutNeighbourhoodInput!
  id: String
  name: String!
}

type NeighbourhoodGroupBy {
  _count: NeighbourhoodCountAggregate
  _max: NeighbourhoodMaxAggregate
  _min: NeighbourhoodMinAggregate
  cityId: String!
  id: String!
  name: String!
}

input NeighbourhoodListRelationFilter {
  every: NeighbourhoodWhereInput
  none: NeighbourhoodWhereInput
  some: NeighbourhoodWhereInput
}

type NeighbourhoodMaxAggregate {
  cityId: String
  id: String
  name: String
}

input NeighbourhoodMaxAggregateInput {
  cityId: Boolean
  id: Boolean
  name: Boolean
}

input NeighbourhoodMaxOrderByAggregateInput {
  cityId: SortOrder
  id: SortOrder
  name: SortOrder
}

type NeighbourhoodMinAggregate {
  cityId: String
  id: String
  name: String
}

input NeighbourhoodMinAggregateInput {
  cityId: Boolean
  id: Boolean
  name: Boolean
}

input NeighbourhoodMinOrderByAggregateInput {
  cityId: SortOrder
  id: SortOrder
  name: SortOrder
}

input NeighbourhoodNullableRelationFilter {
  is: NeighbourhoodWhereInput
  isNot: NeighbourhoodWhereInput
}

input NeighbourhoodOrderByRelationAggregateInput {
  _count: SortOrder
}

input NeighbourhoodOrderByWithAggregationInput {
  _count: NeighbourhoodCountOrderByAggregateInput
  _max: NeighbourhoodMaxOrderByAggregateInput
  _min: NeighbourhoodMinOrderByAggregateInput
  cityId: SortOrder
  id: SortOrder
  name: SortOrder
}

input NeighbourhoodOrderByWithRelationInput {
  city: CityOrderByWithRelationInput
  cityId: SortOrder
  id: SortOrder
  name: SortOrder
  products: ProductOrderByRelationAggregateInput
}

enum NeighbourhoodScalarFieldEnum {
  cityId
  id
  name
}

input NeighbourhoodScalarWhereInput {
  AND: [NeighbourhoodScalarWhereInput!]
  NOT: [NeighbourhoodScalarWhereInput!]
  OR: [NeighbourhoodScalarWhereInput!]
  cityId: StringFilter
  id: StringFilter
  name: StringFilter
}

input NeighbourhoodScalarWhereWithAggregatesInput {
  AND: [NeighbourhoodScalarWhereWithAggregatesInput!]
  NOT: [NeighbourhoodScalarWhereWithAggregatesInput!]
  OR: [NeighbourhoodScalarWhereWithAggregatesInput!]
  cityId: StringWithAggregatesFilter
  id: StringWithAggregatesFilter
  name: StringWithAggregatesFilter
}

input NeighbourhoodUpdateInput {
  city: CityUpdateOneRequiredWithoutNeighbourhoodNestedInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  products: ProductUpdateManyWithoutNeighbourhoodNestedInput
}

input NeighbourhoodUpdateManyMutationInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
}

input NeighbourhoodUpdateManyWithWhereWithoutCityInput {
  data: NeighbourhoodUpdateManyMutationInput!
  where: NeighbourhoodScalarWhereInput!
}

input NeighbourhoodUpdateManyWithoutCityNestedInput {
  connect: [NeighbourhoodWhereUniqueInput!]
  connectOrCreate: [NeighbourhoodCreateOrConnectWithoutCityInput!]
  create: [NeighbourhoodCreateWithoutCityInput!]
  createMany: NeighbourhoodCreateManyCityInputEnvelope
  delete: [NeighbourhoodWhereUniqueInput!]
  deleteMany: [NeighbourhoodScalarWhereInput!]
  disconnect: [NeighbourhoodWhereUniqueInput!]
  set: [NeighbourhoodWhereUniqueInput!]
  update: [NeighbourhoodUpdateWithWhereUniqueWithoutCityInput!]
  updateMany: [NeighbourhoodUpdateManyWithWhereWithoutCityInput!]
  upsert: [NeighbourhoodUpsertWithWhereUniqueWithoutCityInput!]
}

input NeighbourhoodUpdateOneWithoutProductsNestedInput {
  connect: NeighbourhoodWhereUniqueInput
  connectOrCreate: NeighbourhoodCreateOrConnectWithoutProductsInput
  create: NeighbourhoodCreateWithoutProductsInput
  delete: NeighbourhoodWhereInput
  disconnect: NeighbourhoodWhereInput
  update: NeighbourhoodUpdateToOneWithWhereWithoutProductsInput
  upsert: NeighbourhoodUpsertWithoutProductsInput
}

input NeighbourhoodUpdateToOneWithWhereWithoutProductsInput {
  data: NeighbourhoodUpdateWithoutProductsInput!
  where: NeighbourhoodWhereInput
}

input NeighbourhoodUpdateWithWhereUniqueWithoutCityInput {
  data: NeighbourhoodUpdateWithoutCityInput!
  where: NeighbourhoodWhereUniqueInput!
}

input NeighbourhoodUpdateWithoutCityInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  products: ProductUpdateManyWithoutNeighbourhoodNestedInput
}

input NeighbourhoodUpdateWithoutProductsInput {
  city: CityUpdateOneRequiredWithoutNeighbourhoodNestedInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
}

input NeighbourhoodUpsertWithWhereUniqueWithoutCityInput {
  create: NeighbourhoodCreateWithoutCityInput!
  update: NeighbourhoodUpdateWithoutCityInput!
  where: NeighbourhoodWhereUniqueInput!
}

input NeighbourhoodUpsertWithoutProductsInput {
  create: NeighbourhoodCreateWithoutProductsInput!
  update: NeighbourhoodUpdateWithoutProductsInput!
  where: NeighbourhoodWhereInput
}

input NeighbourhoodWhereInput {
  AND: [NeighbourhoodWhereInput!]
  NOT: [NeighbourhoodWhereInput!]
  OR: [NeighbourhoodWhereInput!]
  city: CityRelationFilter
  cityId: StringFilter
  id: StringFilter
  name: StringFilter
  products: ProductListRelationFilter
}

input NeighbourhoodWhereUniqueInput {
  AND: [NeighbourhoodWhereInput!]
  NOT: [NeighbourhoodWhereInput!]
  OR: [NeighbourhoodWhereInput!]
  city: CityRelationFilter
  cityId: StringFilter
  id: String
  name: StringFilter
  products: ProductListRelationFilter
}

input NestedBoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input NestedBoolWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedBoolFilter
  _min: NestedBoolFilter
  equals: Boolean
  not: NestedBoolWithAggregatesFilter
}

input NestedDateTimeFilter {
  equals: Timestamp
  gt: Timestamp
  gte: Timestamp
  in: [Timestamp!]
  lt: Timestamp
  lte: Timestamp
  not: NestedDateTimeFilter
  notIn: [Timestamp!]
}

input NestedDateTimeNullableFilter {
  equals: Timestamp
  gt: Timestamp
  gte: Timestamp
  in: [Timestamp!]
  lt: Timestamp
  lte: Timestamp
  not: NestedDateTimeNullableFilter
  notIn: [Timestamp!]
}

input NestedDateTimeNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedDateTimeNullableFilter
  _min: NestedDateTimeNullableFilter
  equals: Timestamp
  gt: Timestamp
  gte: Timestamp
  in: [Timestamp!]
  lt: Timestamp
  lte: Timestamp
  not: NestedDateTimeNullableWithAggregatesFilter
  notIn: [Timestamp!]
}

input NestedDateTimeWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedDateTimeFilter
  _min: NestedDateTimeFilter
  equals: Timestamp
  gt: Timestamp
  gte: Timestamp
  in: [Timestamp!]
  lt: Timestamp
  lte: Timestamp
  not: NestedDateTimeWithAggregatesFilter
  notIn: [Timestamp!]
}

input NestedEnumSubscriptionTypeFilter {
  equals: SubscriptionType
  in: [SubscriptionType!]
  not: NestedEnumSubscriptionTypeFilter
  notIn: [SubscriptionType!]
}

input NestedEnumSubscriptionTypeWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedEnumSubscriptionTypeFilter
  _min: NestedEnumSubscriptionTypeFilter
  equals: SubscriptionType
  in: [SubscriptionType!]
  not: NestedEnumSubscriptionTypeWithAggregatesFilter
  notIn: [SubscriptionType!]
}

input NestedFloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatFilter
  notIn: [Float!]
}

input NestedFloatNullableFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatNullableFilter
  notIn: [Float!]
}

input NestedFloatWithAggregatesFilter {
  _avg: NestedFloatFilter
  _count: NestedIntFilter
  _max: NestedFloatFilter
  _min: NestedFloatFilter
  _sum: NestedFloatFilter
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatWithAggregatesFilter
  notIn: [Float!]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedIntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

input NestedIntNullableWithAggregatesFilter {
  _avg: NestedFloatNullableFilter
  _count: NestedIntNullableFilter
  _max: NestedIntNullableFilter
  _min: NestedIntNullableFilter
  _sum: NestedIntNullableFilter
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableWithAggregatesFilter
  notIn: [Int!]
}

input NestedIntWithAggregatesFilter {
  _avg: NestedFloatFilter
  _count: NestedIntFilter
  _max: NestedIntFilter
  _min: NestedIntFilter
  _sum: NestedIntFilter
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntWithAggregatesFilter
  notIn: [Int!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedStringNullableFilter
  _min: NestedStringNullableFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedStringFilter
  _min: NestedStringFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

type Notification {
  createdAt: Timestamp!
  id: ID!
  imgUrl: String
  isRead: Boolean!
  text: String!
  user: User!
  userId: String!
}

type NotificationCountAggregate {
  _all: Int!
  createdAt: Int!
  id: Int!
  imgUrl: Int!
  isRead: Int!
  text: Int!
  userId: Int!
}

input NotificationCountAggregateInput {
  _all: Boolean
  createdAt: Boolean
  id: Boolean
  imgUrl: Boolean
  isRead: Boolean
  text: Boolean
  userId: Boolean
}

input NotificationCountOrderByAggregateInput {
  createdAt: SortOrder
  id: SortOrder
  imgUrl: SortOrder
  isRead: SortOrder
  text: SortOrder
  userId: SortOrder
}

input NotificationCreateInput {
  createdAt: Timestamp
  id: String
  imgUrl: String
  isRead: Boolean
  text: String!
  user: UserCreateNestedOneWithoutNotificationsInput!
}

input NotificationCreateManyInput {
  createdAt: Timestamp
  id: String
  imgUrl: String
  isRead: Boolean
  text: String!
  userId: String!
}

input NotificationCreateManyUserInput {
  createdAt: Timestamp
  id: String
  imgUrl: String
  isRead: Boolean
  text: String!
}

input NotificationCreateManyUserInputEnvelope {
  data: [NotificationCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input NotificationCreateNestedManyWithoutUserInput {
  connect: [NotificationWhereUniqueInput!]
  connectOrCreate: [NotificationCreateOrConnectWithoutUserInput!]
  create: [NotificationCreateWithoutUserInput!]
  createMany: NotificationCreateManyUserInputEnvelope
}

input NotificationCreateOrConnectWithoutUserInput {
  create: NotificationCreateWithoutUserInput!
  where: NotificationWhereUniqueInput!
}

input NotificationCreateWithoutUserInput {
  createdAt: Timestamp
  id: String
  imgUrl: String
  isRead: Boolean
  text: String!
}

type NotificationGroupBy {
  _count: NotificationCountAggregate
  _max: NotificationMaxAggregate
  _min: NotificationMinAggregate
  createdAt: Timestamp!
  id: String!
  imgUrl: String
  isRead: Boolean!
  text: String!
  userId: String!
}

input NotificationListRelationFilter {
  every: NotificationWhereInput
  none: NotificationWhereInput
  some: NotificationWhereInput
}

type NotificationMaxAggregate {
  createdAt: Timestamp
  id: String
  imgUrl: String
  isRead: Boolean
  text: String
  userId: String
}

input NotificationMaxAggregateInput {
  createdAt: Boolean
  id: Boolean
  imgUrl: Boolean
  isRead: Boolean
  text: Boolean
  userId: Boolean
}

input NotificationMaxOrderByAggregateInput {
  createdAt: SortOrder
  id: SortOrder
  imgUrl: SortOrder
  isRead: SortOrder
  text: SortOrder
  userId: SortOrder
}

type NotificationMinAggregate {
  createdAt: Timestamp
  id: String
  imgUrl: String
  isRead: Boolean
  text: String
  userId: String
}

input NotificationMinAggregateInput {
  createdAt: Boolean
  id: Boolean
  imgUrl: Boolean
  isRead: Boolean
  text: Boolean
  userId: Boolean
}

input NotificationMinOrderByAggregateInput {
  createdAt: SortOrder
  id: SortOrder
  imgUrl: SortOrder
  isRead: SortOrder
  text: SortOrder
  userId: SortOrder
}

input NotificationOrderByRelationAggregateInput {
  _count: SortOrder
}

input NotificationOrderByWithAggregationInput {
  _count: NotificationCountOrderByAggregateInput
  _max: NotificationMaxOrderByAggregateInput
  _min: NotificationMinOrderByAggregateInput
  createdAt: SortOrder
  id: SortOrder
  imgUrl: SortOrderInput
  isRead: SortOrder
  text: SortOrder
  userId: SortOrder
}

input NotificationOrderByWithRelationInput {
  createdAt: SortOrder
  id: SortOrder
  imgUrl: SortOrderInput
  isRead: SortOrder
  text: SortOrder
  user: UserOrderByWithRelationInput
  userId: SortOrder
}

enum NotificationScalarFieldEnum {
  createdAt
  id
  imgUrl
  isRead
  text
  userId
}

input NotificationScalarWhereInput {
  AND: [NotificationScalarWhereInput!]
  NOT: [NotificationScalarWhereInput!]
  OR: [NotificationScalarWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  imgUrl: StringNullableFilter
  isRead: BoolFilter
  text: StringFilter
  userId: StringFilter
}

input NotificationScalarWhereWithAggregatesInput {
  AND: [NotificationScalarWhereWithAggregatesInput!]
  NOT: [NotificationScalarWhereWithAggregatesInput!]
  OR: [NotificationScalarWhereWithAggregatesInput!]
  createdAt: DateTimeWithAggregatesFilter
  id: StringWithAggregatesFilter
  imgUrl: StringNullableWithAggregatesFilter
  isRead: BoolWithAggregatesFilter
  text: StringWithAggregatesFilter
  userId: StringWithAggregatesFilter
}

input NotificationUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  imgUrl: NullableStringFieldUpdateOperationsInput
  isRead: BoolFieldUpdateOperationsInput
  text: StringFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutNotificationsNestedInput
}

input NotificationUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  imgUrl: NullableStringFieldUpdateOperationsInput
  isRead: BoolFieldUpdateOperationsInput
  text: StringFieldUpdateOperationsInput
}

input NotificationUpdateManyWithWhereWithoutUserInput {
  data: NotificationUpdateManyMutationInput!
  where: NotificationScalarWhereInput!
}

input NotificationUpdateManyWithoutUserNestedInput {
  connect: [NotificationWhereUniqueInput!]
  connectOrCreate: [NotificationCreateOrConnectWithoutUserInput!]
  create: [NotificationCreateWithoutUserInput!]
  createMany: NotificationCreateManyUserInputEnvelope
  delete: [NotificationWhereUniqueInput!]
  deleteMany: [NotificationScalarWhereInput!]
  disconnect: [NotificationWhereUniqueInput!]
  set: [NotificationWhereUniqueInput!]
  update: [NotificationUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [NotificationUpdateManyWithWhereWithoutUserInput!]
  upsert: [NotificationUpsertWithWhereUniqueWithoutUserInput!]
}

input NotificationUpdateWithWhereUniqueWithoutUserInput {
  data: NotificationUpdateWithoutUserInput!
  where: NotificationWhereUniqueInput!
}

input NotificationUpdateWithoutUserInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  imgUrl: NullableStringFieldUpdateOperationsInput
  isRead: BoolFieldUpdateOperationsInput
  text: StringFieldUpdateOperationsInput
}

input NotificationUpsertWithWhereUniqueWithoutUserInput {
  create: NotificationCreateWithoutUserInput!
  update: NotificationUpdateWithoutUserInput!
  where: NotificationWhereUniqueInput!
}

input NotificationWhereInput {
  AND: [NotificationWhereInput!]
  NOT: [NotificationWhereInput!]
  OR: [NotificationWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  imgUrl: StringNullableFilter
  isRead: BoolFilter
  text: StringFilter
  user: UserRelationFilter
  userId: StringFilter
}

input NotificationWhereUniqueInput {
  AND: [NotificationWhereInput!]
  NOT: [NotificationWhereInput!]
  OR: [NotificationWhereInput!]
  createdAt: DateTimeFilter
  id: String
  imgUrl: StringNullableFilter
  isRead: BoolFilter
  text: StringFilter
  user: UserRelationFilter
  userId: StringFilter
}

input NullableDateTimeFieldUpdateOperationsInput {
  set: Timestamp
}

input NullableIntFieldUpdateOperationsInput {
  decrement: Int
  divide: Int
  increment: Int
  multiply: Int
  set: Int
}

input NullableStringFieldUpdateOperationsInput {
  set: String
}

enum NullsOrder {
  first
  last
}

type Product {
  _count: ProductCount!
  approvedAt: Timestamp
  brand: Brand!
  brandId: String!
  category: Category!
  categoryId: String!
  city: City
  cityId: String
  comments: [Comment!]
  condition: Condition!
  conditionId: String!
  country: Country
  countryId: String
  createdAt: Timestamp!
  description: String!
  favorites: [Favorite!]
  id: ID!
  img_urls: [ProductImg!]
  isActive: Boolean!
  isPromoted: Boolean!
  name: String!
  neighbourhood: Neighbourhood
  neighbourhoodId: String
  price: Float!
  report: Report
  shares: [Share!]
  state: State
  stateId: String
  sub_category: SubCategory!
  sub_categoryId: String!
  updatedAt: Timestamp
  user: User!
  userId: String!
  viewCount: Int
  zip_code: String
}

type ProductAvgAggregate {
  price: Float
  viewCount: Float
}

input ProductAvgAggregateInput {
  price: Boolean
  viewCount: Boolean
}

input ProductAvgOrderByAggregateInput {
  price: SortOrder
  viewCount: SortOrder
}

type ProductCount {
  comments: Int!
  favorites: Int!
  img_urls: Int!
  shares: Int!
}

type ProductCountAggregate {
  _all: Int!
  approvedAt: Int!
  brandId: Int!
  categoryId: Int!
  cityId: Int!
  conditionId: Int!
  countryId: Int!
  createdAt: Int!
  description: Int!
  id: Int!
  isActive: Int!
  isPromoted: Int!
  name: Int!
  neighbourhoodId: Int!
  price: Int!
  stateId: Int!
  sub_categoryId: Int!
  updatedAt: Int!
  userId: Int!
  viewCount: Int!
  zip_code: Int!
}

input ProductCountAggregateInput {
  _all: Boolean
  approvedAt: Boolean
  brandId: Boolean
  categoryId: Boolean
  cityId: Boolean
  conditionId: Boolean
  countryId: Boolean
  createdAt: Boolean
  description: Boolean
  id: Boolean
  isActive: Boolean
  isPromoted: Boolean
  name: Boolean
  neighbourhoodId: Boolean
  price: Boolean
  stateId: Boolean
  sub_categoryId: Boolean
  updatedAt: Boolean
  userId: Boolean
  viewCount: Boolean
  zip_code: Boolean
}

input ProductCountOrderByAggregateInput {
  approvedAt: SortOrder
  brandId: SortOrder
  categoryId: SortOrder
  cityId: SortOrder
  conditionId: SortOrder
  countryId: SortOrder
  createdAt: SortOrder
  description: SortOrder
  id: SortOrder
  isActive: SortOrder
  isPromoted: SortOrder
  name: SortOrder
  neighbourhoodId: SortOrder
  price: SortOrder
  stateId: SortOrder
  sub_categoryId: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
  viewCount: SortOrder
  zip_code: SortOrder
}

input ProductCreateInput {
  approvedAt: Timestamp
  brand: BrandCreateNestedOneWithoutProductsInput!
  category: CategoryCreateNestedOneWithoutProductInput!
  city: CityCreateNestedOneWithoutProductsInput
  comments: CommentCreateNestedManyWithoutProductInput
  condition: ConditionCreateNestedOneWithoutProductsInput!
  country: CountryCreateNestedOneWithoutProductsInput
  createdAt: Timestamp
  description: String!
  favorites: FavoriteCreateNestedManyWithoutProductInput
  id: String
  img_urls: ProductImgCreateNestedManyWithoutProductInput
  isActive: Boolean
  isPromoted: Boolean
  name: String!
  neighbourhood: NeighbourhoodCreateNestedOneWithoutProductsInput
  price: Float!
  report: ReportCreateNestedOneWithoutProductInput
  shares: ShareCreateNestedManyWithoutProductInput
  state: StateCreateNestedOneWithoutProductsInput
  sub_category: SubCategoryCreateNestedOneWithoutProductInput!
  updatedAt: Timestamp
  user: UserCreateNestedOneWithoutProductsInput!
  viewCount: Int
  zip_code: String
}

input ProductCreateManyBrandInput {
  approvedAt: Timestamp
  categoryId: String!
  cityId: String
  conditionId: String!
  countryId: String
  createdAt: Timestamp
  description: String!
  id: String
  isActive: Boolean
  isPromoted: Boolean
  name: String!
  neighbourhoodId: String
  price: Float!
  stateId: String
  sub_categoryId: String!
  updatedAt: Timestamp
  userId: String!
  viewCount: Int
  zip_code: String
}

input ProductCreateManyBrandInputEnvelope {
  data: [ProductCreateManyBrandInput!]!
  skipDuplicates: Boolean
}

input ProductCreateManyCategoryInput {
  approvedAt: Timestamp
  brandId: String!
  cityId: String
  conditionId: String!
  countryId: String
  createdAt: Timestamp
  description: String!
  id: String
  isActive: Boolean
  isPromoted: Boolean
  name: String!
  neighbourhoodId: String
  price: Float!
  stateId: String
  sub_categoryId: String!
  updatedAt: Timestamp
  userId: String!
  viewCount: Int
  zip_code: String
}

input ProductCreateManyCategoryInputEnvelope {
  data: [ProductCreateManyCategoryInput!]!
  skipDuplicates: Boolean
}

input ProductCreateManyCityInput {
  approvedAt: Timestamp
  brandId: String!
  categoryId: String!
  conditionId: String!
  countryId: String
  createdAt: Timestamp
  description: String!
  id: String
  isActive: Boolean
  isPromoted: Boolean
  name: String!
  neighbourhoodId: String
  price: Float!
  stateId: String
  sub_categoryId: String!
  updatedAt: Timestamp
  userId: String!
  viewCount: Int
  zip_code: String
}

input ProductCreateManyCityInputEnvelope {
  data: [ProductCreateManyCityInput!]!
  skipDuplicates: Boolean
}

input ProductCreateManyConditionInput {
  approvedAt: Timestamp
  brandId: String!
  categoryId: String!
  cityId: String
  countryId: String
  createdAt: Timestamp
  description: String!
  id: String
  isActive: Boolean
  isPromoted: Boolean
  name: String!
  neighbourhoodId: String
  price: Float!
  stateId: String
  sub_categoryId: String!
  updatedAt: Timestamp
  userId: String!
  viewCount: Int
  zip_code: String
}

input ProductCreateManyConditionInputEnvelope {
  data: [ProductCreateManyConditionInput!]!
  skipDuplicates: Boolean
}

input ProductCreateManyCountryInput {
  approvedAt: Timestamp
  brandId: String!
  categoryId: String!
  cityId: String
  conditionId: String!
  createdAt: Timestamp
  description: String!
  id: String
  isActive: Boolean
  isPromoted: Boolean
  name: String!
  neighbourhoodId: String
  price: Float!
  stateId: String
  sub_categoryId: String!
  updatedAt: Timestamp
  userId: String!
  viewCount: Int
  zip_code: String
}

input ProductCreateManyCountryInputEnvelope {
  data: [ProductCreateManyCountryInput!]!
  skipDuplicates: Boolean
}

input ProductCreateManyInput {
  approvedAt: Timestamp
  brandId: String!
  categoryId: String!
  cityId: String
  conditionId: String!
  countryId: String
  createdAt: Timestamp
  description: String!
  id: String
  isActive: Boolean
  isPromoted: Boolean
  name: String!
  neighbourhoodId: String
  price: Float!
  stateId: String
  sub_categoryId: String!
  updatedAt: Timestamp
  userId: String!
  viewCount: Int
  zip_code: String
}

input ProductCreateManyNeighbourhoodInput {
  approvedAt: Timestamp
  brandId: String!
  categoryId: String!
  cityId: String
  conditionId: String!
  countryId: String
  createdAt: Timestamp
  description: String!
  id: String
  isActive: Boolean
  isPromoted: Boolean
  name: String!
  price: Float!
  stateId: String
  sub_categoryId: String!
  updatedAt: Timestamp
  userId: String!
  viewCount: Int
  zip_code: String
}

input ProductCreateManyNeighbourhoodInputEnvelope {
  data: [ProductCreateManyNeighbourhoodInput!]!
  skipDuplicates: Boolean
}

input ProductCreateManyStateInput {
  approvedAt: Timestamp
  brandId: String!
  categoryId: String!
  cityId: String
  conditionId: String!
  countryId: String
  createdAt: Timestamp
  description: String!
  id: String
  isActive: Boolean
  isPromoted: Boolean
  name: String!
  neighbourhoodId: String
  price: Float!
  sub_categoryId: String!
  updatedAt: Timestamp
  userId: String!
  viewCount: Int
  zip_code: String
}

input ProductCreateManyStateInputEnvelope {
  data: [ProductCreateManyStateInput!]!
  skipDuplicates: Boolean
}

input ProductCreateManySub_categoryInput {
  approvedAt: Timestamp
  brandId: String!
  categoryId: String!
  cityId: String
  conditionId: String!
  countryId: String
  createdAt: Timestamp
  description: String!
  id: String
  isActive: Boolean
  isPromoted: Boolean
  name: String!
  neighbourhoodId: String
  price: Float!
  stateId: String
  updatedAt: Timestamp
  userId: String!
  viewCount: Int
  zip_code: String
}

input ProductCreateManySub_categoryInputEnvelope {
  data: [ProductCreateManySub_categoryInput!]!
  skipDuplicates: Boolean
}

input ProductCreateManyUserInput {
  approvedAt: Timestamp
  brandId: String!
  categoryId: String!
  cityId: String
  conditionId: String!
  countryId: String
  createdAt: Timestamp
  description: String!
  id: String
  isActive: Boolean
  isPromoted: Boolean
  name: String!
  neighbourhoodId: String
  price: Float!
  stateId: String
  sub_categoryId: String!
  updatedAt: Timestamp
  viewCount: Int
  zip_code: String
}

input ProductCreateManyUserInputEnvelope {
  data: [ProductCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input ProductCreateNestedManyWithoutBrandInput {
  connect: [ProductWhereUniqueInput!]
  connectOrCreate: [ProductCreateOrConnectWithoutBrandInput!]
  create: [ProductCreateWithoutBrandInput!]
  createMany: ProductCreateManyBrandInputEnvelope
}

input ProductCreateNestedManyWithoutCategoryInput {
  connect: [ProductWhereUniqueInput!]
  connectOrCreate: [ProductCreateOrConnectWithoutCategoryInput!]
  create: [ProductCreateWithoutCategoryInput!]
  createMany: ProductCreateManyCategoryInputEnvelope
}

input ProductCreateNestedManyWithoutCityInput {
  connect: [ProductWhereUniqueInput!]
  connectOrCreate: [ProductCreateOrConnectWithoutCityInput!]
  create: [ProductCreateWithoutCityInput!]
  createMany: ProductCreateManyCityInputEnvelope
}

input ProductCreateNestedManyWithoutConditionInput {
  connect: [ProductWhereUniqueInput!]
  connectOrCreate: [ProductCreateOrConnectWithoutConditionInput!]
  create: [ProductCreateWithoutConditionInput!]
  createMany: ProductCreateManyConditionInputEnvelope
}

input ProductCreateNestedManyWithoutCountryInput {
  connect: [ProductWhereUniqueInput!]
  connectOrCreate: [ProductCreateOrConnectWithoutCountryInput!]
  create: [ProductCreateWithoutCountryInput!]
  createMany: ProductCreateManyCountryInputEnvelope
}

input ProductCreateNestedManyWithoutNeighbourhoodInput {
  connect: [ProductWhereUniqueInput!]
  connectOrCreate: [ProductCreateOrConnectWithoutNeighbourhoodInput!]
  create: [ProductCreateWithoutNeighbourhoodInput!]
  createMany: ProductCreateManyNeighbourhoodInputEnvelope
}

input ProductCreateNestedManyWithoutStateInput {
  connect: [ProductWhereUniqueInput!]
  connectOrCreate: [ProductCreateOrConnectWithoutStateInput!]
  create: [ProductCreateWithoutStateInput!]
  createMany: ProductCreateManyStateInputEnvelope
}

input ProductCreateNestedManyWithoutSub_categoryInput {
  connect: [ProductWhereUniqueInput!]
  connectOrCreate: [ProductCreateOrConnectWithoutSub_categoryInput!]
  create: [ProductCreateWithoutSub_categoryInput!]
  createMany: ProductCreateManySub_categoryInputEnvelope
}

input ProductCreateNestedManyWithoutUserInput {
  connect: [ProductWhereUniqueInput!]
  connectOrCreate: [ProductCreateOrConnectWithoutUserInput!]
  create: [ProductCreateWithoutUserInput!]
  createMany: ProductCreateManyUserInputEnvelope
}

input ProductCreateNestedOneWithoutCommentsInput {
  connect: ProductWhereUniqueInput
  connectOrCreate: ProductCreateOrConnectWithoutCommentsInput
  create: ProductCreateWithoutCommentsInput
}

input ProductCreateNestedOneWithoutFavoritesInput {
  connect: ProductWhereUniqueInput
  connectOrCreate: ProductCreateOrConnectWithoutFavoritesInput
  create: ProductCreateWithoutFavoritesInput
}

input ProductCreateNestedOneWithoutImg_urlsInput {
  connect: ProductWhereUniqueInput
  connectOrCreate: ProductCreateOrConnectWithoutImg_urlsInput
  create: ProductCreateWithoutImg_urlsInput
}

input ProductCreateNestedOneWithoutReportInput {
  connect: ProductWhereUniqueInput
  connectOrCreate: ProductCreateOrConnectWithoutReportInput
  create: ProductCreateWithoutReportInput
}

input ProductCreateNestedOneWithoutSharesInput {
  connect: ProductWhereUniqueInput
  connectOrCreate: ProductCreateOrConnectWithoutSharesInput
  create: ProductCreateWithoutSharesInput
}

input ProductCreateOrConnectWithoutBrandInput {
  create: ProductCreateWithoutBrandInput!
  where: ProductWhereUniqueInput!
}

input ProductCreateOrConnectWithoutCategoryInput {
  create: ProductCreateWithoutCategoryInput!
  where: ProductWhereUniqueInput!
}

input ProductCreateOrConnectWithoutCityInput {
  create: ProductCreateWithoutCityInput!
  where: ProductWhereUniqueInput!
}

input ProductCreateOrConnectWithoutCommentsInput {
  create: ProductCreateWithoutCommentsInput!
  where: ProductWhereUniqueInput!
}

input ProductCreateOrConnectWithoutConditionInput {
  create: ProductCreateWithoutConditionInput!
  where: ProductWhereUniqueInput!
}

input ProductCreateOrConnectWithoutCountryInput {
  create: ProductCreateWithoutCountryInput!
  where: ProductWhereUniqueInput!
}

input ProductCreateOrConnectWithoutFavoritesInput {
  create: ProductCreateWithoutFavoritesInput!
  where: ProductWhereUniqueInput!
}

input ProductCreateOrConnectWithoutImg_urlsInput {
  create: ProductCreateWithoutImg_urlsInput!
  where: ProductWhereUniqueInput!
}

input ProductCreateOrConnectWithoutNeighbourhoodInput {
  create: ProductCreateWithoutNeighbourhoodInput!
  where: ProductWhereUniqueInput!
}

input ProductCreateOrConnectWithoutReportInput {
  create: ProductCreateWithoutReportInput!
  where: ProductWhereUniqueInput!
}

input ProductCreateOrConnectWithoutSharesInput {
  create: ProductCreateWithoutSharesInput!
  where: ProductWhereUniqueInput!
}

input ProductCreateOrConnectWithoutStateInput {
  create: ProductCreateWithoutStateInput!
  where: ProductWhereUniqueInput!
}

input ProductCreateOrConnectWithoutSub_categoryInput {
  create: ProductCreateWithoutSub_categoryInput!
  where: ProductWhereUniqueInput!
}

input ProductCreateOrConnectWithoutUserInput {
  create: ProductCreateWithoutUserInput!
  where: ProductWhereUniqueInput!
}

input ProductCreateWithoutBrandInput {
  approvedAt: Timestamp
  category: CategoryCreateNestedOneWithoutProductInput!
  city: CityCreateNestedOneWithoutProductsInput
  comments: CommentCreateNestedManyWithoutProductInput
  condition: ConditionCreateNestedOneWithoutProductsInput!
  country: CountryCreateNestedOneWithoutProductsInput
  createdAt: Timestamp
  description: String!
  favorites: FavoriteCreateNestedManyWithoutProductInput
  id: String
  img_urls: ProductImgCreateNestedManyWithoutProductInput
  isActive: Boolean
  isPromoted: Boolean
  name: String!
  neighbourhood: NeighbourhoodCreateNestedOneWithoutProductsInput
  price: Float!
  report: ReportCreateNestedOneWithoutProductInput
  shares: ShareCreateNestedManyWithoutProductInput
  state: StateCreateNestedOneWithoutProductsInput
  sub_category: SubCategoryCreateNestedOneWithoutProductInput!
  updatedAt: Timestamp
  user: UserCreateNestedOneWithoutProductsInput!
  viewCount: Int
  zip_code: String
}

input ProductCreateWithoutCategoryInput {
  approvedAt: Timestamp
  brand: BrandCreateNestedOneWithoutProductsInput!
  city: CityCreateNestedOneWithoutProductsInput
  comments: CommentCreateNestedManyWithoutProductInput
  condition: ConditionCreateNestedOneWithoutProductsInput!
  country: CountryCreateNestedOneWithoutProductsInput
  createdAt: Timestamp
  description: String!
  favorites: FavoriteCreateNestedManyWithoutProductInput
  id: String
  img_urls: ProductImgCreateNestedManyWithoutProductInput
  isActive: Boolean
  isPromoted: Boolean
  name: String!
  neighbourhood: NeighbourhoodCreateNestedOneWithoutProductsInput
  price: Float!
  report: ReportCreateNestedOneWithoutProductInput
  shares: ShareCreateNestedManyWithoutProductInput
  state: StateCreateNestedOneWithoutProductsInput
  sub_category: SubCategoryCreateNestedOneWithoutProductInput!
  updatedAt: Timestamp
  user: UserCreateNestedOneWithoutProductsInput!
  viewCount: Int
  zip_code: String
}

input ProductCreateWithoutCityInput {
  approvedAt: Timestamp
  brand: BrandCreateNestedOneWithoutProductsInput!
  category: CategoryCreateNestedOneWithoutProductInput!
  comments: CommentCreateNestedManyWithoutProductInput
  condition: ConditionCreateNestedOneWithoutProductsInput!
  country: CountryCreateNestedOneWithoutProductsInput
  createdAt: Timestamp
  description: String!
  favorites: FavoriteCreateNestedManyWithoutProductInput
  id: String
  img_urls: ProductImgCreateNestedManyWithoutProductInput
  isActive: Boolean
  isPromoted: Boolean
  name: String!
  neighbourhood: NeighbourhoodCreateNestedOneWithoutProductsInput
  price: Float!
  report: ReportCreateNestedOneWithoutProductInput
  shares: ShareCreateNestedManyWithoutProductInput
  state: StateCreateNestedOneWithoutProductsInput
  sub_category: SubCategoryCreateNestedOneWithoutProductInput!
  updatedAt: Timestamp
  user: UserCreateNestedOneWithoutProductsInput!
  viewCount: Int
  zip_code: String
}

input ProductCreateWithoutCommentsInput {
  approvedAt: Timestamp
  brand: BrandCreateNestedOneWithoutProductsInput!
  category: CategoryCreateNestedOneWithoutProductInput!
  city: CityCreateNestedOneWithoutProductsInput
  condition: ConditionCreateNestedOneWithoutProductsInput!
  country: CountryCreateNestedOneWithoutProductsInput
  createdAt: Timestamp
  description: String!
  favorites: FavoriteCreateNestedManyWithoutProductInput
  id: String
  img_urls: ProductImgCreateNestedManyWithoutProductInput
  isActive: Boolean
  isPromoted: Boolean
  name: String!
  neighbourhood: NeighbourhoodCreateNestedOneWithoutProductsInput
  price: Float!
  report: ReportCreateNestedOneWithoutProductInput
  shares: ShareCreateNestedManyWithoutProductInput
  state: StateCreateNestedOneWithoutProductsInput
  sub_category: SubCategoryCreateNestedOneWithoutProductInput!
  updatedAt: Timestamp
  user: UserCreateNestedOneWithoutProductsInput!
  viewCount: Int
  zip_code: String
}

input ProductCreateWithoutConditionInput {
  approvedAt: Timestamp
  brand: BrandCreateNestedOneWithoutProductsInput!
  category: CategoryCreateNestedOneWithoutProductInput!
  city: CityCreateNestedOneWithoutProductsInput
  comments: CommentCreateNestedManyWithoutProductInput
  country: CountryCreateNestedOneWithoutProductsInput
  createdAt: Timestamp
  description: String!
  favorites: FavoriteCreateNestedManyWithoutProductInput
  id: String
  img_urls: ProductImgCreateNestedManyWithoutProductInput
  isActive: Boolean
  isPromoted: Boolean
  name: String!
  neighbourhood: NeighbourhoodCreateNestedOneWithoutProductsInput
  price: Float!
  report: ReportCreateNestedOneWithoutProductInput
  shares: ShareCreateNestedManyWithoutProductInput
  state: StateCreateNestedOneWithoutProductsInput
  sub_category: SubCategoryCreateNestedOneWithoutProductInput!
  updatedAt: Timestamp
  user: UserCreateNestedOneWithoutProductsInput!
  viewCount: Int
  zip_code: String
}

input ProductCreateWithoutCountryInput {
  approvedAt: Timestamp
  brand: BrandCreateNestedOneWithoutProductsInput!
  category: CategoryCreateNestedOneWithoutProductInput!
  city: CityCreateNestedOneWithoutProductsInput
  comments: CommentCreateNestedManyWithoutProductInput
  condition: ConditionCreateNestedOneWithoutProductsInput!
  createdAt: Timestamp
  description: String!
  favorites: FavoriteCreateNestedManyWithoutProductInput
  id: String
  img_urls: ProductImgCreateNestedManyWithoutProductInput
  isActive: Boolean
  isPromoted: Boolean
  name: String!
  neighbourhood: NeighbourhoodCreateNestedOneWithoutProductsInput
  price: Float!
  report: ReportCreateNestedOneWithoutProductInput
  shares: ShareCreateNestedManyWithoutProductInput
  state: StateCreateNestedOneWithoutProductsInput
  sub_category: SubCategoryCreateNestedOneWithoutProductInput!
  updatedAt: Timestamp
  user: UserCreateNestedOneWithoutProductsInput!
  viewCount: Int
  zip_code: String
}

input ProductCreateWithoutFavoritesInput {
  approvedAt: Timestamp
  brand: BrandCreateNestedOneWithoutProductsInput!
  category: CategoryCreateNestedOneWithoutProductInput!
  city: CityCreateNestedOneWithoutProductsInput
  comments: CommentCreateNestedManyWithoutProductInput
  condition: ConditionCreateNestedOneWithoutProductsInput!
  country: CountryCreateNestedOneWithoutProductsInput
  createdAt: Timestamp
  description: String!
  id: String
  img_urls: ProductImgCreateNestedManyWithoutProductInput
  isActive: Boolean
  isPromoted: Boolean
  name: String!
  neighbourhood: NeighbourhoodCreateNestedOneWithoutProductsInput
  price: Float!
  report: ReportCreateNestedOneWithoutProductInput
  shares: ShareCreateNestedManyWithoutProductInput
  state: StateCreateNestedOneWithoutProductsInput
  sub_category: SubCategoryCreateNestedOneWithoutProductInput!
  updatedAt: Timestamp
  user: UserCreateNestedOneWithoutProductsInput!
  viewCount: Int
  zip_code: String
}

input ProductCreateWithoutImg_urlsInput {
  approvedAt: Timestamp
  brand: BrandCreateNestedOneWithoutProductsInput!
  category: CategoryCreateNestedOneWithoutProductInput!
  city: CityCreateNestedOneWithoutProductsInput
  comments: CommentCreateNestedManyWithoutProductInput
  condition: ConditionCreateNestedOneWithoutProductsInput!
  country: CountryCreateNestedOneWithoutProductsInput
  createdAt: Timestamp
  description: String!
  favorites: FavoriteCreateNestedManyWithoutProductInput
  id: String
  isActive: Boolean
  isPromoted: Boolean
  name: String!
  neighbourhood: NeighbourhoodCreateNestedOneWithoutProductsInput
  price: Float!
  report: ReportCreateNestedOneWithoutProductInput
  shares: ShareCreateNestedManyWithoutProductInput
  state: StateCreateNestedOneWithoutProductsInput
  sub_category: SubCategoryCreateNestedOneWithoutProductInput!
  updatedAt: Timestamp
  user: UserCreateNestedOneWithoutProductsInput!
  viewCount: Int
  zip_code: String
}

input ProductCreateWithoutNeighbourhoodInput {
  approvedAt: Timestamp
  brand: BrandCreateNestedOneWithoutProductsInput!
  category: CategoryCreateNestedOneWithoutProductInput!
  city: CityCreateNestedOneWithoutProductsInput
  comments: CommentCreateNestedManyWithoutProductInput
  condition: ConditionCreateNestedOneWithoutProductsInput!
  country: CountryCreateNestedOneWithoutProductsInput
  createdAt: Timestamp
  description: String!
  favorites: FavoriteCreateNestedManyWithoutProductInput
  id: String
  img_urls: ProductImgCreateNestedManyWithoutProductInput
  isActive: Boolean
  isPromoted: Boolean
  name: String!
  price: Float!
  report: ReportCreateNestedOneWithoutProductInput
  shares: ShareCreateNestedManyWithoutProductInput
  state: StateCreateNestedOneWithoutProductsInput
  sub_category: SubCategoryCreateNestedOneWithoutProductInput!
  updatedAt: Timestamp
  user: UserCreateNestedOneWithoutProductsInput!
  viewCount: Int
  zip_code: String
}

input ProductCreateWithoutReportInput {
  approvedAt: Timestamp
  brand: BrandCreateNestedOneWithoutProductsInput!
  category: CategoryCreateNestedOneWithoutProductInput!
  city: CityCreateNestedOneWithoutProductsInput
  comments: CommentCreateNestedManyWithoutProductInput
  condition: ConditionCreateNestedOneWithoutProductsInput!
  country: CountryCreateNestedOneWithoutProductsInput
  createdAt: Timestamp
  description: String!
  favorites: FavoriteCreateNestedManyWithoutProductInput
  id: String
  img_urls: ProductImgCreateNestedManyWithoutProductInput
  isActive: Boolean
  isPromoted: Boolean
  name: String!
  neighbourhood: NeighbourhoodCreateNestedOneWithoutProductsInput
  price: Float!
  shares: ShareCreateNestedManyWithoutProductInput
  state: StateCreateNestedOneWithoutProductsInput
  sub_category: SubCategoryCreateNestedOneWithoutProductInput!
  updatedAt: Timestamp
  user: UserCreateNestedOneWithoutProductsInput!
  viewCount: Int
  zip_code: String
}

input ProductCreateWithoutSharesInput {
  approvedAt: Timestamp
  brand: BrandCreateNestedOneWithoutProductsInput!
  category: CategoryCreateNestedOneWithoutProductInput!
  city: CityCreateNestedOneWithoutProductsInput
  comments: CommentCreateNestedManyWithoutProductInput
  condition: ConditionCreateNestedOneWithoutProductsInput!
  country: CountryCreateNestedOneWithoutProductsInput
  createdAt: Timestamp
  description: String!
  favorites: FavoriteCreateNestedManyWithoutProductInput
  id: String
  img_urls: ProductImgCreateNestedManyWithoutProductInput
  isActive: Boolean
  isPromoted: Boolean
  name: String!
  neighbourhood: NeighbourhoodCreateNestedOneWithoutProductsInput
  price: Float!
  report: ReportCreateNestedOneWithoutProductInput
  state: StateCreateNestedOneWithoutProductsInput
  sub_category: SubCategoryCreateNestedOneWithoutProductInput!
  updatedAt: Timestamp
  user: UserCreateNestedOneWithoutProductsInput!
  viewCount: Int
  zip_code: String
}

input ProductCreateWithoutStateInput {
  approvedAt: Timestamp
  brand: BrandCreateNestedOneWithoutProductsInput!
  category: CategoryCreateNestedOneWithoutProductInput!
  city: CityCreateNestedOneWithoutProductsInput
  comments: CommentCreateNestedManyWithoutProductInput
  condition: ConditionCreateNestedOneWithoutProductsInput!
  country: CountryCreateNestedOneWithoutProductsInput
  createdAt: Timestamp
  description: String!
  favorites: FavoriteCreateNestedManyWithoutProductInput
  id: String
  img_urls: ProductImgCreateNestedManyWithoutProductInput
  isActive: Boolean
  isPromoted: Boolean
  name: String!
  neighbourhood: NeighbourhoodCreateNestedOneWithoutProductsInput
  price: Float!
  report: ReportCreateNestedOneWithoutProductInput
  shares: ShareCreateNestedManyWithoutProductInput
  sub_category: SubCategoryCreateNestedOneWithoutProductInput!
  updatedAt: Timestamp
  user: UserCreateNestedOneWithoutProductsInput!
  viewCount: Int
  zip_code: String
}

input ProductCreateWithoutSub_categoryInput {
  approvedAt: Timestamp
  brand: BrandCreateNestedOneWithoutProductsInput!
  category: CategoryCreateNestedOneWithoutProductInput!
  city: CityCreateNestedOneWithoutProductsInput
  comments: CommentCreateNestedManyWithoutProductInput
  condition: ConditionCreateNestedOneWithoutProductsInput!
  country: CountryCreateNestedOneWithoutProductsInput
  createdAt: Timestamp
  description: String!
  favorites: FavoriteCreateNestedManyWithoutProductInput
  id: String
  img_urls: ProductImgCreateNestedManyWithoutProductInput
  isActive: Boolean
  isPromoted: Boolean
  name: String!
  neighbourhood: NeighbourhoodCreateNestedOneWithoutProductsInput
  price: Float!
  report: ReportCreateNestedOneWithoutProductInput
  shares: ShareCreateNestedManyWithoutProductInput
  state: StateCreateNestedOneWithoutProductsInput
  updatedAt: Timestamp
  user: UserCreateNestedOneWithoutProductsInput!
  viewCount: Int
  zip_code: String
}

input ProductCreateWithoutUserInput {
  approvedAt: Timestamp
  brand: BrandCreateNestedOneWithoutProductsInput!
  category: CategoryCreateNestedOneWithoutProductInput!
  city: CityCreateNestedOneWithoutProductsInput
  comments: CommentCreateNestedManyWithoutProductInput
  condition: ConditionCreateNestedOneWithoutProductsInput!
  country: CountryCreateNestedOneWithoutProductsInput
  createdAt: Timestamp
  description: String!
  favorites: FavoriteCreateNestedManyWithoutProductInput
  id: String
  img_urls: ProductImgCreateNestedManyWithoutProductInput
  isActive: Boolean
  isPromoted: Boolean
  name: String!
  neighbourhood: NeighbourhoodCreateNestedOneWithoutProductsInput
  price: Float!
  report: ReportCreateNestedOneWithoutProductInput
  shares: ShareCreateNestedManyWithoutProductInput
  state: StateCreateNestedOneWithoutProductsInput
  sub_category: SubCategoryCreateNestedOneWithoutProductInput!
  updatedAt: Timestamp
  viewCount: Int
  zip_code: String
}

type ProductGroupBy {
  _avg: ProductAvgAggregate
  _count: ProductCountAggregate
  _max: ProductMaxAggregate
  _min: ProductMinAggregate
  _sum: ProductSumAggregate
  approvedAt: Timestamp
  brandId: String!
  categoryId: String!
  cityId: String
  conditionId: String!
  countryId: String
  createdAt: Timestamp!
  description: String!
  id: String!
  isActive: Boolean!
  isPromoted: Boolean!
  name: String!
  neighbourhoodId: String
  price: Float!
  stateId: String
  sub_categoryId: String!
  updatedAt: Timestamp
  userId: String!
  viewCount: Int
  zip_code: String
}

type ProductImg {
  createdAt: Timestamp!
  id: ID!
  imgUrl: String!
  product: Product!
  productId: String!
}

type ProductImgCountAggregate {
  _all: Int!
  createdAt: Int!
  id: Int!
  imgUrl: Int!
  productId: Int!
}

input ProductImgCountAggregateInput {
  _all: Boolean
  createdAt: Boolean
  id: Boolean
  imgUrl: Boolean
  productId: Boolean
}

input ProductImgCountOrderByAggregateInput {
  createdAt: SortOrder
  id: SortOrder
  imgUrl: SortOrder
  productId: SortOrder
}

input ProductImgCreateInput {
  createdAt: Timestamp
  id: String
  imgUrl: String!
  product: ProductCreateNestedOneWithoutImg_urlsInput!
}

input ProductImgCreateManyInput {
  createdAt: Timestamp
  id: String
  imgUrl: String!
  productId: String!
}

input ProductImgCreateManyProductInput {
  createdAt: Timestamp
  id: String
  imgUrl: String!
}

input ProductImgCreateManyProductInputEnvelope {
  data: [ProductImgCreateManyProductInput!]!
  skipDuplicates: Boolean
}

input ProductImgCreateNestedManyWithoutProductInput {
  connect: [ProductImgWhereUniqueInput!]
  connectOrCreate: [ProductImgCreateOrConnectWithoutProductInput!]
  create: [ProductImgCreateWithoutProductInput!]
  createMany: ProductImgCreateManyProductInputEnvelope
}

input ProductImgCreateOrConnectWithoutProductInput {
  create: ProductImgCreateWithoutProductInput!
  where: ProductImgWhereUniqueInput!
}

input ProductImgCreateWithoutProductInput {
  createdAt: Timestamp
  id: String
  imgUrl: String!
}

type ProductImgGroupBy {
  _count: ProductImgCountAggregate
  _max: ProductImgMaxAggregate
  _min: ProductImgMinAggregate
  createdAt: Timestamp!
  id: String!
  imgUrl: String!
  productId: String!
}

input ProductImgListRelationFilter {
  every: ProductImgWhereInput
  none: ProductImgWhereInput
  some: ProductImgWhereInput
}

type ProductImgMaxAggregate {
  createdAt: Timestamp
  id: String
  imgUrl: String
  productId: String
}

input ProductImgMaxAggregateInput {
  createdAt: Boolean
  id: Boolean
  imgUrl: Boolean
  productId: Boolean
}

input ProductImgMaxOrderByAggregateInput {
  createdAt: SortOrder
  id: SortOrder
  imgUrl: SortOrder
  productId: SortOrder
}

type ProductImgMinAggregate {
  createdAt: Timestamp
  id: String
  imgUrl: String
  productId: String
}

input ProductImgMinAggregateInput {
  createdAt: Boolean
  id: Boolean
  imgUrl: Boolean
  productId: Boolean
}

input ProductImgMinOrderByAggregateInput {
  createdAt: SortOrder
  id: SortOrder
  imgUrl: SortOrder
  productId: SortOrder
}

input ProductImgOrderByRelationAggregateInput {
  _count: SortOrder
}

input ProductImgOrderByWithAggregationInput {
  _count: ProductImgCountOrderByAggregateInput
  _max: ProductImgMaxOrderByAggregateInput
  _min: ProductImgMinOrderByAggregateInput
  createdAt: SortOrder
  id: SortOrder
  imgUrl: SortOrder
  productId: SortOrder
}

input ProductImgOrderByWithRelationInput {
  createdAt: SortOrder
  id: SortOrder
  imgUrl: SortOrder
  product: ProductOrderByWithRelationInput
  productId: SortOrder
}

enum ProductImgScalarFieldEnum {
  createdAt
  id
  imgUrl
  productId
}

input ProductImgScalarWhereInput {
  AND: [ProductImgScalarWhereInput!]
  NOT: [ProductImgScalarWhereInput!]
  OR: [ProductImgScalarWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  imgUrl: StringFilter
  productId: StringFilter
}

input ProductImgScalarWhereWithAggregatesInput {
  AND: [ProductImgScalarWhereWithAggregatesInput!]
  NOT: [ProductImgScalarWhereWithAggregatesInput!]
  OR: [ProductImgScalarWhereWithAggregatesInput!]
  createdAt: DateTimeWithAggregatesFilter
  id: StringWithAggregatesFilter
  imgUrl: StringWithAggregatesFilter
  productId: StringWithAggregatesFilter
}

input ProductImgUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  imgUrl: StringFieldUpdateOperationsInput
  product: ProductUpdateOneRequiredWithoutImg_urlsNestedInput
}

input ProductImgUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  imgUrl: StringFieldUpdateOperationsInput
}

input ProductImgUpdateManyWithWhereWithoutProductInput {
  data: ProductImgUpdateManyMutationInput!
  where: ProductImgScalarWhereInput!
}

input ProductImgUpdateManyWithoutProductNestedInput {
  connect: [ProductImgWhereUniqueInput!]
  connectOrCreate: [ProductImgCreateOrConnectWithoutProductInput!]
  create: [ProductImgCreateWithoutProductInput!]
  createMany: ProductImgCreateManyProductInputEnvelope
  delete: [ProductImgWhereUniqueInput!]
  deleteMany: [ProductImgScalarWhereInput!]
  disconnect: [ProductImgWhereUniqueInput!]
  set: [ProductImgWhereUniqueInput!]
  update: [ProductImgUpdateWithWhereUniqueWithoutProductInput!]
  updateMany: [ProductImgUpdateManyWithWhereWithoutProductInput!]
  upsert: [ProductImgUpsertWithWhereUniqueWithoutProductInput!]
}

input ProductImgUpdateWithWhereUniqueWithoutProductInput {
  data: ProductImgUpdateWithoutProductInput!
  where: ProductImgWhereUniqueInput!
}

input ProductImgUpdateWithoutProductInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  imgUrl: StringFieldUpdateOperationsInput
}

input ProductImgUpsertWithWhereUniqueWithoutProductInput {
  create: ProductImgCreateWithoutProductInput!
  update: ProductImgUpdateWithoutProductInput!
  where: ProductImgWhereUniqueInput!
}

input ProductImgWhereInput {
  AND: [ProductImgWhereInput!]
  NOT: [ProductImgWhereInput!]
  OR: [ProductImgWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  imgUrl: StringFilter
  product: ProductRelationFilter
  productId: StringFilter
}

input ProductImgWhereUniqueInput {
  AND: [ProductImgWhereInput!]
  NOT: [ProductImgWhereInput!]
  OR: [ProductImgWhereInput!]
  createdAt: DateTimeFilter
  id: String
  imgUrl: StringFilter
  product: ProductRelationFilter
  productId: StringFilter
}

input ProductListRelationFilter {
  every: ProductWhereInput
  none: ProductWhereInput
  some: ProductWhereInput
}

type ProductMaxAggregate {
  approvedAt: Timestamp
  brandId: String
  categoryId: String
  cityId: String
  conditionId: String
  countryId: String
  createdAt: Timestamp
  description: String
  id: String
  isActive: Boolean
  isPromoted: Boolean
  name: String
  neighbourhoodId: String
  price: Float
  stateId: String
  sub_categoryId: String
  updatedAt: Timestamp
  userId: String
  viewCount: Int
  zip_code: String
}

input ProductMaxAggregateInput {
  approvedAt: Boolean
  brandId: Boolean
  categoryId: Boolean
  cityId: Boolean
  conditionId: Boolean
  countryId: Boolean
  createdAt: Boolean
  description: Boolean
  id: Boolean
  isActive: Boolean
  isPromoted: Boolean
  name: Boolean
  neighbourhoodId: Boolean
  price: Boolean
  stateId: Boolean
  sub_categoryId: Boolean
  updatedAt: Boolean
  userId: Boolean
  viewCount: Boolean
  zip_code: Boolean
}

input ProductMaxOrderByAggregateInput {
  approvedAt: SortOrder
  brandId: SortOrder
  categoryId: SortOrder
  cityId: SortOrder
  conditionId: SortOrder
  countryId: SortOrder
  createdAt: SortOrder
  description: SortOrder
  id: SortOrder
  isActive: SortOrder
  isPromoted: SortOrder
  name: SortOrder
  neighbourhoodId: SortOrder
  price: SortOrder
  stateId: SortOrder
  sub_categoryId: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
  viewCount: SortOrder
  zip_code: SortOrder
}

type ProductMinAggregate {
  approvedAt: Timestamp
  brandId: String
  categoryId: String
  cityId: String
  conditionId: String
  countryId: String
  createdAt: Timestamp
  description: String
  id: String
  isActive: Boolean
  isPromoted: Boolean
  name: String
  neighbourhoodId: String
  price: Float
  stateId: String
  sub_categoryId: String
  updatedAt: Timestamp
  userId: String
  viewCount: Int
  zip_code: String
}

input ProductMinAggregateInput {
  approvedAt: Boolean
  brandId: Boolean
  categoryId: Boolean
  cityId: Boolean
  conditionId: Boolean
  countryId: Boolean
  createdAt: Boolean
  description: Boolean
  id: Boolean
  isActive: Boolean
  isPromoted: Boolean
  name: Boolean
  neighbourhoodId: Boolean
  price: Boolean
  stateId: Boolean
  sub_categoryId: Boolean
  updatedAt: Boolean
  userId: Boolean
  viewCount: Boolean
  zip_code: Boolean
}

input ProductMinOrderByAggregateInput {
  approvedAt: SortOrder
  brandId: SortOrder
  categoryId: SortOrder
  cityId: SortOrder
  conditionId: SortOrder
  countryId: SortOrder
  createdAt: SortOrder
  description: SortOrder
  id: SortOrder
  isActive: SortOrder
  isPromoted: SortOrder
  name: SortOrder
  neighbourhoodId: SortOrder
  price: SortOrder
  stateId: SortOrder
  sub_categoryId: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
  viewCount: SortOrder
  zip_code: SortOrder
}

input ProductOrderByRelationAggregateInput {
  _count: SortOrder
}

input ProductOrderByWithAggregationInput {
  _avg: ProductAvgOrderByAggregateInput
  _count: ProductCountOrderByAggregateInput
  _max: ProductMaxOrderByAggregateInput
  _min: ProductMinOrderByAggregateInput
  _sum: ProductSumOrderByAggregateInput
  approvedAt: SortOrderInput
  brandId: SortOrder
  categoryId: SortOrder
  cityId: SortOrderInput
  conditionId: SortOrder
  countryId: SortOrderInput
  createdAt: SortOrder
  description: SortOrder
  id: SortOrder
  isActive: SortOrder
  isPromoted: SortOrder
  name: SortOrder
  neighbourhoodId: SortOrderInput
  price: SortOrder
  stateId: SortOrderInput
  sub_categoryId: SortOrder
  updatedAt: SortOrderInput
  userId: SortOrder
  viewCount: SortOrderInput
  zip_code: SortOrderInput
}

input ProductOrderByWithRelationInput {
  approvedAt: SortOrderInput
  brand: BrandOrderByWithRelationInput
  brandId: SortOrder
  category: CategoryOrderByWithRelationInput
  categoryId: SortOrder
  city: CityOrderByWithRelationInput
  cityId: SortOrderInput
  comments: CommentOrderByRelationAggregateInput
  condition: ConditionOrderByWithRelationInput
  conditionId: SortOrder
  country: CountryOrderByWithRelationInput
  countryId: SortOrderInput
  createdAt: SortOrder
  description: SortOrder
  favorites: FavoriteOrderByRelationAggregateInput
  id: SortOrder
  img_urls: ProductImgOrderByRelationAggregateInput
  isActive: SortOrder
  isPromoted: SortOrder
  name: SortOrder
  neighbourhood: NeighbourhoodOrderByWithRelationInput
  neighbourhoodId: SortOrderInput
  price: SortOrder
  report: ReportOrderByWithRelationInput
  shares: ShareOrderByRelationAggregateInput
  state: StateOrderByWithRelationInput
  stateId: SortOrderInput
  sub_category: SubCategoryOrderByWithRelationInput
  sub_categoryId: SortOrder
  updatedAt: SortOrderInput
  user: UserOrderByWithRelationInput
  userId: SortOrder
  viewCount: SortOrderInput
  zip_code: SortOrderInput
}

input ProductRelationFilter {
  is: ProductWhereInput
  isNot: ProductWhereInput
}

enum ProductScalarFieldEnum {
  approvedAt
  brandId
  categoryId
  cityId
  conditionId
  countryId
  createdAt
  description
  id
  isActive
  isPromoted
  name
  neighbourhoodId
  price
  stateId
  sub_categoryId
  updatedAt
  userId
  viewCount
  zip_code
}

input ProductScalarWhereInput {
  AND: [ProductScalarWhereInput!]
  NOT: [ProductScalarWhereInput!]
  OR: [ProductScalarWhereInput!]
  approvedAt: DateTimeNullableFilter
  brandId: StringFilter
  categoryId: StringFilter
  cityId: StringNullableFilter
  conditionId: StringFilter
  countryId: StringNullableFilter
  createdAt: DateTimeFilter
  description: StringFilter
  id: StringFilter
  isActive: BoolFilter
  isPromoted: BoolFilter
  name: StringFilter
  neighbourhoodId: StringNullableFilter
  price: FloatFilter
  stateId: StringNullableFilter
  sub_categoryId: StringFilter
  updatedAt: DateTimeNullableFilter
  userId: StringFilter
  viewCount: IntNullableFilter
  zip_code: StringNullableFilter
}

input ProductScalarWhereWithAggregatesInput {
  AND: [ProductScalarWhereWithAggregatesInput!]
  NOT: [ProductScalarWhereWithAggregatesInput!]
  OR: [ProductScalarWhereWithAggregatesInput!]
  approvedAt: DateTimeNullableWithAggregatesFilter
  brandId: StringWithAggregatesFilter
  categoryId: StringWithAggregatesFilter
  cityId: StringNullableWithAggregatesFilter
  conditionId: StringWithAggregatesFilter
  countryId: StringNullableWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  description: StringWithAggregatesFilter
  id: StringWithAggregatesFilter
  isActive: BoolWithAggregatesFilter
  isPromoted: BoolWithAggregatesFilter
  name: StringWithAggregatesFilter
  neighbourhoodId: StringNullableWithAggregatesFilter
  price: FloatWithAggregatesFilter
  stateId: StringNullableWithAggregatesFilter
  sub_categoryId: StringWithAggregatesFilter
  updatedAt: DateTimeNullableWithAggregatesFilter
  userId: StringWithAggregatesFilter
  viewCount: IntNullableWithAggregatesFilter
  zip_code: StringNullableWithAggregatesFilter
}

type ProductSumAggregate {
  price: Float
  viewCount: Int
}

input ProductSumAggregateInput {
  price: Boolean
  viewCount: Boolean
}

input ProductSumOrderByAggregateInput {
  price: SortOrder
  viewCount: SortOrder
}

input ProductUpdateInput {
  approvedAt: NullableDateTimeFieldUpdateOperationsInput
  brand: BrandUpdateOneRequiredWithoutProductsNestedInput
  category: CategoryUpdateOneRequiredWithoutProductNestedInput
  city: CityUpdateOneWithoutProductsNestedInput
  comments: CommentUpdateManyWithoutProductNestedInput
  condition: ConditionUpdateOneRequiredWithoutProductsNestedInput
  country: CountryUpdateOneWithoutProductsNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  favorites: FavoriteUpdateManyWithoutProductNestedInput
  id: StringFieldUpdateOperationsInput
  img_urls: ProductImgUpdateManyWithoutProductNestedInput
  isActive: BoolFieldUpdateOperationsInput
  isPromoted: BoolFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  neighbourhood: NeighbourhoodUpdateOneWithoutProductsNestedInput
  price: FloatFieldUpdateOperationsInput
  report: ReportUpdateOneWithoutProductNestedInput
  shares: ShareUpdateManyWithoutProductNestedInput
  state: StateUpdateOneWithoutProductsNestedInput
  sub_category: SubCategoryUpdateOneRequiredWithoutProductNestedInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutProductsNestedInput
  viewCount: NullableIntFieldUpdateOperationsInput
  zip_code: NullableStringFieldUpdateOperationsInput
}

input ProductUpdateManyMutationInput {
  approvedAt: NullableDateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  isActive: BoolFieldUpdateOperationsInput
  isPromoted: BoolFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  price: FloatFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
  viewCount: NullableIntFieldUpdateOperationsInput
  zip_code: NullableStringFieldUpdateOperationsInput
}

input ProductUpdateManyWithWhereWithoutBrandInput {
  data: ProductUpdateManyMutationInput!
  where: ProductScalarWhereInput!
}

input ProductUpdateManyWithWhereWithoutCategoryInput {
  data: ProductUpdateManyMutationInput!
  where: ProductScalarWhereInput!
}

input ProductUpdateManyWithWhereWithoutCityInput {
  data: ProductUpdateManyMutationInput!
  where: ProductScalarWhereInput!
}

input ProductUpdateManyWithWhereWithoutConditionInput {
  data: ProductUpdateManyMutationInput!
  where: ProductScalarWhereInput!
}

input ProductUpdateManyWithWhereWithoutCountryInput {
  data: ProductUpdateManyMutationInput!
  where: ProductScalarWhereInput!
}

input ProductUpdateManyWithWhereWithoutNeighbourhoodInput {
  data: ProductUpdateManyMutationInput!
  where: ProductScalarWhereInput!
}

input ProductUpdateManyWithWhereWithoutStateInput {
  data: ProductUpdateManyMutationInput!
  where: ProductScalarWhereInput!
}

input ProductUpdateManyWithWhereWithoutSub_categoryInput {
  data: ProductUpdateManyMutationInput!
  where: ProductScalarWhereInput!
}

input ProductUpdateManyWithWhereWithoutUserInput {
  data: ProductUpdateManyMutationInput!
  where: ProductScalarWhereInput!
}

input ProductUpdateManyWithoutBrandNestedInput {
  connect: [ProductWhereUniqueInput!]
  connectOrCreate: [ProductCreateOrConnectWithoutBrandInput!]
  create: [ProductCreateWithoutBrandInput!]
  createMany: ProductCreateManyBrandInputEnvelope
  delete: [ProductWhereUniqueInput!]
  deleteMany: [ProductScalarWhereInput!]
  disconnect: [ProductWhereUniqueInput!]
  set: [ProductWhereUniqueInput!]
  update: [ProductUpdateWithWhereUniqueWithoutBrandInput!]
  updateMany: [ProductUpdateManyWithWhereWithoutBrandInput!]
  upsert: [ProductUpsertWithWhereUniqueWithoutBrandInput!]
}

input ProductUpdateManyWithoutCategoryNestedInput {
  connect: [ProductWhereUniqueInput!]
  connectOrCreate: [ProductCreateOrConnectWithoutCategoryInput!]
  create: [ProductCreateWithoutCategoryInput!]
  createMany: ProductCreateManyCategoryInputEnvelope
  delete: [ProductWhereUniqueInput!]
  deleteMany: [ProductScalarWhereInput!]
  disconnect: [ProductWhereUniqueInput!]
  set: [ProductWhereUniqueInput!]
  update: [ProductUpdateWithWhereUniqueWithoutCategoryInput!]
  updateMany: [ProductUpdateManyWithWhereWithoutCategoryInput!]
  upsert: [ProductUpsertWithWhereUniqueWithoutCategoryInput!]
}

input ProductUpdateManyWithoutCityNestedInput {
  connect: [ProductWhereUniqueInput!]
  connectOrCreate: [ProductCreateOrConnectWithoutCityInput!]
  create: [ProductCreateWithoutCityInput!]
  createMany: ProductCreateManyCityInputEnvelope
  delete: [ProductWhereUniqueInput!]
  deleteMany: [ProductScalarWhereInput!]
  disconnect: [ProductWhereUniqueInput!]
  set: [ProductWhereUniqueInput!]
  update: [ProductUpdateWithWhereUniqueWithoutCityInput!]
  updateMany: [ProductUpdateManyWithWhereWithoutCityInput!]
  upsert: [ProductUpsertWithWhereUniqueWithoutCityInput!]
}

input ProductUpdateManyWithoutConditionNestedInput {
  connect: [ProductWhereUniqueInput!]
  connectOrCreate: [ProductCreateOrConnectWithoutConditionInput!]
  create: [ProductCreateWithoutConditionInput!]
  createMany: ProductCreateManyConditionInputEnvelope
  delete: [ProductWhereUniqueInput!]
  deleteMany: [ProductScalarWhereInput!]
  disconnect: [ProductWhereUniqueInput!]
  set: [ProductWhereUniqueInput!]
  update: [ProductUpdateWithWhereUniqueWithoutConditionInput!]
  updateMany: [ProductUpdateManyWithWhereWithoutConditionInput!]
  upsert: [ProductUpsertWithWhereUniqueWithoutConditionInput!]
}

input ProductUpdateManyWithoutCountryNestedInput {
  connect: [ProductWhereUniqueInput!]
  connectOrCreate: [ProductCreateOrConnectWithoutCountryInput!]
  create: [ProductCreateWithoutCountryInput!]
  createMany: ProductCreateManyCountryInputEnvelope
  delete: [ProductWhereUniqueInput!]
  deleteMany: [ProductScalarWhereInput!]
  disconnect: [ProductWhereUniqueInput!]
  set: [ProductWhereUniqueInput!]
  update: [ProductUpdateWithWhereUniqueWithoutCountryInput!]
  updateMany: [ProductUpdateManyWithWhereWithoutCountryInput!]
  upsert: [ProductUpsertWithWhereUniqueWithoutCountryInput!]
}

input ProductUpdateManyWithoutNeighbourhoodNestedInput {
  connect: [ProductWhereUniqueInput!]
  connectOrCreate: [ProductCreateOrConnectWithoutNeighbourhoodInput!]
  create: [ProductCreateWithoutNeighbourhoodInput!]
  createMany: ProductCreateManyNeighbourhoodInputEnvelope
  delete: [ProductWhereUniqueInput!]
  deleteMany: [ProductScalarWhereInput!]
  disconnect: [ProductWhereUniqueInput!]
  set: [ProductWhereUniqueInput!]
  update: [ProductUpdateWithWhereUniqueWithoutNeighbourhoodInput!]
  updateMany: [ProductUpdateManyWithWhereWithoutNeighbourhoodInput!]
  upsert: [ProductUpsertWithWhereUniqueWithoutNeighbourhoodInput!]
}

input ProductUpdateManyWithoutStateNestedInput {
  connect: [ProductWhereUniqueInput!]
  connectOrCreate: [ProductCreateOrConnectWithoutStateInput!]
  create: [ProductCreateWithoutStateInput!]
  createMany: ProductCreateManyStateInputEnvelope
  delete: [ProductWhereUniqueInput!]
  deleteMany: [ProductScalarWhereInput!]
  disconnect: [ProductWhereUniqueInput!]
  set: [ProductWhereUniqueInput!]
  update: [ProductUpdateWithWhereUniqueWithoutStateInput!]
  updateMany: [ProductUpdateManyWithWhereWithoutStateInput!]
  upsert: [ProductUpsertWithWhereUniqueWithoutStateInput!]
}

input ProductUpdateManyWithoutSub_categoryNestedInput {
  connect: [ProductWhereUniqueInput!]
  connectOrCreate: [ProductCreateOrConnectWithoutSub_categoryInput!]
  create: [ProductCreateWithoutSub_categoryInput!]
  createMany: ProductCreateManySub_categoryInputEnvelope
  delete: [ProductWhereUniqueInput!]
  deleteMany: [ProductScalarWhereInput!]
  disconnect: [ProductWhereUniqueInput!]
  set: [ProductWhereUniqueInput!]
  update: [ProductUpdateWithWhereUniqueWithoutSub_categoryInput!]
  updateMany: [ProductUpdateManyWithWhereWithoutSub_categoryInput!]
  upsert: [ProductUpsertWithWhereUniqueWithoutSub_categoryInput!]
}

input ProductUpdateManyWithoutUserNestedInput {
  connect: [ProductWhereUniqueInput!]
  connectOrCreate: [ProductCreateOrConnectWithoutUserInput!]
  create: [ProductCreateWithoutUserInput!]
  createMany: ProductCreateManyUserInputEnvelope
  delete: [ProductWhereUniqueInput!]
  deleteMany: [ProductScalarWhereInput!]
  disconnect: [ProductWhereUniqueInput!]
  set: [ProductWhereUniqueInput!]
  update: [ProductUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [ProductUpdateManyWithWhereWithoutUserInput!]
  upsert: [ProductUpsertWithWhereUniqueWithoutUserInput!]
}

input ProductUpdateOneRequiredWithoutCommentsNestedInput {
  connect: ProductWhereUniqueInput
  connectOrCreate: ProductCreateOrConnectWithoutCommentsInput
  create: ProductCreateWithoutCommentsInput
  update: ProductUpdateToOneWithWhereWithoutCommentsInput
  upsert: ProductUpsertWithoutCommentsInput
}

input ProductUpdateOneRequiredWithoutFavoritesNestedInput {
  connect: ProductWhereUniqueInput
  connectOrCreate: ProductCreateOrConnectWithoutFavoritesInput
  create: ProductCreateWithoutFavoritesInput
  update: ProductUpdateToOneWithWhereWithoutFavoritesInput
  upsert: ProductUpsertWithoutFavoritesInput
}

input ProductUpdateOneRequiredWithoutImg_urlsNestedInput {
  connect: ProductWhereUniqueInput
  connectOrCreate: ProductCreateOrConnectWithoutImg_urlsInput
  create: ProductCreateWithoutImg_urlsInput
  update: ProductUpdateToOneWithWhereWithoutImg_urlsInput
  upsert: ProductUpsertWithoutImg_urlsInput
}

input ProductUpdateOneRequiredWithoutReportNestedInput {
  connect: ProductWhereUniqueInput
  connectOrCreate: ProductCreateOrConnectWithoutReportInput
  create: ProductCreateWithoutReportInput
  update: ProductUpdateToOneWithWhereWithoutReportInput
  upsert: ProductUpsertWithoutReportInput
}

input ProductUpdateOneRequiredWithoutSharesNestedInput {
  connect: ProductWhereUniqueInput
  connectOrCreate: ProductCreateOrConnectWithoutSharesInput
  create: ProductCreateWithoutSharesInput
  update: ProductUpdateToOneWithWhereWithoutSharesInput
  upsert: ProductUpsertWithoutSharesInput
}

input ProductUpdateToOneWithWhereWithoutCommentsInput {
  data: ProductUpdateWithoutCommentsInput!
  where: ProductWhereInput
}

input ProductUpdateToOneWithWhereWithoutFavoritesInput {
  data: ProductUpdateWithoutFavoritesInput!
  where: ProductWhereInput
}

input ProductUpdateToOneWithWhereWithoutImg_urlsInput {
  data: ProductUpdateWithoutImg_urlsInput!
  where: ProductWhereInput
}

input ProductUpdateToOneWithWhereWithoutReportInput {
  data: ProductUpdateWithoutReportInput!
  where: ProductWhereInput
}

input ProductUpdateToOneWithWhereWithoutSharesInput {
  data: ProductUpdateWithoutSharesInput!
  where: ProductWhereInput
}

input ProductUpdateWithWhereUniqueWithoutBrandInput {
  data: ProductUpdateWithoutBrandInput!
  where: ProductWhereUniqueInput!
}

input ProductUpdateWithWhereUniqueWithoutCategoryInput {
  data: ProductUpdateWithoutCategoryInput!
  where: ProductWhereUniqueInput!
}

input ProductUpdateWithWhereUniqueWithoutCityInput {
  data: ProductUpdateWithoutCityInput!
  where: ProductWhereUniqueInput!
}

input ProductUpdateWithWhereUniqueWithoutConditionInput {
  data: ProductUpdateWithoutConditionInput!
  where: ProductWhereUniqueInput!
}

input ProductUpdateWithWhereUniqueWithoutCountryInput {
  data: ProductUpdateWithoutCountryInput!
  where: ProductWhereUniqueInput!
}

input ProductUpdateWithWhereUniqueWithoutNeighbourhoodInput {
  data: ProductUpdateWithoutNeighbourhoodInput!
  where: ProductWhereUniqueInput!
}

input ProductUpdateWithWhereUniqueWithoutStateInput {
  data: ProductUpdateWithoutStateInput!
  where: ProductWhereUniqueInput!
}

input ProductUpdateWithWhereUniqueWithoutSub_categoryInput {
  data: ProductUpdateWithoutSub_categoryInput!
  where: ProductWhereUniqueInput!
}

input ProductUpdateWithWhereUniqueWithoutUserInput {
  data: ProductUpdateWithoutUserInput!
  where: ProductWhereUniqueInput!
}

input ProductUpdateWithoutBrandInput {
  approvedAt: NullableDateTimeFieldUpdateOperationsInput
  category: CategoryUpdateOneRequiredWithoutProductNestedInput
  city: CityUpdateOneWithoutProductsNestedInput
  comments: CommentUpdateManyWithoutProductNestedInput
  condition: ConditionUpdateOneRequiredWithoutProductsNestedInput
  country: CountryUpdateOneWithoutProductsNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  favorites: FavoriteUpdateManyWithoutProductNestedInput
  id: StringFieldUpdateOperationsInput
  img_urls: ProductImgUpdateManyWithoutProductNestedInput
  isActive: BoolFieldUpdateOperationsInput
  isPromoted: BoolFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  neighbourhood: NeighbourhoodUpdateOneWithoutProductsNestedInput
  price: FloatFieldUpdateOperationsInput
  report: ReportUpdateOneWithoutProductNestedInput
  shares: ShareUpdateManyWithoutProductNestedInput
  state: StateUpdateOneWithoutProductsNestedInput
  sub_category: SubCategoryUpdateOneRequiredWithoutProductNestedInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutProductsNestedInput
  viewCount: NullableIntFieldUpdateOperationsInput
  zip_code: NullableStringFieldUpdateOperationsInput
}

input ProductUpdateWithoutCategoryInput {
  approvedAt: NullableDateTimeFieldUpdateOperationsInput
  brand: BrandUpdateOneRequiredWithoutProductsNestedInput
  city: CityUpdateOneWithoutProductsNestedInput
  comments: CommentUpdateManyWithoutProductNestedInput
  condition: ConditionUpdateOneRequiredWithoutProductsNestedInput
  country: CountryUpdateOneWithoutProductsNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  favorites: FavoriteUpdateManyWithoutProductNestedInput
  id: StringFieldUpdateOperationsInput
  img_urls: ProductImgUpdateManyWithoutProductNestedInput
  isActive: BoolFieldUpdateOperationsInput
  isPromoted: BoolFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  neighbourhood: NeighbourhoodUpdateOneWithoutProductsNestedInput
  price: FloatFieldUpdateOperationsInput
  report: ReportUpdateOneWithoutProductNestedInput
  shares: ShareUpdateManyWithoutProductNestedInput
  state: StateUpdateOneWithoutProductsNestedInput
  sub_category: SubCategoryUpdateOneRequiredWithoutProductNestedInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutProductsNestedInput
  viewCount: NullableIntFieldUpdateOperationsInput
  zip_code: NullableStringFieldUpdateOperationsInput
}

input ProductUpdateWithoutCityInput {
  approvedAt: NullableDateTimeFieldUpdateOperationsInput
  brand: BrandUpdateOneRequiredWithoutProductsNestedInput
  category: CategoryUpdateOneRequiredWithoutProductNestedInput
  comments: CommentUpdateManyWithoutProductNestedInput
  condition: ConditionUpdateOneRequiredWithoutProductsNestedInput
  country: CountryUpdateOneWithoutProductsNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  favorites: FavoriteUpdateManyWithoutProductNestedInput
  id: StringFieldUpdateOperationsInput
  img_urls: ProductImgUpdateManyWithoutProductNestedInput
  isActive: BoolFieldUpdateOperationsInput
  isPromoted: BoolFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  neighbourhood: NeighbourhoodUpdateOneWithoutProductsNestedInput
  price: FloatFieldUpdateOperationsInput
  report: ReportUpdateOneWithoutProductNestedInput
  shares: ShareUpdateManyWithoutProductNestedInput
  state: StateUpdateOneWithoutProductsNestedInput
  sub_category: SubCategoryUpdateOneRequiredWithoutProductNestedInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutProductsNestedInput
  viewCount: NullableIntFieldUpdateOperationsInput
  zip_code: NullableStringFieldUpdateOperationsInput
}

input ProductUpdateWithoutCommentsInput {
  approvedAt: NullableDateTimeFieldUpdateOperationsInput
  brand: BrandUpdateOneRequiredWithoutProductsNestedInput
  category: CategoryUpdateOneRequiredWithoutProductNestedInput
  city: CityUpdateOneWithoutProductsNestedInput
  condition: ConditionUpdateOneRequiredWithoutProductsNestedInput
  country: CountryUpdateOneWithoutProductsNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  favorites: FavoriteUpdateManyWithoutProductNestedInput
  id: StringFieldUpdateOperationsInput
  img_urls: ProductImgUpdateManyWithoutProductNestedInput
  isActive: BoolFieldUpdateOperationsInput
  isPromoted: BoolFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  neighbourhood: NeighbourhoodUpdateOneWithoutProductsNestedInput
  price: FloatFieldUpdateOperationsInput
  report: ReportUpdateOneWithoutProductNestedInput
  shares: ShareUpdateManyWithoutProductNestedInput
  state: StateUpdateOneWithoutProductsNestedInput
  sub_category: SubCategoryUpdateOneRequiredWithoutProductNestedInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutProductsNestedInput
  viewCount: NullableIntFieldUpdateOperationsInput
  zip_code: NullableStringFieldUpdateOperationsInput
}

input ProductUpdateWithoutConditionInput {
  approvedAt: NullableDateTimeFieldUpdateOperationsInput
  brand: BrandUpdateOneRequiredWithoutProductsNestedInput
  category: CategoryUpdateOneRequiredWithoutProductNestedInput
  city: CityUpdateOneWithoutProductsNestedInput
  comments: CommentUpdateManyWithoutProductNestedInput
  country: CountryUpdateOneWithoutProductsNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  favorites: FavoriteUpdateManyWithoutProductNestedInput
  id: StringFieldUpdateOperationsInput
  img_urls: ProductImgUpdateManyWithoutProductNestedInput
  isActive: BoolFieldUpdateOperationsInput
  isPromoted: BoolFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  neighbourhood: NeighbourhoodUpdateOneWithoutProductsNestedInput
  price: FloatFieldUpdateOperationsInput
  report: ReportUpdateOneWithoutProductNestedInput
  shares: ShareUpdateManyWithoutProductNestedInput
  state: StateUpdateOneWithoutProductsNestedInput
  sub_category: SubCategoryUpdateOneRequiredWithoutProductNestedInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutProductsNestedInput
  viewCount: NullableIntFieldUpdateOperationsInput
  zip_code: NullableStringFieldUpdateOperationsInput
}

input ProductUpdateWithoutCountryInput {
  approvedAt: NullableDateTimeFieldUpdateOperationsInput
  brand: BrandUpdateOneRequiredWithoutProductsNestedInput
  category: CategoryUpdateOneRequiredWithoutProductNestedInput
  city: CityUpdateOneWithoutProductsNestedInput
  comments: CommentUpdateManyWithoutProductNestedInput
  condition: ConditionUpdateOneRequiredWithoutProductsNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  favorites: FavoriteUpdateManyWithoutProductNestedInput
  id: StringFieldUpdateOperationsInput
  img_urls: ProductImgUpdateManyWithoutProductNestedInput
  isActive: BoolFieldUpdateOperationsInput
  isPromoted: BoolFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  neighbourhood: NeighbourhoodUpdateOneWithoutProductsNestedInput
  price: FloatFieldUpdateOperationsInput
  report: ReportUpdateOneWithoutProductNestedInput
  shares: ShareUpdateManyWithoutProductNestedInput
  state: StateUpdateOneWithoutProductsNestedInput
  sub_category: SubCategoryUpdateOneRequiredWithoutProductNestedInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutProductsNestedInput
  viewCount: NullableIntFieldUpdateOperationsInput
  zip_code: NullableStringFieldUpdateOperationsInput
}

input ProductUpdateWithoutFavoritesInput {
  approvedAt: NullableDateTimeFieldUpdateOperationsInput
  brand: BrandUpdateOneRequiredWithoutProductsNestedInput
  category: CategoryUpdateOneRequiredWithoutProductNestedInput
  city: CityUpdateOneWithoutProductsNestedInput
  comments: CommentUpdateManyWithoutProductNestedInput
  condition: ConditionUpdateOneRequiredWithoutProductsNestedInput
  country: CountryUpdateOneWithoutProductsNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  img_urls: ProductImgUpdateManyWithoutProductNestedInput
  isActive: BoolFieldUpdateOperationsInput
  isPromoted: BoolFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  neighbourhood: NeighbourhoodUpdateOneWithoutProductsNestedInput
  price: FloatFieldUpdateOperationsInput
  report: ReportUpdateOneWithoutProductNestedInput
  shares: ShareUpdateManyWithoutProductNestedInput
  state: StateUpdateOneWithoutProductsNestedInput
  sub_category: SubCategoryUpdateOneRequiredWithoutProductNestedInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutProductsNestedInput
  viewCount: NullableIntFieldUpdateOperationsInput
  zip_code: NullableStringFieldUpdateOperationsInput
}

input ProductUpdateWithoutImg_urlsInput {
  approvedAt: NullableDateTimeFieldUpdateOperationsInput
  brand: BrandUpdateOneRequiredWithoutProductsNestedInput
  category: CategoryUpdateOneRequiredWithoutProductNestedInput
  city: CityUpdateOneWithoutProductsNestedInput
  comments: CommentUpdateManyWithoutProductNestedInput
  condition: ConditionUpdateOneRequiredWithoutProductsNestedInput
  country: CountryUpdateOneWithoutProductsNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  favorites: FavoriteUpdateManyWithoutProductNestedInput
  id: StringFieldUpdateOperationsInput
  isActive: BoolFieldUpdateOperationsInput
  isPromoted: BoolFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  neighbourhood: NeighbourhoodUpdateOneWithoutProductsNestedInput
  price: FloatFieldUpdateOperationsInput
  report: ReportUpdateOneWithoutProductNestedInput
  shares: ShareUpdateManyWithoutProductNestedInput
  state: StateUpdateOneWithoutProductsNestedInput
  sub_category: SubCategoryUpdateOneRequiredWithoutProductNestedInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutProductsNestedInput
  viewCount: NullableIntFieldUpdateOperationsInput
  zip_code: NullableStringFieldUpdateOperationsInput
}

input ProductUpdateWithoutNeighbourhoodInput {
  approvedAt: NullableDateTimeFieldUpdateOperationsInput
  brand: BrandUpdateOneRequiredWithoutProductsNestedInput
  category: CategoryUpdateOneRequiredWithoutProductNestedInput
  city: CityUpdateOneWithoutProductsNestedInput
  comments: CommentUpdateManyWithoutProductNestedInput
  condition: ConditionUpdateOneRequiredWithoutProductsNestedInput
  country: CountryUpdateOneWithoutProductsNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  favorites: FavoriteUpdateManyWithoutProductNestedInput
  id: StringFieldUpdateOperationsInput
  img_urls: ProductImgUpdateManyWithoutProductNestedInput
  isActive: BoolFieldUpdateOperationsInput
  isPromoted: BoolFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  price: FloatFieldUpdateOperationsInput
  report: ReportUpdateOneWithoutProductNestedInput
  shares: ShareUpdateManyWithoutProductNestedInput
  state: StateUpdateOneWithoutProductsNestedInput
  sub_category: SubCategoryUpdateOneRequiredWithoutProductNestedInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutProductsNestedInput
  viewCount: NullableIntFieldUpdateOperationsInput
  zip_code: NullableStringFieldUpdateOperationsInput
}

input ProductUpdateWithoutReportInput {
  approvedAt: NullableDateTimeFieldUpdateOperationsInput
  brand: BrandUpdateOneRequiredWithoutProductsNestedInput
  category: CategoryUpdateOneRequiredWithoutProductNestedInput
  city: CityUpdateOneWithoutProductsNestedInput
  comments: CommentUpdateManyWithoutProductNestedInput
  condition: ConditionUpdateOneRequiredWithoutProductsNestedInput
  country: CountryUpdateOneWithoutProductsNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  favorites: FavoriteUpdateManyWithoutProductNestedInput
  id: StringFieldUpdateOperationsInput
  img_urls: ProductImgUpdateManyWithoutProductNestedInput
  isActive: BoolFieldUpdateOperationsInput
  isPromoted: BoolFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  neighbourhood: NeighbourhoodUpdateOneWithoutProductsNestedInput
  price: FloatFieldUpdateOperationsInput
  shares: ShareUpdateManyWithoutProductNestedInput
  state: StateUpdateOneWithoutProductsNestedInput
  sub_category: SubCategoryUpdateOneRequiredWithoutProductNestedInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutProductsNestedInput
  viewCount: NullableIntFieldUpdateOperationsInput
  zip_code: NullableStringFieldUpdateOperationsInput
}

input ProductUpdateWithoutSharesInput {
  approvedAt: NullableDateTimeFieldUpdateOperationsInput
  brand: BrandUpdateOneRequiredWithoutProductsNestedInput
  category: CategoryUpdateOneRequiredWithoutProductNestedInput
  city: CityUpdateOneWithoutProductsNestedInput
  comments: CommentUpdateManyWithoutProductNestedInput
  condition: ConditionUpdateOneRequiredWithoutProductsNestedInput
  country: CountryUpdateOneWithoutProductsNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  favorites: FavoriteUpdateManyWithoutProductNestedInput
  id: StringFieldUpdateOperationsInput
  img_urls: ProductImgUpdateManyWithoutProductNestedInput
  isActive: BoolFieldUpdateOperationsInput
  isPromoted: BoolFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  neighbourhood: NeighbourhoodUpdateOneWithoutProductsNestedInput
  price: FloatFieldUpdateOperationsInput
  report: ReportUpdateOneWithoutProductNestedInput
  state: StateUpdateOneWithoutProductsNestedInput
  sub_category: SubCategoryUpdateOneRequiredWithoutProductNestedInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutProductsNestedInput
  viewCount: NullableIntFieldUpdateOperationsInput
  zip_code: NullableStringFieldUpdateOperationsInput
}

input ProductUpdateWithoutStateInput {
  approvedAt: NullableDateTimeFieldUpdateOperationsInput
  brand: BrandUpdateOneRequiredWithoutProductsNestedInput
  category: CategoryUpdateOneRequiredWithoutProductNestedInput
  city: CityUpdateOneWithoutProductsNestedInput
  comments: CommentUpdateManyWithoutProductNestedInput
  condition: ConditionUpdateOneRequiredWithoutProductsNestedInput
  country: CountryUpdateOneWithoutProductsNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  favorites: FavoriteUpdateManyWithoutProductNestedInput
  id: StringFieldUpdateOperationsInput
  img_urls: ProductImgUpdateManyWithoutProductNestedInput
  isActive: BoolFieldUpdateOperationsInput
  isPromoted: BoolFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  neighbourhood: NeighbourhoodUpdateOneWithoutProductsNestedInput
  price: FloatFieldUpdateOperationsInput
  report: ReportUpdateOneWithoutProductNestedInput
  shares: ShareUpdateManyWithoutProductNestedInput
  sub_category: SubCategoryUpdateOneRequiredWithoutProductNestedInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutProductsNestedInput
  viewCount: NullableIntFieldUpdateOperationsInput
  zip_code: NullableStringFieldUpdateOperationsInput
}

input ProductUpdateWithoutSub_categoryInput {
  approvedAt: NullableDateTimeFieldUpdateOperationsInput
  brand: BrandUpdateOneRequiredWithoutProductsNestedInput
  category: CategoryUpdateOneRequiredWithoutProductNestedInput
  city: CityUpdateOneWithoutProductsNestedInput
  comments: CommentUpdateManyWithoutProductNestedInput
  condition: ConditionUpdateOneRequiredWithoutProductsNestedInput
  country: CountryUpdateOneWithoutProductsNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  favorites: FavoriteUpdateManyWithoutProductNestedInput
  id: StringFieldUpdateOperationsInput
  img_urls: ProductImgUpdateManyWithoutProductNestedInput
  isActive: BoolFieldUpdateOperationsInput
  isPromoted: BoolFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  neighbourhood: NeighbourhoodUpdateOneWithoutProductsNestedInput
  price: FloatFieldUpdateOperationsInput
  report: ReportUpdateOneWithoutProductNestedInput
  shares: ShareUpdateManyWithoutProductNestedInput
  state: StateUpdateOneWithoutProductsNestedInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutProductsNestedInput
  viewCount: NullableIntFieldUpdateOperationsInput
  zip_code: NullableStringFieldUpdateOperationsInput
}

input ProductUpdateWithoutUserInput {
  approvedAt: NullableDateTimeFieldUpdateOperationsInput
  brand: BrandUpdateOneRequiredWithoutProductsNestedInput
  category: CategoryUpdateOneRequiredWithoutProductNestedInput
  city: CityUpdateOneWithoutProductsNestedInput
  comments: CommentUpdateManyWithoutProductNestedInput
  condition: ConditionUpdateOneRequiredWithoutProductsNestedInput
  country: CountryUpdateOneWithoutProductsNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  favorites: FavoriteUpdateManyWithoutProductNestedInput
  id: StringFieldUpdateOperationsInput
  img_urls: ProductImgUpdateManyWithoutProductNestedInput
  isActive: BoolFieldUpdateOperationsInput
  isPromoted: BoolFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  neighbourhood: NeighbourhoodUpdateOneWithoutProductsNestedInput
  price: FloatFieldUpdateOperationsInput
  report: ReportUpdateOneWithoutProductNestedInput
  shares: ShareUpdateManyWithoutProductNestedInput
  state: StateUpdateOneWithoutProductsNestedInput
  sub_category: SubCategoryUpdateOneRequiredWithoutProductNestedInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
  viewCount: NullableIntFieldUpdateOperationsInput
  zip_code: NullableStringFieldUpdateOperationsInput
}

input ProductUpsertWithWhereUniqueWithoutBrandInput {
  create: ProductCreateWithoutBrandInput!
  update: ProductUpdateWithoutBrandInput!
  where: ProductWhereUniqueInput!
}

input ProductUpsertWithWhereUniqueWithoutCategoryInput {
  create: ProductCreateWithoutCategoryInput!
  update: ProductUpdateWithoutCategoryInput!
  where: ProductWhereUniqueInput!
}

input ProductUpsertWithWhereUniqueWithoutCityInput {
  create: ProductCreateWithoutCityInput!
  update: ProductUpdateWithoutCityInput!
  where: ProductWhereUniqueInput!
}

input ProductUpsertWithWhereUniqueWithoutConditionInput {
  create: ProductCreateWithoutConditionInput!
  update: ProductUpdateWithoutConditionInput!
  where: ProductWhereUniqueInput!
}

input ProductUpsertWithWhereUniqueWithoutCountryInput {
  create: ProductCreateWithoutCountryInput!
  update: ProductUpdateWithoutCountryInput!
  where: ProductWhereUniqueInput!
}

input ProductUpsertWithWhereUniqueWithoutNeighbourhoodInput {
  create: ProductCreateWithoutNeighbourhoodInput!
  update: ProductUpdateWithoutNeighbourhoodInput!
  where: ProductWhereUniqueInput!
}

input ProductUpsertWithWhereUniqueWithoutStateInput {
  create: ProductCreateWithoutStateInput!
  update: ProductUpdateWithoutStateInput!
  where: ProductWhereUniqueInput!
}

input ProductUpsertWithWhereUniqueWithoutSub_categoryInput {
  create: ProductCreateWithoutSub_categoryInput!
  update: ProductUpdateWithoutSub_categoryInput!
  where: ProductWhereUniqueInput!
}

input ProductUpsertWithWhereUniqueWithoutUserInput {
  create: ProductCreateWithoutUserInput!
  update: ProductUpdateWithoutUserInput!
  where: ProductWhereUniqueInput!
}

input ProductUpsertWithoutCommentsInput {
  create: ProductCreateWithoutCommentsInput!
  update: ProductUpdateWithoutCommentsInput!
  where: ProductWhereInput
}

input ProductUpsertWithoutFavoritesInput {
  create: ProductCreateWithoutFavoritesInput!
  update: ProductUpdateWithoutFavoritesInput!
  where: ProductWhereInput
}

input ProductUpsertWithoutImg_urlsInput {
  create: ProductCreateWithoutImg_urlsInput!
  update: ProductUpdateWithoutImg_urlsInput!
  where: ProductWhereInput
}

input ProductUpsertWithoutReportInput {
  create: ProductCreateWithoutReportInput!
  update: ProductUpdateWithoutReportInput!
  where: ProductWhereInput
}

input ProductUpsertWithoutSharesInput {
  create: ProductCreateWithoutSharesInput!
  update: ProductUpdateWithoutSharesInput!
  where: ProductWhereInput
}

input ProductWhereInput {
  AND: [ProductWhereInput!]
  NOT: [ProductWhereInput!]
  OR: [ProductWhereInput!]
  approvedAt: DateTimeNullableFilter
  brand: BrandRelationFilter
  brandId: StringFilter
  category: CategoryRelationFilter
  categoryId: StringFilter
  city: CityNullableRelationFilter
  cityId: StringNullableFilter
  comments: CommentListRelationFilter
  condition: ConditionRelationFilter
  conditionId: StringFilter
  country: CountryNullableRelationFilter
  countryId: StringNullableFilter
  createdAt: DateTimeFilter
  description: StringFilter
  favorites: FavoriteListRelationFilter
  id: StringFilter
  img_urls: ProductImgListRelationFilter
  isActive: BoolFilter
  isPromoted: BoolFilter
  name: StringFilter
  neighbourhood: NeighbourhoodNullableRelationFilter
  neighbourhoodId: StringNullableFilter
  price: FloatFilter
  report: ReportNullableRelationFilter
  shares: ShareListRelationFilter
  state: StateNullableRelationFilter
  stateId: StringNullableFilter
  sub_category: SubCategoryRelationFilter
  sub_categoryId: StringFilter
  updatedAt: DateTimeNullableFilter
  user: UserRelationFilter
  userId: StringFilter
  viewCount: IntNullableFilter
  zip_code: StringNullableFilter
}

input ProductWhereUniqueInput {
  AND: [ProductWhereInput!]
  NOT: [ProductWhereInput!]
  OR: [ProductWhereInput!]
  approvedAt: DateTimeNullableFilter
  brand: BrandRelationFilter
  brandId: StringFilter
  category: CategoryRelationFilter
  categoryId: StringFilter
  city: CityNullableRelationFilter
  cityId: StringNullableFilter
  comments: CommentListRelationFilter
  condition: ConditionRelationFilter
  conditionId: StringFilter
  country: CountryNullableRelationFilter
  countryId: StringNullableFilter
  createdAt: DateTimeFilter
  description: StringFilter
  favorites: FavoriteListRelationFilter
  id: String
  img_urls: ProductImgListRelationFilter
  isActive: BoolFilter
  isPromoted: BoolFilter
  name: StringFilter
  neighbourhood: NeighbourhoodNullableRelationFilter
  neighbourhoodId: StringNullableFilter
  price: FloatFilter
  report: ReportNullableRelationFilter
  shares: ShareListRelationFilter
  state: StateNullableRelationFilter
  stateId: StringNullableFilter
  sub_category: SubCategoryRelationFilter
  sub_categoryId: StringFilter
  updatedAt: DateTimeNullableFilter
  user: UserRelationFilter
  userId: StringFilter
  viewCount: IntNullableFilter
  zip_code: StringNullableFilter
}

type Query {
  aggregateBanner(_avg: BannerAvgAggregateInput, _count: BannerCountAggregateInput, _max: BannerMaxAggregateInput, _min: BannerMinAggregateInput, _sum: BannerSumAggregateInput, cursor: BannerWhereUniqueInput, orderBy: [BannerOrderByWithRelationInput!], skip: Int, take: Int, where: BannerWhereInput): AggregateBanner!
  aggregateBrand(_count: BrandCountAggregateInput, _max: BrandMaxAggregateInput, _min: BrandMinAggregateInput, cursor: BrandWhereUniqueInput, orderBy: [BrandOrderByWithRelationInput!], skip: Int, take: Int, where: BrandWhereInput): AggregateBrand!
  aggregateCategory(_count: CategoryCountAggregateInput, _max: CategoryMaxAggregateInput, _min: CategoryMinAggregateInput, cursor: CategoryWhereUniqueInput, orderBy: [CategoryOrderByWithRelationInput!], skip: Int, take: Int, where: CategoryWhereInput): AggregateCategory!
  aggregateChat(_count: ChatCountAggregateInput, _max: ChatMaxAggregateInput, _min: ChatMinAggregateInput, cursor: ChatWhereUniqueInput, orderBy: [ChatOrderByWithRelationInput!], skip: Int, take: Int, where: ChatWhereInput): AggregateChat!
  aggregateCity(_count: CityCountAggregateInput, _max: CityMaxAggregateInput, _min: CityMinAggregateInput, cursor: CityWhereUniqueInput, orderBy: [CityOrderByWithRelationInput!], skip: Int, take: Int, where: CityWhereInput): AggregateCity!
  aggregateComment(_count: CommentCountAggregateInput, _max: CommentMaxAggregateInput, _min: CommentMinAggregateInput, cursor: CommentWhereUniqueInput, orderBy: [CommentOrderByWithRelationInput!], skip: Int, take: Int, where: CommentWhereInput): AggregateComment!
  aggregateCondition(_count: ConditionCountAggregateInput, _max: ConditionMaxAggregateInput, _min: ConditionMinAggregateInput, cursor: ConditionWhereUniqueInput, orderBy: [ConditionOrderByWithRelationInput!], skip: Int, take: Int, where: ConditionWhereInput): AggregateCondition!
  aggregateCountry(_count: CountryCountAggregateInput, _max: CountryMaxAggregateInput, _min: CountryMinAggregateInput, cursor: CountryWhereUniqueInput, orderBy: [CountryOrderByWithRelationInput!], skip: Int, take: Int, where: CountryWhereInput): AggregateCountry!
  aggregateFavorite(_count: FavoriteCountAggregateInput, _max: FavoriteMaxAggregateInput, _min: FavoriteMinAggregateInput, cursor: FavoriteWhereUniqueInput, orderBy: [FavoriteOrderByWithRelationInput!], skip: Int, take: Int, where: FavoriteWhereInput): AggregateFavorite!
  aggregateGlobalSettings(_count: GlobalSettingsCountAggregateInput, _max: GlobalSettingsMaxAggregateInput, _min: GlobalSettingsMinAggregateInput, cursor: GlobalSettingsWhereUniqueInput, orderBy: [GlobalSettingsOrderByWithRelationInput!], skip: Int, take: Int, where: GlobalSettingsWhereInput): AggregateGlobalSettings!
  aggregateMessage(_count: MessageCountAggregateInput, _max: MessageMaxAggregateInput, _min: MessageMinAggregateInput, cursor: MessageWhereUniqueInput, orderBy: [MessageOrderByWithRelationInput!], skip: Int, take: Int, where: MessageWhereInput): AggregateMessage!
  aggregateNeighbourhood(_count: NeighbourhoodCountAggregateInput, _max: NeighbourhoodMaxAggregateInput, _min: NeighbourhoodMinAggregateInput, cursor: NeighbourhoodWhereUniqueInput, orderBy: [NeighbourhoodOrderByWithRelationInput!], skip: Int, take: Int, where: NeighbourhoodWhereInput): AggregateNeighbourhood!
  aggregateNotification(_count: NotificationCountAggregateInput, _max: NotificationMaxAggregateInput, _min: NotificationMinAggregateInput, cursor: NotificationWhereUniqueInput, orderBy: [NotificationOrderByWithRelationInput!], skip: Int, take: Int, where: NotificationWhereInput): AggregateNotification!
  aggregateProduct(_avg: ProductAvgAggregateInput, _count: ProductCountAggregateInput, _max: ProductMaxAggregateInput, _min: ProductMinAggregateInput, _sum: ProductSumAggregateInput, cursor: ProductWhereUniqueInput, orderBy: [ProductOrderByWithRelationInput!], skip: Int, take: Int, where: ProductWhereInput): AggregateProduct!
  aggregateProductImg(_count: ProductImgCountAggregateInput, _max: ProductImgMaxAggregateInput, _min: ProductImgMinAggregateInput, cursor: ProductImgWhereUniqueInput, orderBy: [ProductImgOrderByWithRelationInput!], skip: Int, take: Int, where: ProductImgWhereInput): AggregateProductImg!
  aggregateReply(_count: ReplyCountAggregateInput, _max: ReplyMaxAggregateInput, _min: ReplyMinAggregateInput, cursor: ReplyWhereUniqueInput, orderBy: [ReplyOrderByWithRelationInput!], skip: Int, take: Int, where: ReplyWhereInput): AggregateReply!
  aggregateReport(_count: ReportCountAggregateInput, _max: ReportMaxAggregateInput, _min: ReportMinAggregateInput, cursor: ReportWhereUniqueInput, orderBy: [ReportOrderByWithRelationInput!], skip: Int, take: Int, where: ReportWhereInput): AggregateReport!
  aggregateReview(_count: ReviewCountAggregateInput, _max: ReviewMaxAggregateInput, _min: ReviewMinAggregateInput, cursor: ReviewWhereUniqueInput, orderBy: [ReviewOrderByWithRelationInput!], skip: Int, take: Int, where: ReviewWhereInput): AggregateReview!
  aggregateReviewImg(_count: ReviewImgCountAggregateInput, _max: ReviewImgMaxAggregateInput, _min: ReviewImgMinAggregateInput, cursor: ReviewImgWhereUniqueInput, orderBy: [ReviewImgOrderByWithRelationInput!], skip: Int, take: Int, where: ReviewImgWhereInput): AggregateReviewImg!
  aggregateShare(_count: ShareCountAggregateInput, _max: ShareMaxAggregateInput, _min: ShareMinAggregateInput, cursor: ShareWhereUniqueInput, orderBy: [ShareOrderByWithRelationInput!], skip: Int, take: Int, where: ShareWhereInput): AggregateShare!
  aggregateState(_count: StateCountAggregateInput, _max: StateMaxAggregateInput, _min: StateMinAggregateInput, cursor: StateWhereUniqueInput, orderBy: [StateOrderByWithRelationInput!], skip: Int, take: Int, where: StateWhereInput): AggregateState!
  aggregateSubCategory(_count: SubCategoryCountAggregateInput, _max: SubCategoryMaxAggregateInput, _min: SubCategoryMinAggregateInput, cursor: SubCategoryWhereUniqueInput, orderBy: [SubCategoryOrderByWithRelationInput!], skip: Int, take: Int, where: SubCategoryWhereInput): AggregateSubCategory!
  aggregateSubscription(_count: SubscriptionCountAggregateInput, _max: SubscriptionMaxAggregateInput, _min: SubscriptionMinAggregateInput, cursor: SubscriptionWhereUniqueInput, orderBy: [SubscriptionOrderByWithRelationInput!], skip: Int, take: Int, where: SubscriptionWhereInput): AggregateSubscription!
  aggregateUser(_count: UserCountAggregateInput, _max: UserMaxAggregateInput, _min: UserMinAggregateInput, cursor: UserWhereUniqueInput, orderBy: [UserOrderByWithRelationInput!], skip: Int, take: Int, where: UserWhereInput): AggregateUser!
  findFirstBanner(cursor: BannerWhereUniqueInput, distinct: [BannerScalarFieldEnum!], orderBy: [BannerOrderByWithRelationInput!], skip: Int, take: Int, where: BannerWhereInput): Banner!
  findFirstBrand(cursor: BrandWhereUniqueInput, distinct: [BrandScalarFieldEnum!], orderBy: [BrandOrderByWithRelationInput!], skip: Int, take: Int, where: BrandWhereInput): Brand!
  findFirstCategory(cursor: CategoryWhereUniqueInput, distinct: [CategoryScalarFieldEnum!], orderBy: [CategoryOrderByWithRelationInput!], skip: Int, take: Int, where: CategoryWhereInput): Category!
  findFirstChat(cursor: ChatWhereUniqueInput, distinct: [ChatScalarFieldEnum!], orderBy: [ChatOrderByWithRelationInput!], skip: Int, take: Int, where: ChatWhereInput): Chat!
  findFirstCity(cursor: CityWhereUniqueInput, distinct: [CityScalarFieldEnum!], orderBy: [CityOrderByWithRelationInput!], skip: Int, take: Int, where: CityWhereInput): City!
  findFirstComment(cursor: CommentWhereUniqueInput, distinct: [CommentScalarFieldEnum!], orderBy: [CommentOrderByWithRelationInput!], skip: Int, take: Int, where: CommentWhereInput): Comment!
  findFirstCondition(cursor: ConditionWhereUniqueInput, distinct: [ConditionScalarFieldEnum!], orderBy: [ConditionOrderByWithRelationInput!], skip: Int, take: Int, where: ConditionWhereInput): Condition!
  findFirstCountry(cursor: CountryWhereUniqueInput, distinct: [CountryScalarFieldEnum!], orderBy: [CountryOrderByWithRelationInput!], skip: Int, take: Int, where: CountryWhereInput): Country!
  findFirstFavorite(cursor: FavoriteWhereUniqueInput, distinct: [FavoriteScalarFieldEnum!], orderBy: [FavoriteOrderByWithRelationInput!], skip: Int, take: Int, where: FavoriteWhereInput): Favorite!
  findFirstGlobalSettings(cursor: GlobalSettingsWhereUniqueInput, distinct: [GlobalSettingsScalarFieldEnum!], orderBy: [GlobalSettingsOrderByWithRelationInput!], skip: Int, take: Int, where: GlobalSettingsWhereInput): GlobalSettings!
  findFirstMessage(cursor: MessageWhereUniqueInput, distinct: [MessageScalarFieldEnum!], orderBy: [MessageOrderByWithRelationInput!], skip: Int, take: Int, where: MessageWhereInput): Message!
  findFirstNeighbourhood(cursor: NeighbourhoodWhereUniqueInput, distinct: [NeighbourhoodScalarFieldEnum!], orderBy: [NeighbourhoodOrderByWithRelationInput!], skip: Int, take: Int, where: NeighbourhoodWhereInput): Neighbourhood!
  findFirstNotification(cursor: NotificationWhereUniqueInput, distinct: [NotificationScalarFieldEnum!], orderBy: [NotificationOrderByWithRelationInput!], skip: Int, take: Int, where: NotificationWhereInput): Notification!
  findFirstProduct(cursor: ProductWhereUniqueInput, distinct: [ProductScalarFieldEnum!], orderBy: [ProductOrderByWithRelationInput!], skip: Int, take: Int, where: ProductWhereInput): Product!
  findFirstProductImg(cursor: ProductImgWhereUniqueInput, distinct: [ProductImgScalarFieldEnum!], orderBy: [ProductImgOrderByWithRelationInput!], skip: Int, take: Int, where: ProductImgWhereInput): ProductImg!
  findFirstReply(cursor: ReplyWhereUniqueInput, distinct: [ReplyScalarFieldEnum!], orderBy: [ReplyOrderByWithRelationInput!], skip: Int, take: Int, where: ReplyWhereInput): Reply!
  findFirstReport(cursor: ReportWhereUniqueInput, distinct: [ReportScalarFieldEnum!], orderBy: [ReportOrderByWithRelationInput!], skip: Int, take: Int, where: ReportWhereInput): Report!
  findFirstReview(cursor: ReviewWhereUniqueInput, distinct: [ReviewScalarFieldEnum!], orderBy: [ReviewOrderByWithRelationInput!], skip: Int, take: Int, where: ReviewWhereInput): Review!
  findFirstReviewImg(cursor: ReviewImgWhereUniqueInput, distinct: [ReviewImgScalarFieldEnum!], orderBy: [ReviewImgOrderByWithRelationInput!], skip: Int, take: Int, where: ReviewImgWhereInput): ReviewImg!
  findFirstShare(cursor: ShareWhereUniqueInput, distinct: [ShareScalarFieldEnum!], orderBy: [ShareOrderByWithRelationInput!], skip: Int, take: Int, where: ShareWhereInput): Share!
  findFirstState(cursor: StateWhereUniqueInput, distinct: [StateScalarFieldEnum!], orderBy: [StateOrderByWithRelationInput!], skip: Int, take: Int, where: StateWhereInput): State!
  findFirstSubCategory(cursor: SubCategoryWhereUniqueInput, distinct: [SubCategoryScalarFieldEnum!], orderBy: [SubCategoryOrderByWithRelationInput!], skip: Int, take: Int, where: SubCategoryWhereInput): SubCategory!
  findFirstSubscription(cursor: SubscriptionWhereUniqueInput, distinct: [SubscriptionScalarFieldEnum!], orderBy: [SubscriptionOrderByWithRelationInput!], skip: Int, take: Int, where: SubscriptionWhereInput): Subscription!
  findFirstUser(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum!], orderBy: [UserOrderByWithRelationInput!], skip: Int, take: Int, where: UserWhereInput): User!
  findUniqueBanner(where: BannerWhereUniqueInput!): Banner!
  findUniqueBrand(where: BrandWhereUniqueInput!): Brand!
  findUniqueCategory(where: CategoryWhereUniqueInput!): Category!
  findUniqueChat(where: ChatWhereUniqueInput!): Chat!
  findUniqueCity(where: CityWhereUniqueInput!): City!
  findUniqueComment(where: CommentWhereUniqueInput!): Comment!
  findUniqueCondition(where: ConditionWhereUniqueInput!): Condition!
  findUniqueCountry(where: CountryWhereUniqueInput!): Country!
  findUniqueFavorite(where: FavoriteWhereUniqueInput!): Favorite!
  findUniqueGlobalSettings(where: GlobalSettingsWhereUniqueInput!): GlobalSettings!
  findUniqueMessage(where: MessageWhereUniqueInput!): Message!
  findUniqueNeighbourhood(where: NeighbourhoodWhereUniqueInput!): Neighbourhood!
  findUniqueNotification(where: NotificationWhereUniqueInput!): Notification!
  findUniqueProduct(where: ProductWhereUniqueInput!): Product!
  findUniqueProductImg(where: ProductImgWhereUniqueInput!): ProductImg!
  findUniqueReply(where: ReplyWhereUniqueInput!): Reply!
  findUniqueReport(where: ReportWhereUniqueInput!): Report!
  findUniqueReview(where: ReviewWhereUniqueInput!): Review!
  findUniqueReviewImg(where: ReviewImgWhereUniqueInput!): ReviewImg!
  findUniqueShare(where: ShareWhereUniqueInput!): Share!
  findUniqueState(where: StateWhereUniqueInput!): State!
  findUniqueSubCategory(where: SubCategoryWhereUniqueInput!): SubCategory!
  findUniqueSubscription(where: SubscriptionWhereUniqueInput!): Subscription!
  findUniqueUser(where: UserWhereUniqueInput!): User!
  groupByBanner(_avg: BannerAvgAggregateInput, _count: BannerCountAggregateInput, _max: BannerMaxAggregateInput, _min: BannerMinAggregateInput, _sum: BannerSumAggregateInput, by: [BannerScalarFieldEnum!]!, having: BannerScalarWhereWithAggregatesInput, orderBy: [BannerOrderByWithAggregationInput!], skip: Int, take: Int, where: BannerWhereInput): [BannerGroupBy!]!
  groupByBrand(_count: BrandCountAggregateInput, _max: BrandMaxAggregateInput, _min: BrandMinAggregateInput, by: [BrandScalarFieldEnum!]!, having: BrandScalarWhereWithAggregatesInput, orderBy: [BrandOrderByWithAggregationInput!], skip: Int, take: Int, where: BrandWhereInput): [BrandGroupBy!]!
  groupByCategory(_count: CategoryCountAggregateInput, _max: CategoryMaxAggregateInput, _min: CategoryMinAggregateInput, by: [CategoryScalarFieldEnum!]!, having: CategoryScalarWhereWithAggregatesInput, orderBy: [CategoryOrderByWithAggregationInput!], skip: Int, take: Int, where: CategoryWhereInput): [CategoryGroupBy!]!
  groupByChat(_count: ChatCountAggregateInput, _max: ChatMaxAggregateInput, _min: ChatMinAggregateInput, by: [ChatScalarFieldEnum!]!, having: ChatScalarWhereWithAggregatesInput, orderBy: [ChatOrderByWithAggregationInput!], skip: Int, take: Int, where: ChatWhereInput): [ChatGroupBy!]!
  groupByCity(_count: CityCountAggregateInput, _max: CityMaxAggregateInput, _min: CityMinAggregateInput, by: [CityScalarFieldEnum!]!, having: CityScalarWhereWithAggregatesInput, orderBy: [CityOrderByWithAggregationInput!], skip: Int, take: Int, where: CityWhereInput): [CityGroupBy!]!
  groupByComment(_count: CommentCountAggregateInput, _max: CommentMaxAggregateInput, _min: CommentMinAggregateInput, by: [CommentScalarFieldEnum!]!, having: CommentScalarWhereWithAggregatesInput, orderBy: [CommentOrderByWithAggregationInput!], skip: Int, take: Int, where: CommentWhereInput): [CommentGroupBy!]!
  groupByCondition(_count: ConditionCountAggregateInput, _max: ConditionMaxAggregateInput, _min: ConditionMinAggregateInput, by: [ConditionScalarFieldEnum!]!, having: ConditionScalarWhereWithAggregatesInput, orderBy: [ConditionOrderByWithAggregationInput!], skip: Int, take: Int, where: ConditionWhereInput): [ConditionGroupBy!]!
  groupByCountry(_count: CountryCountAggregateInput, _max: CountryMaxAggregateInput, _min: CountryMinAggregateInput, by: [CountryScalarFieldEnum!]!, having: CountryScalarWhereWithAggregatesInput, orderBy: [CountryOrderByWithAggregationInput!], skip: Int, take: Int, where: CountryWhereInput): [CountryGroupBy!]!
  groupByFavorite(_count: FavoriteCountAggregateInput, _max: FavoriteMaxAggregateInput, _min: FavoriteMinAggregateInput, by: [FavoriteScalarFieldEnum!]!, having: FavoriteScalarWhereWithAggregatesInput, orderBy: [FavoriteOrderByWithAggregationInput!], skip: Int, take: Int, where: FavoriteWhereInput): [FavoriteGroupBy!]!
  groupByGlobalSettings(_count: GlobalSettingsCountAggregateInput, _max: GlobalSettingsMaxAggregateInput, _min: GlobalSettingsMinAggregateInput, by: [GlobalSettingsScalarFieldEnum!]!, having: GlobalSettingsScalarWhereWithAggregatesInput, orderBy: [GlobalSettingsOrderByWithAggregationInput!], skip: Int, take: Int, where: GlobalSettingsWhereInput): [GlobalSettingsGroupBy!]!
  groupByMessage(_count: MessageCountAggregateInput, _max: MessageMaxAggregateInput, _min: MessageMinAggregateInput, by: [MessageScalarFieldEnum!]!, having: MessageScalarWhereWithAggregatesInput, orderBy: [MessageOrderByWithAggregationInput!], skip: Int, take: Int, where: MessageWhereInput): [MessageGroupBy!]!
  groupByNeighbourhood(_count: NeighbourhoodCountAggregateInput, _max: NeighbourhoodMaxAggregateInput, _min: NeighbourhoodMinAggregateInput, by: [NeighbourhoodScalarFieldEnum!]!, having: NeighbourhoodScalarWhereWithAggregatesInput, orderBy: [NeighbourhoodOrderByWithAggregationInput!], skip: Int, take: Int, where: NeighbourhoodWhereInput): [NeighbourhoodGroupBy!]!
  groupByNotification(_count: NotificationCountAggregateInput, _max: NotificationMaxAggregateInput, _min: NotificationMinAggregateInput, by: [NotificationScalarFieldEnum!]!, having: NotificationScalarWhereWithAggregatesInput, orderBy: [NotificationOrderByWithAggregationInput!], skip: Int, take: Int, where: NotificationWhereInput): [NotificationGroupBy!]!
  groupByProduct(_avg: ProductAvgAggregateInput, _count: ProductCountAggregateInput, _max: ProductMaxAggregateInput, _min: ProductMinAggregateInput, _sum: ProductSumAggregateInput, by: [ProductScalarFieldEnum!]!, having: ProductScalarWhereWithAggregatesInput, orderBy: [ProductOrderByWithAggregationInput!], skip: Int, take: Int, where: ProductWhereInput): [ProductGroupBy!]!
  groupByProductImg(_count: ProductImgCountAggregateInput, _max: ProductImgMaxAggregateInput, _min: ProductImgMinAggregateInput, by: [ProductImgScalarFieldEnum!]!, having: ProductImgScalarWhereWithAggregatesInput, orderBy: [ProductImgOrderByWithAggregationInput!], skip: Int, take: Int, where: ProductImgWhereInput): [ProductImgGroupBy!]!
  groupByReply(_count: ReplyCountAggregateInput, _max: ReplyMaxAggregateInput, _min: ReplyMinAggregateInput, by: [ReplyScalarFieldEnum!]!, having: ReplyScalarWhereWithAggregatesInput, orderBy: [ReplyOrderByWithAggregationInput!], skip: Int, take: Int, where: ReplyWhereInput): [ReplyGroupBy!]!
  groupByReport(_count: ReportCountAggregateInput, _max: ReportMaxAggregateInput, _min: ReportMinAggregateInput, by: [ReportScalarFieldEnum!]!, having: ReportScalarWhereWithAggregatesInput, orderBy: [ReportOrderByWithAggregationInput!], skip: Int, take: Int, where: ReportWhereInput): [ReportGroupBy!]!
  groupByReview(_count: ReviewCountAggregateInput, _max: ReviewMaxAggregateInput, _min: ReviewMinAggregateInput, by: [ReviewScalarFieldEnum!]!, having: ReviewScalarWhereWithAggregatesInput, orderBy: [ReviewOrderByWithAggregationInput!], skip: Int, take: Int, where: ReviewWhereInput): [ReviewGroupBy!]!
  groupByReviewImg(_count: ReviewImgCountAggregateInput, _max: ReviewImgMaxAggregateInput, _min: ReviewImgMinAggregateInput, by: [ReviewImgScalarFieldEnum!]!, having: ReviewImgScalarWhereWithAggregatesInput, orderBy: [ReviewImgOrderByWithAggregationInput!], skip: Int, take: Int, where: ReviewImgWhereInput): [ReviewImgGroupBy!]!
  groupByShare(_count: ShareCountAggregateInput, _max: ShareMaxAggregateInput, _min: ShareMinAggregateInput, by: [ShareScalarFieldEnum!]!, having: ShareScalarWhereWithAggregatesInput, orderBy: [ShareOrderByWithAggregationInput!], skip: Int, take: Int, where: ShareWhereInput): [ShareGroupBy!]!
  groupByState(_count: StateCountAggregateInput, _max: StateMaxAggregateInput, _min: StateMinAggregateInput, by: [StateScalarFieldEnum!]!, having: StateScalarWhereWithAggregatesInput, orderBy: [StateOrderByWithAggregationInput!], skip: Int, take: Int, where: StateWhereInput): [StateGroupBy!]!
  groupBySubCategory(_count: SubCategoryCountAggregateInput, _max: SubCategoryMaxAggregateInput, _min: SubCategoryMinAggregateInput, by: [SubCategoryScalarFieldEnum!]!, having: SubCategoryScalarWhereWithAggregatesInput, orderBy: [SubCategoryOrderByWithAggregationInput!], skip: Int, take: Int, where: SubCategoryWhereInput): [SubCategoryGroupBy!]!
  groupBySubscription(_count: SubscriptionCountAggregateInput, _max: SubscriptionMaxAggregateInput, _min: SubscriptionMinAggregateInput, by: [SubscriptionScalarFieldEnum!]!, having: SubscriptionScalarWhereWithAggregatesInput, orderBy: [SubscriptionOrderByWithAggregationInput!], skip: Int, take: Int, where: SubscriptionWhereInput): [SubscriptionGroupBy!]!
  groupByUser(_count: UserCountAggregateInput, _max: UserMaxAggregateInput, _min: UserMinAggregateInput, by: [UserScalarFieldEnum!]!, having: UserScalarWhereWithAggregatesInput, orderBy: [UserOrderByWithAggregationInput!], skip: Int, take: Int, where: UserWhereInput): [UserGroupBy!]!
  listBanners(cursor: BannerWhereUniqueInput, distinct: [BannerScalarFieldEnum!], orderBy: [BannerOrderByWithRelationInput!], skip: Int, take: Int, where: BannerWhereInput): [Banner!]!
  listBrands(cursor: BrandWhereUniqueInput, distinct: [BrandScalarFieldEnum!], orderBy: [BrandOrderByWithRelationInput!], skip: Int, take: Int, where: BrandWhereInput): [Brand!]!
  listCategorys(cursor: CategoryWhereUniqueInput, distinct: [CategoryScalarFieldEnum!], orderBy: [CategoryOrderByWithRelationInput!], skip: Int, take: Int, where: CategoryWhereInput): [Category!]!
  listChats(cursor: ChatWhereUniqueInput, distinct: [ChatScalarFieldEnum!], orderBy: [ChatOrderByWithRelationInput!], skip: Int, take: Int, where: ChatWhereInput): [Chat!]!
  listCitys(cursor: CityWhereUniqueInput, distinct: [CityScalarFieldEnum!], orderBy: [CityOrderByWithRelationInput!], skip: Int, take: Int, where: CityWhereInput): [City!]!
  listComments(cursor: CommentWhereUniqueInput, distinct: [CommentScalarFieldEnum!], orderBy: [CommentOrderByWithRelationInput!], skip: Int, take: Int, where: CommentWhereInput): [Comment!]!
  listConditions(cursor: ConditionWhereUniqueInput, distinct: [ConditionScalarFieldEnum!], orderBy: [ConditionOrderByWithRelationInput!], skip: Int, take: Int, where: ConditionWhereInput): [Condition!]!
  listCountrys(cursor: CountryWhereUniqueInput, distinct: [CountryScalarFieldEnum!], orderBy: [CountryOrderByWithRelationInput!], skip: Int, take: Int, where: CountryWhereInput): [Country!]!
  listFavorites(cursor: FavoriteWhereUniqueInput, distinct: [FavoriteScalarFieldEnum!], orderBy: [FavoriteOrderByWithRelationInput!], skip: Int, take: Int, where: FavoriteWhereInput): [Favorite!]!
  listGlobalSettingss(cursor: GlobalSettingsWhereUniqueInput, distinct: [GlobalSettingsScalarFieldEnum!], orderBy: [GlobalSettingsOrderByWithRelationInput!], skip: Int, take: Int, where: GlobalSettingsWhereInput): [GlobalSettings!]!
  listMessages(cursor: MessageWhereUniqueInput, distinct: [MessageScalarFieldEnum!], orderBy: [MessageOrderByWithRelationInput!], skip: Int, take: Int, where: MessageWhereInput): [Message!]!
  listNeighbourhoods(cursor: NeighbourhoodWhereUniqueInput, distinct: [NeighbourhoodScalarFieldEnum!], orderBy: [NeighbourhoodOrderByWithRelationInput!], skip: Int, take: Int, where: NeighbourhoodWhereInput): [Neighbourhood!]!
  listNotifications(cursor: NotificationWhereUniqueInput, distinct: [NotificationScalarFieldEnum!], orderBy: [NotificationOrderByWithRelationInput!], skip: Int, take: Int, where: NotificationWhereInput): [Notification!]!
  listProductImgs(cursor: ProductImgWhereUniqueInput, distinct: [ProductImgScalarFieldEnum!], orderBy: [ProductImgOrderByWithRelationInput!], skip: Int, take: Int, where: ProductImgWhereInput): [ProductImg!]!
  listProducts(cursor: ProductWhereUniqueInput, distinct: [ProductScalarFieldEnum!], orderBy: [ProductOrderByWithRelationInput!], skip: Int, take: Int, where: ProductWhereInput): [Product!]!
  listReplys(cursor: ReplyWhereUniqueInput, distinct: [ReplyScalarFieldEnum!], orderBy: [ReplyOrderByWithRelationInput!], skip: Int, take: Int, where: ReplyWhereInput): [Reply!]!
  listReports(cursor: ReportWhereUniqueInput, distinct: [ReportScalarFieldEnum!], orderBy: [ReportOrderByWithRelationInput!], skip: Int, take: Int, where: ReportWhereInput): [Report!]!
  listReviewImgs(cursor: ReviewImgWhereUniqueInput, distinct: [ReviewImgScalarFieldEnum!], orderBy: [ReviewImgOrderByWithRelationInput!], skip: Int, take: Int, where: ReviewImgWhereInput): [ReviewImg!]!
  listReviews(cursor: ReviewWhereUniqueInput, distinct: [ReviewScalarFieldEnum!], orderBy: [ReviewOrderByWithRelationInput!], skip: Int, take: Int, where: ReviewWhereInput): [Review!]!
  listShares(cursor: ShareWhereUniqueInput, distinct: [ShareScalarFieldEnum!], orderBy: [ShareOrderByWithRelationInput!], skip: Int, take: Int, where: ShareWhereInput): [Share!]!
  listStates(cursor: StateWhereUniqueInput, distinct: [StateScalarFieldEnum!], orderBy: [StateOrderByWithRelationInput!], skip: Int, take: Int, where: StateWhereInput): [State!]!
  listSubCategorys(cursor: SubCategoryWhereUniqueInput, distinct: [SubCategoryScalarFieldEnum!], orderBy: [SubCategoryOrderByWithRelationInput!], skip: Int, take: Int, where: SubCategoryWhereInput): [SubCategory!]!
  listSubscriptions(cursor: SubscriptionWhereUniqueInput, distinct: [SubscriptionScalarFieldEnum!], orderBy: [SubscriptionOrderByWithRelationInput!], skip: Int, take: Int, where: SubscriptionWhereInput): [Subscription!]!
  listUsers(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum!], orderBy: [UserOrderByWithRelationInput!], skip: Int, take: Int, where: UserWhereInput): [User!]!
}

enum QueryMode {
  default
  insensitive
}

type Reply {
  _count: ReplyCount!
  comment: Comment!
  commentId: String!
  createdAt: Timestamp!
  id: ID!
  isActive: Boolean!
  replies: [Reply!]
  reply: Reply
  replyId: String
  text: String!
  user: User!
  userId: String!
}

type ReplyCount {
  replies: Int!
}

type ReplyCountAggregate {
  _all: Int!
  commentId: Int!
  createdAt: Int!
  id: Int!
  isActive: Int!
  replyId: Int!
  text: Int!
  userId: Int!
}

input ReplyCountAggregateInput {
  _all: Boolean
  commentId: Boolean
  createdAt: Boolean
  id: Boolean
  isActive: Boolean
  replyId: Boolean
  text: Boolean
  userId: Boolean
}

input ReplyCountOrderByAggregateInput {
  commentId: SortOrder
  createdAt: SortOrder
  id: SortOrder
  isActive: SortOrder
  replyId: SortOrder
  text: SortOrder
  userId: SortOrder
}

input ReplyCreateInput {
  comment: CommentCreateNestedOneWithoutRepliesInput!
  createdAt: Timestamp
  id: String
  isActive: Boolean
  replies: ReplyCreateNestedManyWithoutReplyInput
  reply: ReplyCreateNestedOneWithoutRepliesInput
  text: String!
  user: UserCreateNestedOneWithoutRepliesInput!
}

input ReplyCreateManyCommentInput {
  createdAt: Timestamp
  id: String
  isActive: Boolean
  replyId: String
  text: String!
  userId: String!
}

input ReplyCreateManyCommentInputEnvelope {
  data: [ReplyCreateManyCommentInput!]!
  skipDuplicates: Boolean
}

input ReplyCreateManyInput {
  commentId: String!
  createdAt: Timestamp
  id: String
  isActive: Boolean
  replyId: String
  text: String!
  userId: String!
}

input ReplyCreateManyReplyInput {
  commentId: String!
  createdAt: Timestamp
  id: String
  isActive: Boolean
  text: String!
  userId: String!
}

input ReplyCreateManyReplyInputEnvelope {
  data: [ReplyCreateManyReplyInput!]!
  skipDuplicates: Boolean
}

input ReplyCreateManyUserInput {
  commentId: String!
  createdAt: Timestamp
  id: String
  isActive: Boolean
  replyId: String
  text: String!
}

input ReplyCreateManyUserInputEnvelope {
  data: [ReplyCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input ReplyCreateNestedManyWithoutCommentInput {
  connect: [ReplyWhereUniqueInput!]
  connectOrCreate: [ReplyCreateOrConnectWithoutCommentInput!]
  create: [ReplyCreateWithoutCommentInput!]
  createMany: ReplyCreateManyCommentInputEnvelope
}

input ReplyCreateNestedManyWithoutReplyInput {
  connect: [ReplyWhereUniqueInput!]
  connectOrCreate: [ReplyCreateOrConnectWithoutReplyInput!]
  create: [ReplyCreateWithoutReplyInput!]
  createMany: ReplyCreateManyReplyInputEnvelope
}

input ReplyCreateNestedManyWithoutUserInput {
  connect: [ReplyWhereUniqueInput!]
  connectOrCreate: [ReplyCreateOrConnectWithoutUserInput!]
  create: [ReplyCreateWithoutUserInput!]
  createMany: ReplyCreateManyUserInputEnvelope
}

input ReplyCreateNestedOneWithoutRepliesInput {
  connect: ReplyWhereUniqueInput
  connectOrCreate: ReplyCreateOrConnectWithoutRepliesInput
  create: ReplyCreateWithoutRepliesInput
}

input ReplyCreateOrConnectWithoutCommentInput {
  create: ReplyCreateWithoutCommentInput!
  where: ReplyWhereUniqueInput!
}

input ReplyCreateOrConnectWithoutRepliesInput {
  create: ReplyCreateWithoutRepliesInput!
  where: ReplyWhereUniqueInput!
}

input ReplyCreateOrConnectWithoutReplyInput {
  create: ReplyCreateWithoutReplyInput!
  where: ReplyWhereUniqueInput!
}

input ReplyCreateOrConnectWithoutUserInput {
  create: ReplyCreateWithoutUserInput!
  where: ReplyWhereUniqueInput!
}

input ReplyCreateWithoutCommentInput {
  createdAt: Timestamp
  id: String
  isActive: Boolean
  replies: ReplyCreateNestedManyWithoutReplyInput
  reply: ReplyCreateNestedOneWithoutRepliesInput
  text: String!
  user: UserCreateNestedOneWithoutRepliesInput!
}

input ReplyCreateWithoutRepliesInput {
  comment: CommentCreateNestedOneWithoutRepliesInput!
  createdAt: Timestamp
  id: String
  isActive: Boolean
  reply: ReplyCreateNestedOneWithoutRepliesInput
  text: String!
  user: UserCreateNestedOneWithoutRepliesInput!
}

input ReplyCreateWithoutReplyInput {
  comment: CommentCreateNestedOneWithoutRepliesInput!
  createdAt: Timestamp
  id: String
  isActive: Boolean
  replies: ReplyCreateNestedManyWithoutReplyInput
  text: String!
  user: UserCreateNestedOneWithoutRepliesInput!
}

input ReplyCreateWithoutUserInput {
  comment: CommentCreateNestedOneWithoutRepliesInput!
  createdAt: Timestamp
  id: String
  isActive: Boolean
  replies: ReplyCreateNestedManyWithoutReplyInput
  reply: ReplyCreateNestedOneWithoutRepliesInput
  text: String!
}

type ReplyGroupBy {
  _count: ReplyCountAggregate
  _max: ReplyMaxAggregate
  _min: ReplyMinAggregate
  commentId: String!
  createdAt: Timestamp!
  id: String!
  isActive: Boolean!
  replyId: String
  text: String!
  userId: String!
}

input ReplyListRelationFilter {
  every: ReplyWhereInput
  none: ReplyWhereInput
  some: ReplyWhereInput
}

type ReplyMaxAggregate {
  commentId: String
  createdAt: Timestamp
  id: String
  isActive: Boolean
  replyId: String
  text: String
  userId: String
}

input ReplyMaxAggregateInput {
  commentId: Boolean
  createdAt: Boolean
  id: Boolean
  isActive: Boolean
  replyId: Boolean
  text: Boolean
  userId: Boolean
}

input ReplyMaxOrderByAggregateInput {
  commentId: SortOrder
  createdAt: SortOrder
  id: SortOrder
  isActive: SortOrder
  replyId: SortOrder
  text: SortOrder
  userId: SortOrder
}

type ReplyMinAggregate {
  commentId: String
  createdAt: Timestamp
  id: String
  isActive: Boolean
  replyId: String
  text: String
  userId: String
}

input ReplyMinAggregateInput {
  commentId: Boolean
  createdAt: Boolean
  id: Boolean
  isActive: Boolean
  replyId: Boolean
  text: Boolean
  userId: Boolean
}

input ReplyMinOrderByAggregateInput {
  commentId: SortOrder
  createdAt: SortOrder
  id: SortOrder
  isActive: SortOrder
  replyId: SortOrder
  text: SortOrder
  userId: SortOrder
}

input ReplyNullableRelationFilter {
  is: ReplyWhereInput
  isNot: ReplyWhereInput
}

input ReplyOrderByRelationAggregateInput {
  _count: SortOrder
}

input ReplyOrderByWithAggregationInput {
  _count: ReplyCountOrderByAggregateInput
  _max: ReplyMaxOrderByAggregateInput
  _min: ReplyMinOrderByAggregateInput
  commentId: SortOrder
  createdAt: SortOrder
  id: SortOrder
  isActive: SortOrder
  replyId: SortOrderInput
  text: SortOrder
  userId: SortOrder
}

input ReplyOrderByWithRelationInput {
  comment: CommentOrderByWithRelationInput
  commentId: SortOrder
  createdAt: SortOrder
  id: SortOrder
  isActive: SortOrder
  replies: ReplyOrderByRelationAggregateInput
  reply: ReplyOrderByWithRelationInput
  replyId: SortOrderInput
  text: SortOrder
  user: UserOrderByWithRelationInput
  userId: SortOrder
}

enum ReplyScalarFieldEnum {
  commentId
  createdAt
  id
  isActive
  replyId
  text
  userId
}

input ReplyScalarWhereInput {
  AND: [ReplyScalarWhereInput!]
  NOT: [ReplyScalarWhereInput!]
  OR: [ReplyScalarWhereInput!]
  commentId: StringFilter
  createdAt: DateTimeFilter
  id: StringFilter
  isActive: BoolFilter
  replyId: StringNullableFilter
  text: StringFilter
  userId: StringFilter
}

input ReplyScalarWhereWithAggregatesInput {
  AND: [ReplyScalarWhereWithAggregatesInput!]
  NOT: [ReplyScalarWhereWithAggregatesInput!]
  OR: [ReplyScalarWhereWithAggregatesInput!]
  commentId: StringWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  id: StringWithAggregatesFilter
  isActive: BoolWithAggregatesFilter
  replyId: StringNullableWithAggregatesFilter
  text: StringWithAggregatesFilter
  userId: StringWithAggregatesFilter
}

input ReplyUpdateInput {
  comment: CommentUpdateOneRequiredWithoutRepliesNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  isActive: BoolFieldUpdateOperationsInput
  replies: ReplyUpdateManyWithoutReplyNestedInput
  reply: ReplyUpdateOneWithoutRepliesNestedInput
  text: StringFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutRepliesNestedInput
}

input ReplyUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  isActive: BoolFieldUpdateOperationsInput
  text: StringFieldUpdateOperationsInput
}

input ReplyUpdateManyWithWhereWithoutCommentInput {
  data: ReplyUpdateManyMutationInput!
  where: ReplyScalarWhereInput!
}

input ReplyUpdateManyWithWhereWithoutReplyInput {
  data: ReplyUpdateManyMutationInput!
  where: ReplyScalarWhereInput!
}

input ReplyUpdateManyWithWhereWithoutUserInput {
  data: ReplyUpdateManyMutationInput!
  where: ReplyScalarWhereInput!
}

input ReplyUpdateManyWithoutCommentNestedInput {
  connect: [ReplyWhereUniqueInput!]
  connectOrCreate: [ReplyCreateOrConnectWithoutCommentInput!]
  create: [ReplyCreateWithoutCommentInput!]
  createMany: ReplyCreateManyCommentInputEnvelope
  delete: [ReplyWhereUniqueInput!]
  deleteMany: [ReplyScalarWhereInput!]
  disconnect: [ReplyWhereUniqueInput!]
  set: [ReplyWhereUniqueInput!]
  update: [ReplyUpdateWithWhereUniqueWithoutCommentInput!]
  updateMany: [ReplyUpdateManyWithWhereWithoutCommentInput!]
  upsert: [ReplyUpsertWithWhereUniqueWithoutCommentInput!]
}

input ReplyUpdateManyWithoutReplyNestedInput {
  connect: [ReplyWhereUniqueInput!]
  connectOrCreate: [ReplyCreateOrConnectWithoutReplyInput!]
  create: [ReplyCreateWithoutReplyInput!]
  createMany: ReplyCreateManyReplyInputEnvelope
  delete: [ReplyWhereUniqueInput!]
  deleteMany: [ReplyScalarWhereInput!]
  disconnect: [ReplyWhereUniqueInput!]
  set: [ReplyWhereUniqueInput!]
  update: [ReplyUpdateWithWhereUniqueWithoutReplyInput!]
  updateMany: [ReplyUpdateManyWithWhereWithoutReplyInput!]
  upsert: [ReplyUpsertWithWhereUniqueWithoutReplyInput!]
}

input ReplyUpdateManyWithoutUserNestedInput {
  connect: [ReplyWhereUniqueInput!]
  connectOrCreate: [ReplyCreateOrConnectWithoutUserInput!]
  create: [ReplyCreateWithoutUserInput!]
  createMany: ReplyCreateManyUserInputEnvelope
  delete: [ReplyWhereUniqueInput!]
  deleteMany: [ReplyScalarWhereInput!]
  disconnect: [ReplyWhereUniqueInput!]
  set: [ReplyWhereUniqueInput!]
  update: [ReplyUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [ReplyUpdateManyWithWhereWithoutUserInput!]
  upsert: [ReplyUpsertWithWhereUniqueWithoutUserInput!]
}

input ReplyUpdateOneWithoutRepliesNestedInput {
  connect: ReplyWhereUniqueInput
  connectOrCreate: ReplyCreateOrConnectWithoutRepliesInput
  create: ReplyCreateWithoutRepliesInput
  delete: ReplyWhereInput
  disconnect: ReplyWhereInput
  update: ReplyUpdateToOneWithWhereWithoutRepliesInput
  upsert: ReplyUpsertWithoutRepliesInput
}

input ReplyUpdateToOneWithWhereWithoutRepliesInput {
  data: ReplyUpdateWithoutRepliesInput!
  where: ReplyWhereInput
}

input ReplyUpdateWithWhereUniqueWithoutCommentInput {
  data: ReplyUpdateWithoutCommentInput!
  where: ReplyWhereUniqueInput!
}

input ReplyUpdateWithWhereUniqueWithoutReplyInput {
  data: ReplyUpdateWithoutReplyInput!
  where: ReplyWhereUniqueInput!
}

input ReplyUpdateWithWhereUniqueWithoutUserInput {
  data: ReplyUpdateWithoutUserInput!
  where: ReplyWhereUniqueInput!
}

input ReplyUpdateWithoutCommentInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  isActive: BoolFieldUpdateOperationsInput
  replies: ReplyUpdateManyWithoutReplyNestedInput
  reply: ReplyUpdateOneWithoutRepliesNestedInput
  text: StringFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutRepliesNestedInput
}

input ReplyUpdateWithoutRepliesInput {
  comment: CommentUpdateOneRequiredWithoutRepliesNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  isActive: BoolFieldUpdateOperationsInput
  reply: ReplyUpdateOneWithoutRepliesNestedInput
  text: StringFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutRepliesNestedInput
}

input ReplyUpdateWithoutReplyInput {
  comment: CommentUpdateOneRequiredWithoutRepliesNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  isActive: BoolFieldUpdateOperationsInput
  replies: ReplyUpdateManyWithoutReplyNestedInput
  text: StringFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutRepliesNestedInput
}

input ReplyUpdateWithoutUserInput {
  comment: CommentUpdateOneRequiredWithoutRepliesNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  isActive: BoolFieldUpdateOperationsInput
  replies: ReplyUpdateManyWithoutReplyNestedInput
  reply: ReplyUpdateOneWithoutRepliesNestedInput
  text: StringFieldUpdateOperationsInput
}

input ReplyUpsertWithWhereUniqueWithoutCommentInput {
  create: ReplyCreateWithoutCommentInput!
  update: ReplyUpdateWithoutCommentInput!
  where: ReplyWhereUniqueInput!
}

input ReplyUpsertWithWhereUniqueWithoutReplyInput {
  create: ReplyCreateWithoutReplyInput!
  update: ReplyUpdateWithoutReplyInput!
  where: ReplyWhereUniqueInput!
}

input ReplyUpsertWithWhereUniqueWithoutUserInput {
  create: ReplyCreateWithoutUserInput!
  update: ReplyUpdateWithoutUserInput!
  where: ReplyWhereUniqueInput!
}

input ReplyUpsertWithoutRepliesInput {
  create: ReplyCreateWithoutRepliesInput!
  update: ReplyUpdateWithoutRepliesInput!
  where: ReplyWhereInput
}

input ReplyWhereInput {
  AND: [ReplyWhereInput!]
  NOT: [ReplyWhereInput!]
  OR: [ReplyWhereInput!]
  comment: CommentRelationFilter
  commentId: StringFilter
  createdAt: DateTimeFilter
  id: StringFilter
  isActive: BoolFilter
  replies: ReplyListRelationFilter
  reply: ReplyNullableRelationFilter
  replyId: StringNullableFilter
  text: StringFilter
  user: UserRelationFilter
  userId: StringFilter
}

input ReplyWhereUniqueInput {
  AND: [ReplyWhereInput!]
  NOT: [ReplyWhereInput!]
  OR: [ReplyWhereInput!]
  comment: CommentRelationFilter
  commentId: StringFilter
  createdAt: DateTimeFilter
  id: String
  isActive: BoolFilter
  replies: ReplyListRelationFilter
  reply: ReplyNullableRelationFilter
  replyId: StringNullableFilter
  text: StringFilter
  user: UserRelationFilter
  userId: StringFilter
}

type Report {
  product: Product!
  productId: String!
  text: String!
  user: User!
  userId: String!
}

type ReportCountAggregate {
  _all: Int!
  productId: Int!
  text: Int!
  userId: Int!
}

input ReportCountAggregateInput {
  _all: Boolean
  productId: Boolean
  text: Boolean
  userId: Boolean
}

input ReportCountOrderByAggregateInput {
  productId: SortOrder
  text: SortOrder
  userId: SortOrder
}

input ReportCreateInput {
  product: ProductCreateNestedOneWithoutReportInput!
  text: String!
  user: UserCreateNestedOneWithoutReportsInput!
}

input ReportCreateManyInput {
  productId: String!
  text: String!
  userId: String!
}

input ReportCreateManyUserInput {
  productId: String!
  text: String!
}

input ReportCreateManyUserInputEnvelope {
  data: [ReportCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input ReportCreateNestedManyWithoutUserInput {
  connect: [ReportWhereUniqueInput!]
  connectOrCreate: [ReportCreateOrConnectWithoutUserInput!]
  create: [ReportCreateWithoutUserInput!]
  createMany: ReportCreateManyUserInputEnvelope
}

input ReportCreateNestedOneWithoutProductInput {
  connect: ReportWhereUniqueInput
  connectOrCreate: ReportCreateOrConnectWithoutProductInput
  create: ReportCreateWithoutProductInput
}

input ReportCreateOrConnectWithoutProductInput {
  create: ReportCreateWithoutProductInput!
  where: ReportWhereUniqueInput!
}

input ReportCreateOrConnectWithoutUserInput {
  create: ReportCreateWithoutUserInput!
  where: ReportWhereUniqueInput!
}

input ReportCreateWithoutProductInput {
  text: String!
  user: UserCreateNestedOneWithoutReportsInput!
}

input ReportCreateWithoutUserInput {
  product: ProductCreateNestedOneWithoutReportInput!
  text: String!
}

type ReportGroupBy {
  _count: ReportCountAggregate
  _max: ReportMaxAggregate
  _min: ReportMinAggregate
  productId: String!
  text: String!
  userId: String!
}

input ReportListRelationFilter {
  every: ReportWhereInput
  none: ReportWhereInput
  some: ReportWhereInput
}

type ReportMaxAggregate {
  productId: String
  text: String
  userId: String
}

input ReportMaxAggregateInput {
  productId: Boolean
  text: Boolean
  userId: Boolean
}

input ReportMaxOrderByAggregateInput {
  productId: SortOrder
  text: SortOrder
  userId: SortOrder
}

type ReportMinAggregate {
  productId: String
  text: String
  userId: String
}

input ReportMinAggregateInput {
  productId: Boolean
  text: Boolean
  userId: Boolean
}

input ReportMinOrderByAggregateInput {
  productId: SortOrder
  text: SortOrder
  userId: SortOrder
}

input ReportNullableRelationFilter {
  is: ReportWhereInput
  isNot: ReportWhereInput
}

input ReportOrderByRelationAggregateInput {
  _count: SortOrder
}

input ReportOrderByWithAggregationInput {
  _count: ReportCountOrderByAggregateInput
  _max: ReportMaxOrderByAggregateInput
  _min: ReportMinOrderByAggregateInput
  productId: SortOrder
  text: SortOrder
  userId: SortOrder
}

input ReportOrderByWithRelationInput {
  product: ProductOrderByWithRelationInput
  productId: SortOrder
  text: SortOrder
  user: UserOrderByWithRelationInput
  userId: SortOrder
}

enum ReportScalarFieldEnum {
  productId
  text
  userId
}

input ReportScalarWhereInput {
  AND: [ReportScalarWhereInput!]
  NOT: [ReportScalarWhereInput!]
  OR: [ReportScalarWhereInput!]
  productId: StringFilter
  text: StringFilter
  userId: StringFilter
}

input ReportScalarWhereWithAggregatesInput {
  AND: [ReportScalarWhereWithAggregatesInput!]
  NOT: [ReportScalarWhereWithAggregatesInput!]
  OR: [ReportScalarWhereWithAggregatesInput!]
  productId: StringWithAggregatesFilter
  text: StringWithAggregatesFilter
  userId: StringWithAggregatesFilter
}

input ReportUpdateInput {
  product: ProductUpdateOneRequiredWithoutReportNestedInput
  text: StringFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutReportsNestedInput
}

input ReportUpdateManyMutationInput {
  text: StringFieldUpdateOperationsInput
}

input ReportUpdateManyWithWhereWithoutUserInput {
  data: ReportUpdateManyMutationInput!
  where: ReportScalarWhereInput!
}

input ReportUpdateManyWithoutUserNestedInput {
  connect: [ReportWhereUniqueInput!]
  connectOrCreate: [ReportCreateOrConnectWithoutUserInput!]
  create: [ReportCreateWithoutUserInput!]
  createMany: ReportCreateManyUserInputEnvelope
  delete: [ReportWhereUniqueInput!]
  deleteMany: [ReportScalarWhereInput!]
  disconnect: [ReportWhereUniqueInput!]
  set: [ReportWhereUniqueInput!]
  update: [ReportUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [ReportUpdateManyWithWhereWithoutUserInput!]
  upsert: [ReportUpsertWithWhereUniqueWithoutUserInput!]
}

input ReportUpdateOneWithoutProductNestedInput {
  connect: ReportWhereUniqueInput
  connectOrCreate: ReportCreateOrConnectWithoutProductInput
  create: ReportCreateWithoutProductInput
  delete: ReportWhereInput
  disconnect: ReportWhereInput
  update: ReportUpdateToOneWithWhereWithoutProductInput
  upsert: ReportUpsertWithoutProductInput
}

input ReportUpdateToOneWithWhereWithoutProductInput {
  data: ReportUpdateWithoutProductInput!
  where: ReportWhereInput
}

input ReportUpdateWithWhereUniqueWithoutUserInput {
  data: ReportUpdateWithoutUserInput!
  where: ReportWhereUniqueInput!
}

input ReportUpdateWithoutProductInput {
  text: StringFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutReportsNestedInput
}

input ReportUpdateWithoutUserInput {
  product: ProductUpdateOneRequiredWithoutReportNestedInput
  text: StringFieldUpdateOperationsInput
}

input ReportUpsertWithWhereUniqueWithoutUserInput {
  create: ReportCreateWithoutUserInput!
  update: ReportUpdateWithoutUserInput!
  where: ReportWhereUniqueInput!
}

input ReportUpsertWithoutProductInput {
  create: ReportCreateWithoutProductInput!
  update: ReportUpdateWithoutProductInput!
  where: ReportWhereInput
}

input ReportUserIdProductIdCompoundUniqueInput {
  productId: String!
  userId: String!
}

input ReportWhereInput {
  AND: [ReportWhereInput!]
  NOT: [ReportWhereInput!]
  OR: [ReportWhereInput!]
  product: ProductRelationFilter
  productId: StringFilter
  text: StringFilter
  user: UserRelationFilter
  userId: StringFilter
}

input ReportWhereUniqueInput {
  AND: [ReportWhereInput!]
  NOT: [ReportWhereInput!]
  OR: [ReportWhereInput!]
  product: ProductRelationFilter
  productId: String
  text: StringFilter
  user: UserRelationFilter
  userId: StringFilter
  userId_productId: ReportUserIdProductIdCompoundUniqueInput
}

type Review {
  _count: ReviewCount!
  chat: Chat!
  chatId: String!
  createdAt: Timestamp!
  id: ID!
  imgUrls: [ReviewImg!]
  text: String!
  user: User!
  userId: String!
}

type ReviewCount {
  imgUrls: Int!
}

type ReviewCountAggregate {
  _all: Int!
  chatId: Int!
  createdAt: Int!
  id: Int!
  text: Int!
  userId: Int!
}

input ReviewCountAggregateInput {
  _all: Boolean
  chatId: Boolean
  createdAt: Boolean
  id: Boolean
  text: Boolean
  userId: Boolean
}

input ReviewCountOrderByAggregateInput {
  chatId: SortOrder
  createdAt: SortOrder
  id: SortOrder
  text: SortOrder
  userId: SortOrder
}

input ReviewCreateInput {
  chat: ChatCreateNestedOneWithoutReviewInput!
  createdAt: Timestamp
  id: String
  imgUrls: ReviewImgCreateNestedManyWithoutReviewInput
  text: String!
  user: UserCreateNestedOneWithoutReviewsInput!
}

input ReviewCreateManyInput {
  chatId: String!
  createdAt: Timestamp
  id: String
  text: String!
  userId: String!
}

input ReviewCreateManyUserInput {
  chatId: String!
  createdAt: Timestamp
  id: String
  text: String!
}

input ReviewCreateManyUserInputEnvelope {
  data: [ReviewCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input ReviewCreateNestedManyWithoutUserInput {
  connect: [ReviewWhereUniqueInput!]
  connectOrCreate: [ReviewCreateOrConnectWithoutUserInput!]
  create: [ReviewCreateWithoutUserInput!]
  createMany: ReviewCreateManyUserInputEnvelope
}

input ReviewCreateNestedOneWithoutChatInput {
  connect: ReviewWhereUniqueInput
  connectOrCreate: ReviewCreateOrConnectWithoutChatInput
  create: ReviewCreateWithoutChatInput
}

input ReviewCreateNestedOneWithoutImgUrlsInput {
  connect: ReviewWhereUniqueInput
  connectOrCreate: ReviewCreateOrConnectWithoutImgUrlsInput
  create: ReviewCreateWithoutImgUrlsInput
}

input ReviewCreateOrConnectWithoutChatInput {
  create: ReviewCreateWithoutChatInput!
  where: ReviewWhereUniqueInput!
}

input ReviewCreateOrConnectWithoutImgUrlsInput {
  create: ReviewCreateWithoutImgUrlsInput!
  where: ReviewWhereUniqueInput!
}

input ReviewCreateOrConnectWithoutUserInput {
  create: ReviewCreateWithoutUserInput!
  where: ReviewWhereUniqueInput!
}

input ReviewCreateWithoutChatInput {
  createdAt: Timestamp
  id: String
  imgUrls: ReviewImgCreateNestedManyWithoutReviewInput
  text: String!
  user: UserCreateNestedOneWithoutReviewsInput!
}

input ReviewCreateWithoutImgUrlsInput {
  chat: ChatCreateNestedOneWithoutReviewInput!
  createdAt: Timestamp
  id: String
  text: String!
  user: UserCreateNestedOneWithoutReviewsInput!
}

input ReviewCreateWithoutUserInput {
  chat: ChatCreateNestedOneWithoutReviewInput!
  createdAt: Timestamp
  id: String
  imgUrls: ReviewImgCreateNestedManyWithoutReviewInput
  text: String!
}

type ReviewGroupBy {
  _count: ReviewCountAggregate
  _max: ReviewMaxAggregate
  _min: ReviewMinAggregate
  chatId: String!
  createdAt: Timestamp!
  id: String!
  text: String!
  userId: String!
}

type ReviewImg {
  createdAt: Timestamp!
  id: ID!
  imgUrl: String!
  review: Review!
  reviewId: String!
}

type ReviewImgCountAggregate {
  _all: Int!
  createdAt: Int!
  id: Int!
  imgUrl: Int!
  reviewId: Int!
}

input ReviewImgCountAggregateInput {
  _all: Boolean
  createdAt: Boolean
  id: Boolean
  imgUrl: Boolean
  reviewId: Boolean
}

input ReviewImgCountOrderByAggregateInput {
  createdAt: SortOrder
  id: SortOrder
  imgUrl: SortOrder
  reviewId: SortOrder
}

input ReviewImgCreateInput {
  createdAt: Timestamp
  id: String
  imgUrl: String!
  review: ReviewCreateNestedOneWithoutImgUrlsInput!
}

input ReviewImgCreateManyInput {
  createdAt: Timestamp
  id: String
  imgUrl: String!
  reviewId: String!
}

input ReviewImgCreateManyReviewInput {
  createdAt: Timestamp
  id: String
  imgUrl: String!
}

input ReviewImgCreateManyReviewInputEnvelope {
  data: [ReviewImgCreateManyReviewInput!]!
  skipDuplicates: Boolean
}

input ReviewImgCreateNestedManyWithoutReviewInput {
  connect: [ReviewImgWhereUniqueInput!]
  connectOrCreate: [ReviewImgCreateOrConnectWithoutReviewInput!]
  create: [ReviewImgCreateWithoutReviewInput!]
  createMany: ReviewImgCreateManyReviewInputEnvelope
}

input ReviewImgCreateOrConnectWithoutReviewInput {
  create: ReviewImgCreateWithoutReviewInput!
  where: ReviewImgWhereUniqueInput!
}

input ReviewImgCreateWithoutReviewInput {
  createdAt: Timestamp
  id: String
  imgUrl: String!
}

type ReviewImgGroupBy {
  _count: ReviewImgCountAggregate
  _max: ReviewImgMaxAggregate
  _min: ReviewImgMinAggregate
  createdAt: Timestamp!
  id: String!
  imgUrl: String!
  reviewId: String!
}

input ReviewImgListRelationFilter {
  every: ReviewImgWhereInput
  none: ReviewImgWhereInput
  some: ReviewImgWhereInput
}

type ReviewImgMaxAggregate {
  createdAt: Timestamp
  id: String
  imgUrl: String
  reviewId: String
}

input ReviewImgMaxAggregateInput {
  createdAt: Boolean
  id: Boolean
  imgUrl: Boolean
  reviewId: Boolean
}

input ReviewImgMaxOrderByAggregateInput {
  createdAt: SortOrder
  id: SortOrder
  imgUrl: SortOrder
  reviewId: SortOrder
}

type ReviewImgMinAggregate {
  createdAt: Timestamp
  id: String
  imgUrl: String
  reviewId: String
}

input ReviewImgMinAggregateInput {
  createdAt: Boolean
  id: Boolean
  imgUrl: Boolean
  reviewId: Boolean
}

input ReviewImgMinOrderByAggregateInput {
  createdAt: SortOrder
  id: SortOrder
  imgUrl: SortOrder
  reviewId: SortOrder
}

input ReviewImgOrderByRelationAggregateInput {
  _count: SortOrder
}

input ReviewImgOrderByWithAggregationInput {
  _count: ReviewImgCountOrderByAggregateInput
  _max: ReviewImgMaxOrderByAggregateInput
  _min: ReviewImgMinOrderByAggregateInput
  createdAt: SortOrder
  id: SortOrder
  imgUrl: SortOrder
  reviewId: SortOrder
}

input ReviewImgOrderByWithRelationInput {
  createdAt: SortOrder
  id: SortOrder
  imgUrl: SortOrder
  review: ReviewOrderByWithRelationInput
  reviewId: SortOrder
}

enum ReviewImgScalarFieldEnum {
  createdAt
  id
  imgUrl
  reviewId
}

input ReviewImgScalarWhereInput {
  AND: [ReviewImgScalarWhereInput!]
  NOT: [ReviewImgScalarWhereInput!]
  OR: [ReviewImgScalarWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  imgUrl: StringFilter
  reviewId: StringFilter
}

input ReviewImgScalarWhereWithAggregatesInput {
  AND: [ReviewImgScalarWhereWithAggregatesInput!]
  NOT: [ReviewImgScalarWhereWithAggregatesInput!]
  OR: [ReviewImgScalarWhereWithAggregatesInput!]
  createdAt: DateTimeWithAggregatesFilter
  id: StringWithAggregatesFilter
  imgUrl: StringWithAggregatesFilter
  reviewId: StringWithAggregatesFilter
}

input ReviewImgUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  imgUrl: StringFieldUpdateOperationsInput
  review: ReviewUpdateOneRequiredWithoutImgUrlsNestedInput
}

input ReviewImgUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  imgUrl: StringFieldUpdateOperationsInput
}

input ReviewImgUpdateManyWithWhereWithoutReviewInput {
  data: ReviewImgUpdateManyMutationInput!
  where: ReviewImgScalarWhereInput!
}

input ReviewImgUpdateManyWithoutReviewNestedInput {
  connect: [ReviewImgWhereUniqueInput!]
  connectOrCreate: [ReviewImgCreateOrConnectWithoutReviewInput!]
  create: [ReviewImgCreateWithoutReviewInput!]
  createMany: ReviewImgCreateManyReviewInputEnvelope
  delete: [ReviewImgWhereUniqueInput!]
  deleteMany: [ReviewImgScalarWhereInput!]
  disconnect: [ReviewImgWhereUniqueInput!]
  set: [ReviewImgWhereUniqueInput!]
  update: [ReviewImgUpdateWithWhereUniqueWithoutReviewInput!]
  updateMany: [ReviewImgUpdateManyWithWhereWithoutReviewInput!]
  upsert: [ReviewImgUpsertWithWhereUniqueWithoutReviewInput!]
}

input ReviewImgUpdateWithWhereUniqueWithoutReviewInput {
  data: ReviewImgUpdateWithoutReviewInput!
  where: ReviewImgWhereUniqueInput!
}

input ReviewImgUpdateWithoutReviewInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  imgUrl: StringFieldUpdateOperationsInput
}

input ReviewImgUpsertWithWhereUniqueWithoutReviewInput {
  create: ReviewImgCreateWithoutReviewInput!
  update: ReviewImgUpdateWithoutReviewInput!
  where: ReviewImgWhereUniqueInput!
}

input ReviewImgWhereInput {
  AND: [ReviewImgWhereInput!]
  NOT: [ReviewImgWhereInput!]
  OR: [ReviewImgWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  imgUrl: StringFilter
  review: ReviewRelationFilter
  reviewId: StringFilter
}

input ReviewImgWhereUniqueInput {
  AND: [ReviewImgWhereInput!]
  NOT: [ReviewImgWhereInput!]
  OR: [ReviewImgWhereInput!]
  createdAt: DateTimeFilter
  id: String
  imgUrl: StringFilter
  review: ReviewRelationFilter
  reviewId: StringFilter
}

input ReviewListRelationFilter {
  every: ReviewWhereInput
  none: ReviewWhereInput
  some: ReviewWhereInput
}

type ReviewMaxAggregate {
  chatId: String
  createdAt: Timestamp
  id: String
  text: String
  userId: String
}

input ReviewMaxAggregateInput {
  chatId: Boolean
  createdAt: Boolean
  id: Boolean
  text: Boolean
  userId: Boolean
}

input ReviewMaxOrderByAggregateInput {
  chatId: SortOrder
  createdAt: SortOrder
  id: SortOrder
  text: SortOrder
  userId: SortOrder
}

type ReviewMinAggregate {
  chatId: String
  createdAt: Timestamp
  id: String
  text: String
  userId: String
}

input ReviewMinAggregateInput {
  chatId: Boolean
  createdAt: Boolean
  id: Boolean
  text: Boolean
  userId: Boolean
}

input ReviewMinOrderByAggregateInput {
  chatId: SortOrder
  createdAt: SortOrder
  id: SortOrder
  text: SortOrder
  userId: SortOrder
}

input ReviewNullableRelationFilter {
  is: ReviewWhereInput
  isNot: ReviewWhereInput
}

input ReviewOrderByRelationAggregateInput {
  _count: SortOrder
}

input ReviewOrderByWithAggregationInput {
  _count: ReviewCountOrderByAggregateInput
  _max: ReviewMaxOrderByAggregateInput
  _min: ReviewMinOrderByAggregateInput
  chatId: SortOrder
  createdAt: SortOrder
  id: SortOrder
  text: SortOrder
  userId: SortOrder
}

input ReviewOrderByWithRelationInput {
  chat: ChatOrderByWithRelationInput
  chatId: SortOrder
  createdAt: SortOrder
  id: SortOrder
  imgUrls: ReviewImgOrderByRelationAggregateInput
  text: SortOrder
  user: UserOrderByWithRelationInput
  userId: SortOrder
}

input ReviewRelationFilter {
  is: ReviewWhereInput
  isNot: ReviewWhereInput
}

enum ReviewScalarFieldEnum {
  chatId
  createdAt
  id
  text
  userId
}

input ReviewScalarWhereInput {
  AND: [ReviewScalarWhereInput!]
  NOT: [ReviewScalarWhereInput!]
  OR: [ReviewScalarWhereInput!]
  chatId: StringFilter
  createdAt: DateTimeFilter
  id: StringFilter
  text: StringFilter
  userId: StringFilter
}

input ReviewScalarWhereWithAggregatesInput {
  AND: [ReviewScalarWhereWithAggregatesInput!]
  NOT: [ReviewScalarWhereWithAggregatesInput!]
  OR: [ReviewScalarWhereWithAggregatesInput!]
  chatId: StringWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  id: StringWithAggregatesFilter
  text: StringWithAggregatesFilter
  userId: StringWithAggregatesFilter
}

input ReviewUpdateInput {
  chat: ChatUpdateOneRequiredWithoutReviewNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  imgUrls: ReviewImgUpdateManyWithoutReviewNestedInput
  text: StringFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutReviewsNestedInput
}

input ReviewUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  text: StringFieldUpdateOperationsInput
}

input ReviewUpdateManyWithWhereWithoutUserInput {
  data: ReviewUpdateManyMutationInput!
  where: ReviewScalarWhereInput!
}

input ReviewUpdateManyWithoutUserNestedInput {
  connect: [ReviewWhereUniqueInput!]
  connectOrCreate: [ReviewCreateOrConnectWithoutUserInput!]
  create: [ReviewCreateWithoutUserInput!]
  createMany: ReviewCreateManyUserInputEnvelope
  delete: [ReviewWhereUniqueInput!]
  deleteMany: [ReviewScalarWhereInput!]
  disconnect: [ReviewWhereUniqueInput!]
  set: [ReviewWhereUniqueInput!]
  update: [ReviewUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [ReviewUpdateManyWithWhereWithoutUserInput!]
  upsert: [ReviewUpsertWithWhereUniqueWithoutUserInput!]
}

input ReviewUpdateOneRequiredWithoutImgUrlsNestedInput {
  connect: ReviewWhereUniqueInput
  connectOrCreate: ReviewCreateOrConnectWithoutImgUrlsInput
  create: ReviewCreateWithoutImgUrlsInput
  update: ReviewUpdateToOneWithWhereWithoutImgUrlsInput
  upsert: ReviewUpsertWithoutImgUrlsInput
}

input ReviewUpdateOneWithoutChatNestedInput {
  connect: ReviewWhereUniqueInput
  connectOrCreate: ReviewCreateOrConnectWithoutChatInput
  create: ReviewCreateWithoutChatInput
  delete: ReviewWhereInput
  disconnect: ReviewWhereInput
  update: ReviewUpdateToOneWithWhereWithoutChatInput
  upsert: ReviewUpsertWithoutChatInput
}

input ReviewUpdateToOneWithWhereWithoutChatInput {
  data: ReviewUpdateWithoutChatInput!
  where: ReviewWhereInput
}

input ReviewUpdateToOneWithWhereWithoutImgUrlsInput {
  data: ReviewUpdateWithoutImgUrlsInput!
  where: ReviewWhereInput
}

input ReviewUpdateWithWhereUniqueWithoutUserInput {
  data: ReviewUpdateWithoutUserInput!
  where: ReviewWhereUniqueInput!
}

input ReviewUpdateWithoutChatInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  imgUrls: ReviewImgUpdateManyWithoutReviewNestedInput
  text: StringFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutReviewsNestedInput
}

input ReviewUpdateWithoutImgUrlsInput {
  chat: ChatUpdateOneRequiredWithoutReviewNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  text: StringFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutReviewsNestedInput
}

input ReviewUpdateWithoutUserInput {
  chat: ChatUpdateOneRequiredWithoutReviewNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  imgUrls: ReviewImgUpdateManyWithoutReviewNestedInput
  text: StringFieldUpdateOperationsInput
}

input ReviewUpsertWithWhereUniqueWithoutUserInput {
  create: ReviewCreateWithoutUserInput!
  update: ReviewUpdateWithoutUserInput!
  where: ReviewWhereUniqueInput!
}

input ReviewUpsertWithoutChatInput {
  create: ReviewCreateWithoutChatInput!
  update: ReviewUpdateWithoutChatInput!
  where: ReviewWhereInput
}

input ReviewUpsertWithoutImgUrlsInput {
  create: ReviewCreateWithoutImgUrlsInput!
  update: ReviewUpdateWithoutImgUrlsInput!
  where: ReviewWhereInput
}

input ReviewWhereInput {
  AND: [ReviewWhereInput!]
  NOT: [ReviewWhereInput!]
  OR: [ReviewWhereInput!]
  chat: ChatRelationFilter
  chatId: StringFilter
  createdAt: DateTimeFilter
  id: StringFilter
  imgUrls: ReviewImgListRelationFilter
  text: StringFilter
  user: UserRelationFilter
  userId: StringFilter
}

input ReviewWhereUniqueInput {
  AND: [ReviewWhereInput!]
  NOT: [ReviewWhereInput!]
  OR: [ReviewWhereInput!]
  chat: ChatRelationFilter
  chatId: String
  createdAt: DateTimeFilter
  id: String
  imgUrls: ReviewImgListRelationFilter
  text: StringFilter
  user: UserRelationFilter
  userId: StringFilter
}

type Share {
  product: Product!
  productId: String!
  user: User!
  userId: String!
}

type ShareCountAggregate {
  _all: Int!
  productId: Int!
  userId: Int!
}

input ShareCountAggregateInput {
  _all: Boolean
  productId: Boolean
  userId: Boolean
}

input ShareCountOrderByAggregateInput {
  productId: SortOrder
  userId: SortOrder
}

input ShareCreateInput {
  product: ProductCreateNestedOneWithoutSharesInput!
  user: UserCreateNestedOneWithoutSharesInput!
}

input ShareCreateManyInput {
  productId: String!
  userId: String!
}

input ShareCreateManyProductInput {
  userId: String!
}

input ShareCreateManyProductInputEnvelope {
  data: [ShareCreateManyProductInput!]!
  skipDuplicates: Boolean
}

input ShareCreateManyUserInput {
  productId: String!
}

input ShareCreateManyUserInputEnvelope {
  data: [ShareCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input ShareCreateNestedManyWithoutProductInput {
  connect: [ShareWhereUniqueInput!]
  connectOrCreate: [ShareCreateOrConnectWithoutProductInput!]
  create: [ShareCreateWithoutProductInput!]
  createMany: ShareCreateManyProductInputEnvelope
}

input ShareCreateNestedManyWithoutUserInput {
  connect: [ShareWhereUniqueInput!]
  connectOrCreate: [ShareCreateOrConnectWithoutUserInput!]
  create: [ShareCreateWithoutUserInput!]
  createMany: ShareCreateManyUserInputEnvelope
}

input ShareCreateOrConnectWithoutProductInput {
  create: ShareCreateWithoutProductInput!
  where: ShareWhereUniqueInput!
}

input ShareCreateOrConnectWithoutUserInput {
  create: ShareCreateWithoutUserInput!
  where: ShareWhereUniqueInput!
}

input ShareCreateWithoutProductInput {
  user: UserCreateNestedOneWithoutSharesInput!
}

input ShareCreateWithoutUserInput {
  product: ProductCreateNestedOneWithoutSharesInput!
}

type ShareGroupBy {
  _count: ShareCountAggregate
  _max: ShareMaxAggregate
  _min: ShareMinAggregate
  productId: String!
  userId: String!
}

input ShareListRelationFilter {
  every: ShareWhereInput
  none: ShareWhereInput
  some: ShareWhereInput
}

type ShareMaxAggregate {
  productId: String
  userId: String
}

input ShareMaxAggregateInput {
  productId: Boolean
  userId: Boolean
}

input ShareMaxOrderByAggregateInput {
  productId: SortOrder
  userId: SortOrder
}

type ShareMinAggregate {
  productId: String
  userId: String
}

input ShareMinAggregateInput {
  productId: Boolean
  userId: Boolean
}

input ShareMinOrderByAggregateInput {
  productId: SortOrder
  userId: SortOrder
}

input ShareOrderByRelationAggregateInput {
  _count: SortOrder
}

input ShareOrderByWithAggregationInput {
  _count: ShareCountOrderByAggregateInput
  _max: ShareMaxOrderByAggregateInput
  _min: ShareMinOrderByAggregateInput
  productId: SortOrder
  userId: SortOrder
}

input ShareOrderByWithRelationInput {
  product: ProductOrderByWithRelationInput
  productId: SortOrder
  user: UserOrderByWithRelationInput
  userId: SortOrder
}

enum ShareScalarFieldEnum {
  productId
  userId
}

input ShareScalarWhereInput {
  AND: [ShareScalarWhereInput!]
  NOT: [ShareScalarWhereInput!]
  OR: [ShareScalarWhereInput!]
  productId: StringFilter
  userId: StringFilter
}

input ShareScalarWhereWithAggregatesInput {
  AND: [ShareScalarWhereWithAggregatesInput!]
  NOT: [ShareScalarWhereWithAggregatesInput!]
  OR: [ShareScalarWhereWithAggregatesInput!]
  productId: StringWithAggregatesFilter
  userId: StringWithAggregatesFilter
}

input ShareUncheckedUpdateManyInput {
  productId: StringFieldUpdateOperationsInput
  userId: StringFieldUpdateOperationsInput
}

input ShareUncheckedUpdateManyWithoutProductInput {
  userId: StringFieldUpdateOperationsInput
}

input ShareUncheckedUpdateManyWithoutUserInput {
  productId: StringFieldUpdateOperationsInput
}

input ShareUpdateInput {
  product: ProductUpdateOneRequiredWithoutSharesNestedInput
  user: UserUpdateOneRequiredWithoutSharesNestedInput
}

input ShareUpdateManyWithWhereWithoutProductInput {
  data: ShareUncheckedUpdateManyWithoutProductInput!
  where: ShareScalarWhereInput!
}

input ShareUpdateManyWithWhereWithoutUserInput {
  data: ShareUncheckedUpdateManyWithoutUserInput!
  where: ShareScalarWhereInput!
}

input ShareUpdateManyWithoutProductNestedInput {
  connect: [ShareWhereUniqueInput!]
  connectOrCreate: [ShareCreateOrConnectWithoutProductInput!]
  create: [ShareCreateWithoutProductInput!]
  createMany: ShareCreateManyProductInputEnvelope
  delete: [ShareWhereUniqueInput!]
  deleteMany: [ShareScalarWhereInput!]
  disconnect: [ShareWhereUniqueInput!]
  set: [ShareWhereUniqueInput!]
  update: [ShareUpdateWithWhereUniqueWithoutProductInput!]
  updateMany: [ShareUpdateManyWithWhereWithoutProductInput!]
  upsert: [ShareUpsertWithWhereUniqueWithoutProductInput!]
}

input ShareUpdateManyWithoutUserNestedInput {
  connect: [ShareWhereUniqueInput!]
  connectOrCreate: [ShareCreateOrConnectWithoutUserInput!]
  create: [ShareCreateWithoutUserInput!]
  createMany: ShareCreateManyUserInputEnvelope
  delete: [ShareWhereUniqueInput!]
  deleteMany: [ShareScalarWhereInput!]
  disconnect: [ShareWhereUniqueInput!]
  set: [ShareWhereUniqueInput!]
  update: [ShareUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [ShareUpdateManyWithWhereWithoutUserInput!]
  upsert: [ShareUpsertWithWhereUniqueWithoutUserInput!]
}

input ShareUpdateWithWhereUniqueWithoutProductInput {
  data: ShareUpdateWithoutProductInput!
  where: ShareWhereUniqueInput!
}

input ShareUpdateWithWhereUniqueWithoutUserInput {
  data: ShareUpdateWithoutUserInput!
  where: ShareWhereUniqueInput!
}

input ShareUpdateWithoutProductInput {
  user: UserUpdateOneRequiredWithoutSharesNestedInput
}

input ShareUpdateWithoutUserInput {
  product: ProductUpdateOneRequiredWithoutSharesNestedInput
}

input ShareUpsertWithWhereUniqueWithoutProductInput {
  create: ShareCreateWithoutProductInput!
  update: ShareUpdateWithoutProductInput!
  where: ShareWhereUniqueInput!
}

input ShareUpsertWithWhereUniqueWithoutUserInput {
  create: ShareCreateWithoutUserInput!
  update: ShareUpdateWithoutUserInput!
  where: ShareWhereUniqueInput!
}

input ShareUserIdProductIdCompoundUniqueInput {
  productId: String!
  userId: String!
}

input ShareWhereInput {
  AND: [ShareWhereInput!]
  NOT: [ShareWhereInput!]
  OR: [ShareWhereInput!]
  product: ProductRelationFilter
  productId: StringFilter
  user: UserRelationFilter
  userId: StringFilter
}

input ShareWhereUniqueInput {
  AND: [ShareWhereInput!]
  NOT: [ShareWhereInput!]
  OR: [ShareWhereInput!]
  product: ProductRelationFilter
  productId: StringFilter
  user: UserRelationFilter
  userId: StringFilter
  userId_productId: ShareUserIdProductIdCompoundUniqueInput
}

enum SortOrder {
  asc
  desc
}

input SortOrderInput {
  nulls: NullsOrder
  sort: SortOrder!
}

type State {
  _count: StateCount!
  cities: [City!]
  country: Country!
  countryId: String!
  id: ID!
  name: String!
  products: [Product!]
}

type StateCount {
  cities: Int!
  products: Int!
}

type StateCountAggregate {
  _all: Int!
  countryId: Int!
  id: Int!
  name: Int!
}

input StateCountAggregateInput {
  _all: Boolean
  countryId: Boolean
  id: Boolean
  name: Boolean
}

input StateCountOrderByAggregateInput {
  countryId: SortOrder
  id: SortOrder
  name: SortOrder
}

input StateCreateInput {
  cities: CityCreateNestedManyWithoutStateInput
  country: CountryCreateNestedOneWithoutStatesInput!
  id: String
  name: String!
  products: ProductCreateNestedManyWithoutStateInput
}

input StateCreateManyCountryInput {
  id: String
  name: String!
}

input StateCreateManyCountryInputEnvelope {
  data: [StateCreateManyCountryInput!]!
  skipDuplicates: Boolean
}

input StateCreateManyInput {
  countryId: String!
  id: String
  name: String!
}

input StateCreateNestedManyWithoutCountryInput {
  connect: [StateWhereUniqueInput!]
  connectOrCreate: [StateCreateOrConnectWithoutCountryInput!]
  create: [StateCreateWithoutCountryInput!]
  createMany: StateCreateManyCountryInputEnvelope
}

input StateCreateNestedOneWithoutCitiesInput {
  connect: StateWhereUniqueInput
  connectOrCreate: StateCreateOrConnectWithoutCitiesInput
  create: StateCreateWithoutCitiesInput
}

input StateCreateNestedOneWithoutProductsInput {
  connect: StateWhereUniqueInput
  connectOrCreate: StateCreateOrConnectWithoutProductsInput
  create: StateCreateWithoutProductsInput
}

input StateCreateOrConnectWithoutCitiesInput {
  create: StateCreateWithoutCitiesInput!
  where: StateWhereUniqueInput!
}

input StateCreateOrConnectWithoutCountryInput {
  create: StateCreateWithoutCountryInput!
  where: StateWhereUniqueInput!
}

input StateCreateOrConnectWithoutProductsInput {
  create: StateCreateWithoutProductsInput!
  where: StateWhereUniqueInput!
}

input StateCreateWithoutCitiesInput {
  country: CountryCreateNestedOneWithoutStatesInput!
  id: String
  name: String!
  products: ProductCreateNestedManyWithoutStateInput
}

input StateCreateWithoutCountryInput {
  cities: CityCreateNestedManyWithoutStateInput
  id: String
  name: String!
  products: ProductCreateNestedManyWithoutStateInput
}

input StateCreateWithoutProductsInput {
  cities: CityCreateNestedManyWithoutStateInput
  country: CountryCreateNestedOneWithoutStatesInput!
  id: String
  name: String!
}

type StateGroupBy {
  _count: StateCountAggregate
  _max: StateMaxAggregate
  _min: StateMinAggregate
  countryId: String!
  id: String!
  name: String!
}

input StateListRelationFilter {
  every: StateWhereInput
  none: StateWhereInput
  some: StateWhereInput
}

type StateMaxAggregate {
  countryId: String
  id: String
  name: String
}

input StateMaxAggregateInput {
  countryId: Boolean
  id: Boolean
  name: Boolean
}

input StateMaxOrderByAggregateInput {
  countryId: SortOrder
  id: SortOrder
  name: SortOrder
}

type StateMinAggregate {
  countryId: String
  id: String
  name: String
}

input StateMinAggregateInput {
  countryId: Boolean
  id: Boolean
  name: Boolean
}

input StateMinOrderByAggregateInput {
  countryId: SortOrder
  id: SortOrder
  name: SortOrder
}

input StateNullableRelationFilter {
  is: StateWhereInput
  isNot: StateWhereInput
}

input StateOrderByRelationAggregateInput {
  _count: SortOrder
}

input StateOrderByWithAggregationInput {
  _count: StateCountOrderByAggregateInput
  _max: StateMaxOrderByAggregateInput
  _min: StateMinOrderByAggregateInput
  countryId: SortOrder
  id: SortOrder
  name: SortOrder
}

input StateOrderByWithRelationInput {
  cities: CityOrderByRelationAggregateInput
  country: CountryOrderByWithRelationInput
  countryId: SortOrder
  id: SortOrder
  name: SortOrder
  products: ProductOrderByRelationAggregateInput
}

input StateRelationFilter {
  is: StateWhereInput
  isNot: StateWhereInput
}

enum StateScalarFieldEnum {
  countryId
  id
  name
}

input StateScalarWhereInput {
  AND: [StateScalarWhereInput!]
  NOT: [StateScalarWhereInput!]
  OR: [StateScalarWhereInput!]
  countryId: StringFilter
  id: StringFilter
  name: StringFilter
}

input StateScalarWhereWithAggregatesInput {
  AND: [StateScalarWhereWithAggregatesInput!]
  NOT: [StateScalarWhereWithAggregatesInput!]
  OR: [StateScalarWhereWithAggregatesInput!]
  countryId: StringWithAggregatesFilter
  id: StringWithAggregatesFilter
  name: StringWithAggregatesFilter
}

input StateUpdateInput {
  cities: CityUpdateManyWithoutStateNestedInput
  country: CountryUpdateOneRequiredWithoutStatesNestedInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  products: ProductUpdateManyWithoutStateNestedInput
}

input StateUpdateManyMutationInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
}

input StateUpdateManyWithWhereWithoutCountryInput {
  data: StateUpdateManyMutationInput!
  where: StateScalarWhereInput!
}

input StateUpdateManyWithoutCountryNestedInput {
  connect: [StateWhereUniqueInput!]
  connectOrCreate: [StateCreateOrConnectWithoutCountryInput!]
  create: [StateCreateWithoutCountryInput!]
  createMany: StateCreateManyCountryInputEnvelope
  delete: [StateWhereUniqueInput!]
  deleteMany: [StateScalarWhereInput!]
  disconnect: [StateWhereUniqueInput!]
  set: [StateWhereUniqueInput!]
  update: [StateUpdateWithWhereUniqueWithoutCountryInput!]
  updateMany: [StateUpdateManyWithWhereWithoutCountryInput!]
  upsert: [StateUpsertWithWhereUniqueWithoutCountryInput!]
}

input StateUpdateOneRequiredWithoutCitiesNestedInput {
  connect: StateWhereUniqueInput
  connectOrCreate: StateCreateOrConnectWithoutCitiesInput
  create: StateCreateWithoutCitiesInput
  update: StateUpdateToOneWithWhereWithoutCitiesInput
  upsert: StateUpsertWithoutCitiesInput
}

input StateUpdateOneWithoutProductsNestedInput {
  connect: StateWhereUniqueInput
  connectOrCreate: StateCreateOrConnectWithoutProductsInput
  create: StateCreateWithoutProductsInput
  delete: StateWhereInput
  disconnect: StateWhereInput
  update: StateUpdateToOneWithWhereWithoutProductsInput
  upsert: StateUpsertWithoutProductsInput
}

input StateUpdateToOneWithWhereWithoutCitiesInput {
  data: StateUpdateWithoutCitiesInput!
  where: StateWhereInput
}

input StateUpdateToOneWithWhereWithoutProductsInput {
  data: StateUpdateWithoutProductsInput!
  where: StateWhereInput
}

input StateUpdateWithWhereUniqueWithoutCountryInput {
  data: StateUpdateWithoutCountryInput!
  where: StateWhereUniqueInput!
}

input StateUpdateWithoutCitiesInput {
  country: CountryUpdateOneRequiredWithoutStatesNestedInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  products: ProductUpdateManyWithoutStateNestedInput
}

input StateUpdateWithoutCountryInput {
  cities: CityUpdateManyWithoutStateNestedInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  products: ProductUpdateManyWithoutStateNestedInput
}

input StateUpdateWithoutProductsInput {
  cities: CityUpdateManyWithoutStateNestedInput
  country: CountryUpdateOneRequiredWithoutStatesNestedInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
}

input StateUpsertWithWhereUniqueWithoutCountryInput {
  create: StateCreateWithoutCountryInput!
  update: StateUpdateWithoutCountryInput!
  where: StateWhereUniqueInput!
}

input StateUpsertWithoutCitiesInput {
  create: StateCreateWithoutCitiesInput!
  update: StateUpdateWithoutCitiesInput!
  where: StateWhereInput
}

input StateUpsertWithoutProductsInput {
  create: StateCreateWithoutProductsInput!
  update: StateUpdateWithoutProductsInput!
  where: StateWhereInput
}

input StateWhereInput {
  AND: [StateWhereInput!]
  NOT: [StateWhereInput!]
  OR: [StateWhereInput!]
  cities: CityListRelationFilter
  country: CountryRelationFilter
  countryId: StringFilter
  id: StringFilter
  name: StringFilter
  products: ProductListRelationFilter
}

input StateWhereUniqueInput {
  AND: [StateWhereInput!]
  NOT: [StateWhereInput!]
  OR: [StateWhereInput!]
  cities: CityListRelationFilter
  country: CountryRelationFilter
  countryId: StringFilter
  id: String
  name: StringFilter
  products: ProductListRelationFilter
}

input StringFieldUpdateOperationsInput {
  set: String
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedStringNullableFilter
  _min: NestedStringNullableFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringNullableWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

input StringWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedStringFilter
  _min: NestedStringFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

type SubCategory {
  Product: [Product!]
  _count: SubCategoryCount!
  category: Category!
  categoryId: String!
  createdAt: Timestamp!
  id: ID!
  name: String!
  updatedAt: Timestamp
}

type SubCategoryCount {
  Product: Int!
}

type SubCategoryCountAggregate {
  _all: Int!
  categoryId: Int!
  createdAt: Int!
  id: Int!
  name: Int!
  updatedAt: Int!
}

input SubCategoryCountAggregateInput {
  _all: Boolean
  categoryId: Boolean
  createdAt: Boolean
  id: Boolean
  name: Boolean
  updatedAt: Boolean
}

input SubCategoryCountOrderByAggregateInput {
  categoryId: SortOrder
  createdAt: SortOrder
  id: SortOrder
  name: SortOrder
  updatedAt: SortOrder
}

input SubCategoryCreateInput {
  Product: ProductCreateNestedManyWithoutSub_categoryInput
  category: CategoryCreateNestedOneWithoutSubCategoryInput!
  createdAt: Timestamp
  id: String
  name: String!
  updatedAt: Timestamp
}

input SubCategoryCreateManyCategoryInput {
  createdAt: Timestamp
  id: String
  name: String!
  updatedAt: Timestamp
}

input SubCategoryCreateManyCategoryInputEnvelope {
  data: [SubCategoryCreateManyCategoryInput!]!
  skipDuplicates: Boolean
}

input SubCategoryCreateManyInput {
  categoryId: String!
  createdAt: Timestamp
  id: String
  name: String!
  updatedAt: Timestamp
}

input SubCategoryCreateNestedManyWithoutCategoryInput {
  connect: [SubCategoryWhereUniqueInput!]
  connectOrCreate: [SubCategoryCreateOrConnectWithoutCategoryInput!]
  create: [SubCategoryCreateWithoutCategoryInput!]
  createMany: SubCategoryCreateManyCategoryInputEnvelope
}

input SubCategoryCreateNestedOneWithoutProductInput {
  connect: SubCategoryWhereUniqueInput
  connectOrCreate: SubCategoryCreateOrConnectWithoutProductInput
  create: SubCategoryCreateWithoutProductInput
}

input SubCategoryCreateOrConnectWithoutCategoryInput {
  create: SubCategoryCreateWithoutCategoryInput!
  where: SubCategoryWhereUniqueInput!
}

input SubCategoryCreateOrConnectWithoutProductInput {
  create: SubCategoryCreateWithoutProductInput!
  where: SubCategoryWhereUniqueInput!
}

input SubCategoryCreateWithoutCategoryInput {
  Product: ProductCreateNestedManyWithoutSub_categoryInput
  createdAt: Timestamp
  id: String
  name: String!
  updatedAt: Timestamp
}

input SubCategoryCreateWithoutProductInput {
  category: CategoryCreateNestedOneWithoutSubCategoryInput!
  createdAt: Timestamp
  id: String
  name: String!
  updatedAt: Timestamp
}

type SubCategoryGroupBy {
  _count: SubCategoryCountAggregate
  _max: SubCategoryMaxAggregate
  _min: SubCategoryMinAggregate
  categoryId: String!
  createdAt: Timestamp!
  id: String!
  name: String!
  updatedAt: Timestamp
}

input SubCategoryListRelationFilter {
  every: SubCategoryWhereInput
  none: SubCategoryWhereInput
  some: SubCategoryWhereInput
}

type SubCategoryMaxAggregate {
  categoryId: String
  createdAt: Timestamp
  id: String
  name: String
  updatedAt: Timestamp
}

input SubCategoryMaxAggregateInput {
  categoryId: Boolean
  createdAt: Boolean
  id: Boolean
  name: Boolean
  updatedAt: Boolean
}

input SubCategoryMaxOrderByAggregateInput {
  categoryId: SortOrder
  createdAt: SortOrder
  id: SortOrder
  name: SortOrder
  updatedAt: SortOrder
}

type SubCategoryMinAggregate {
  categoryId: String
  createdAt: Timestamp
  id: String
  name: String
  updatedAt: Timestamp
}

input SubCategoryMinAggregateInput {
  categoryId: Boolean
  createdAt: Boolean
  id: Boolean
  name: Boolean
  updatedAt: Boolean
}

input SubCategoryMinOrderByAggregateInput {
  categoryId: SortOrder
  createdAt: SortOrder
  id: SortOrder
  name: SortOrder
  updatedAt: SortOrder
}

input SubCategoryOrderByRelationAggregateInput {
  _count: SortOrder
}

input SubCategoryOrderByWithAggregationInput {
  _count: SubCategoryCountOrderByAggregateInput
  _max: SubCategoryMaxOrderByAggregateInput
  _min: SubCategoryMinOrderByAggregateInput
  categoryId: SortOrder
  createdAt: SortOrder
  id: SortOrder
  name: SortOrder
  updatedAt: SortOrderInput
}

input SubCategoryOrderByWithRelationInput {
  Product: ProductOrderByRelationAggregateInput
  category: CategoryOrderByWithRelationInput
  categoryId: SortOrder
  createdAt: SortOrder
  id: SortOrder
  name: SortOrder
  updatedAt: SortOrderInput
}

input SubCategoryRelationFilter {
  is: SubCategoryWhereInput
  isNot: SubCategoryWhereInput
}

enum SubCategoryScalarFieldEnum {
  categoryId
  createdAt
  id
  name
  updatedAt
}

input SubCategoryScalarWhereInput {
  AND: [SubCategoryScalarWhereInput!]
  NOT: [SubCategoryScalarWhereInput!]
  OR: [SubCategoryScalarWhereInput!]
  categoryId: StringFilter
  createdAt: DateTimeFilter
  id: StringFilter
  name: StringFilter
  updatedAt: DateTimeNullableFilter
}

input SubCategoryScalarWhereWithAggregatesInput {
  AND: [SubCategoryScalarWhereWithAggregatesInput!]
  NOT: [SubCategoryScalarWhereWithAggregatesInput!]
  OR: [SubCategoryScalarWhereWithAggregatesInput!]
  categoryId: StringWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  id: StringWithAggregatesFilter
  name: StringWithAggregatesFilter
  updatedAt: DateTimeNullableWithAggregatesFilter
}

input SubCategoryUpdateInput {
  Product: ProductUpdateManyWithoutSub_categoryNestedInput
  category: CategoryUpdateOneRequiredWithoutSubCategoryNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
}

input SubCategoryUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
}

input SubCategoryUpdateManyWithWhereWithoutCategoryInput {
  data: SubCategoryUpdateManyMutationInput!
  where: SubCategoryScalarWhereInput!
}

input SubCategoryUpdateManyWithoutCategoryNestedInput {
  connect: [SubCategoryWhereUniqueInput!]
  connectOrCreate: [SubCategoryCreateOrConnectWithoutCategoryInput!]
  create: [SubCategoryCreateWithoutCategoryInput!]
  createMany: SubCategoryCreateManyCategoryInputEnvelope
  delete: [SubCategoryWhereUniqueInput!]
  deleteMany: [SubCategoryScalarWhereInput!]
  disconnect: [SubCategoryWhereUniqueInput!]
  set: [SubCategoryWhereUniqueInput!]
  update: [SubCategoryUpdateWithWhereUniqueWithoutCategoryInput!]
  updateMany: [SubCategoryUpdateManyWithWhereWithoutCategoryInput!]
  upsert: [SubCategoryUpsertWithWhereUniqueWithoutCategoryInput!]
}

input SubCategoryUpdateOneRequiredWithoutProductNestedInput {
  connect: SubCategoryWhereUniqueInput
  connectOrCreate: SubCategoryCreateOrConnectWithoutProductInput
  create: SubCategoryCreateWithoutProductInput
  update: SubCategoryUpdateToOneWithWhereWithoutProductInput
  upsert: SubCategoryUpsertWithoutProductInput
}

input SubCategoryUpdateToOneWithWhereWithoutProductInput {
  data: SubCategoryUpdateWithoutProductInput!
  where: SubCategoryWhereInput
}

input SubCategoryUpdateWithWhereUniqueWithoutCategoryInput {
  data: SubCategoryUpdateWithoutCategoryInput!
  where: SubCategoryWhereUniqueInput!
}

input SubCategoryUpdateWithoutCategoryInput {
  Product: ProductUpdateManyWithoutSub_categoryNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
}

input SubCategoryUpdateWithoutProductInput {
  category: CategoryUpdateOneRequiredWithoutSubCategoryNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
}

input SubCategoryUpsertWithWhereUniqueWithoutCategoryInput {
  create: SubCategoryCreateWithoutCategoryInput!
  update: SubCategoryUpdateWithoutCategoryInput!
  where: SubCategoryWhereUniqueInput!
}

input SubCategoryUpsertWithoutProductInput {
  create: SubCategoryCreateWithoutProductInput!
  update: SubCategoryUpdateWithoutProductInput!
  where: SubCategoryWhereInput
}

input SubCategoryWhereInput {
  AND: [SubCategoryWhereInput!]
  NOT: [SubCategoryWhereInput!]
  OR: [SubCategoryWhereInput!]
  Product: ProductListRelationFilter
  category: CategoryRelationFilter
  categoryId: StringFilter
  createdAt: DateTimeFilter
  id: StringFilter
  name: StringFilter
  updatedAt: DateTimeNullableFilter
}

input SubCategoryWhereUniqueInput {
  AND: [SubCategoryWhereInput!]
  NOT: [SubCategoryWhereInput!]
  OR: [SubCategoryWhereInput!]
  Product: ProductListRelationFilter
  category: CategoryRelationFilter
  categoryId: StringFilter
  createdAt: DateTimeFilter
  id: String
  name: StringFilter
  updatedAt: DateTimeNullableFilter
}

type Subscription {
  createdAt: Timestamp!
  endAt: Timestamp
  id: ID!
  isActive: Boolean!
  type: SubscriptionType!
  user: User!
  userId: String!
}

type SubscriptionCountAggregate {
  _all: Int!
  createdAt: Int!
  endAt: Int!
  id: Int!
  isActive: Int!
  type: Int!
  userId: Int!
}

input SubscriptionCountAggregateInput {
  _all: Boolean
  createdAt: Boolean
  endAt: Boolean
  id: Boolean
  isActive: Boolean
  type: Boolean
  userId: Boolean
}

input SubscriptionCountOrderByAggregateInput {
  createdAt: SortOrder
  endAt: SortOrder
  id: SortOrder
  isActive: SortOrder
  type: SortOrder
  userId: SortOrder
}

input SubscriptionCreateInput {
  createdAt: Timestamp
  endAt: Timestamp
  id: String
  isActive: Boolean
  type: SubscriptionType
  user: UserCreateNestedOneWithoutSubscriptionsInput!
}

input SubscriptionCreateManyInput {
  createdAt: Timestamp
  endAt: Timestamp
  id: String
  isActive: Boolean
  type: SubscriptionType
  userId: String!
}

input SubscriptionCreateManyUserInput {
  createdAt: Timestamp
  endAt: Timestamp
  id: String
  isActive: Boolean
  type: SubscriptionType
}

input SubscriptionCreateManyUserInputEnvelope {
  data: [SubscriptionCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input SubscriptionCreateNestedManyWithoutUserInput {
  connect: [SubscriptionWhereUniqueInput!]
  connectOrCreate: [SubscriptionCreateOrConnectWithoutUserInput!]
  create: [SubscriptionCreateWithoutUserInput!]
  createMany: SubscriptionCreateManyUserInputEnvelope
}

input SubscriptionCreateOrConnectWithoutUserInput {
  create: SubscriptionCreateWithoutUserInput!
  where: SubscriptionWhereUniqueInput!
}

input SubscriptionCreateWithoutUserInput {
  createdAt: Timestamp
  endAt: Timestamp
  id: String
  isActive: Boolean
  type: SubscriptionType
}

type SubscriptionGroupBy {
  _count: SubscriptionCountAggregate
  _max: SubscriptionMaxAggregate
  _min: SubscriptionMinAggregate
  createdAt: Timestamp!
  endAt: Timestamp
  id: String!
  isActive: Boolean!
  type: SubscriptionType!
  userId: String!
}

input SubscriptionListRelationFilter {
  every: SubscriptionWhereInput
  none: SubscriptionWhereInput
  some: SubscriptionWhereInput
}

type SubscriptionMaxAggregate {
  createdAt: Timestamp
  endAt: Timestamp
  id: String
  isActive: Boolean
  type: SubscriptionType
  userId: String
}

input SubscriptionMaxAggregateInput {
  createdAt: Boolean
  endAt: Boolean
  id: Boolean
  isActive: Boolean
  type: Boolean
  userId: Boolean
}

input SubscriptionMaxOrderByAggregateInput {
  createdAt: SortOrder
  endAt: SortOrder
  id: SortOrder
  isActive: SortOrder
  type: SortOrder
  userId: SortOrder
}

type SubscriptionMinAggregate {
  createdAt: Timestamp
  endAt: Timestamp
  id: String
  isActive: Boolean
  type: SubscriptionType
  userId: String
}

input SubscriptionMinAggregateInput {
  createdAt: Boolean
  endAt: Boolean
  id: Boolean
  isActive: Boolean
  type: Boolean
  userId: Boolean
}

input SubscriptionMinOrderByAggregateInput {
  createdAt: SortOrder
  endAt: SortOrder
  id: SortOrder
  isActive: SortOrder
  type: SortOrder
  userId: SortOrder
}

input SubscriptionOrderByRelationAggregateInput {
  _count: SortOrder
}

input SubscriptionOrderByWithAggregationInput {
  _count: SubscriptionCountOrderByAggregateInput
  _max: SubscriptionMaxOrderByAggregateInput
  _min: SubscriptionMinOrderByAggregateInput
  createdAt: SortOrder
  endAt: SortOrderInput
  id: SortOrder
  isActive: SortOrder
  type: SortOrder
  userId: SortOrder
}

input SubscriptionOrderByWithRelationInput {
  createdAt: SortOrder
  endAt: SortOrderInput
  id: SortOrder
  isActive: SortOrder
  type: SortOrder
  user: UserOrderByWithRelationInput
  userId: SortOrder
}

enum SubscriptionScalarFieldEnum {
  createdAt
  endAt
  id
  isActive
  type
  userId
}

input SubscriptionScalarWhereInput {
  AND: [SubscriptionScalarWhereInput!]
  NOT: [SubscriptionScalarWhereInput!]
  OR: [SubscriptionScalarWhereInput!]
  createdAt: DateTimeFilter
  endAt: DateTimeNullableFilter
  id: StringFilter
  isActive: BoolFilter
  type: EnumSubscriptionTypeFilter
  userId: StringFilter
}

input SubscriptionScalarWhereWithAggregatesInput {
  AND: [SubscriptionScalarWhereWithAggregatesInput!]
  NOT: [SubscriptionScalarWhereWithAggregatesInput!]
  OR: [SubscriptionScalarWhereWithAggregatesInput!]
  createdAt: DateTimeWithAggregatesFilter
  endAt: DateTimeNullableWithAggregatesFilter
  id: StringWithAggregatesFilter
  isActive: BoolWithAggregatesFilter
  type: EnumSubscriptionTypeWithAggregatesFilter
  userId: StringWithAggregatesFilter
}

enum SubscriptionType {
  BRONZE
  GOLD
  NORMAL
  PLATINUM
  SILVER
}

input SubscriptionUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  endAt: NullableDateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  isActive: BoolFieldUpdateOperationsInput
  type: EnumSubscriptionTypeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutSubscriptionsNestedInput
}

input SubscriptionUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  endAt: NullableDateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  isActive: BoolFieldUpdateOperationsInput
  type: EnumSubscriptionTypeFieldUpdateOperationsInput
}

input SubscriptionUpdateManyWithWhereWithoutUserInput {
  data: SubscriptionUpdateManyMutationInput!
  where: SubscriptionScalarWhereInput!
}

input SubscriptionUpdateManyWithoutUserNestedInput {
  connect: [SubscriptionWhereUniqueInput!]
  connectOrCreate: [SubscriptionCreateOrConnectWithoutUserInput!]
  create: [SubscriptionCreateWithoutUserInput!]
  createMany: SubscriptionCreateManyUserInputEnvelope
  delete: [SubscriptionWhereUniqueInput!]
  deleteMany: [SubscriptionScalarWhereInput!]
  disconnect: [SubscriptionWhereUniqueInput!]
  set: [SubscriptionWhereUniqueInput!]
  update: [SubscriptionUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [SubscriptionUpdateManyWithWhereWithoutUserInput!]
  upsert: [SubscriptionUpsertWithWhereUniqueWithoutUserInput!]
}

input SubscriptionUpdateWithWhereUniqueWithoutUserInput {
  data: SubscriptionUpdateWithoutUserInput!
  where: SubscriptionWhereUniqueInput!
}

input SubscriptionUpdateWithoutUserInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  endAt: NullableDateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  isActive: BoolFieldUpdateOperationsInput
  type: EnumSubscriptionTypeFieldUpdateOperationsInput
}

input SubscriptionUpsertWithWhereUniqueWithoutUserInput {
  create: SubscriptionCreateWithoutUserInput!
  update: SubscriptionUpdateWithoutUserInput!
  where: SubscriptionWhereUniqueInput!
}

input SubscriptionWhereInput {
  AND: [SubscriptionWhereInput!]
  NOT: [SubscriptionWhereInput!]
  OR: [SubscriptionWhereInput!]
  createdAt: DateTimeFilter
  endAt: DateTimeNullableFilter
  id: StringFilter
  isActive: BoolFilter
  type: EnumSubscriptionTypeFilter
  user: UserRelationFilter
  userId: StringFilter
}

input SubscriptionWhereUniqueInput {
  AND: [SubscriptionWhereInput!]
  NOT: [SubscriptionWhereInput!]
  OR: [SubscriptionWhereInput!]
  createdAt: DateTimeFilter
  endAt: DateTimeNullableFilter
  id: String
  isActive: BoolFilter
  type: EnumSubscriptionTypeFilter
  user: UserRelationFilter
  userId: StringFilter
}

"""
`Date` type as integer. Type represents date and time as number of milliseconds from start of UNIX epoch.
"""
scalar Timestamp

type User {
  _count: UserCount!
  chatsFrom: [Chat!]
  chatsTo: [Chat!]
  comments: [Comment!]
  createdAt: Timestamp!
  email: String!
  favorites: [Favorite!]
  id: ID!
  isPremium: Boolean!
  isStore: Boolean!
  messages: [Message!]
  name: String
  notifications: [Notification!]
  phone: String
  products: [Product!]
  replies: [Reply!]
  reports: [Report!]
  reviews: [Review!]
  role: String!
  shares: [Share!]
  subscriptions: [Subscription!]
  updatedAt: Timestamp
}

type UserCount {
  chatsFrom: Int!
  chatsTo: Int!
  comments: Int!
  favorites: Int!
  messages: Int!
  notifications: Int!
  products: Int!
  replies: Int!
  reports: Int!
  reviews: Int!
  shares: Int!
  subscriptions: Int!
}

type UserCountAggregate {
  _all: Int!
  createdAt: Int!
  email: Int!
  id: Int!
  isPremium: Int!
  isStore: Int!
  name: Int!
  phone: Int!
  role: Int!
  updatedAt: Int!
}

input UserCountAggregateInput {
  _all: Boolean
  createdAt: Boolean
  email: Boolean
  id: Boolean
  isPremium: Boolean
  isStore: Boolean
  name: Boolean
  phone: Boolean
  role: Boolean
  updatedAt: Boolean
}

input UserCountOrderByAggregateInput {
  createdAt: SortOrder
  email: SortOrder
  id: SortOrder
  isPremium: SortOrder
  isStore: SortOrder
  name: SortOrder
  phone: SortOrder
  role: SortOrder
  updatedAt: SortOrder
}

input UserCreateInput {
  chatsFrom: ChatCreateNestedManyWithoutUserFromInput
  chatsTo: ChatCreateNestedManyWithoutUserToInput
  comments: CommentCreateNestedManyWithoutUserInput
  createdAt: Timestamp
  email: String!
  favorites: FavoriteCreateNestedManyWithoutUserInput
  id: String
  isPremium: Boolean
  isStore: Boolean
  messages: MessageCreateNestedManyWithoutUserInput
  name: String
  notifications: NotificationCreateNestedManyWithoutUserInput
  phone: String
  products: ProductCreateNestedManyWithoutUserInput
  replies: ReplyCreateNestedManyWithoutUserInput
  reports: ReportCreateNestedManyWithoutUserInput
  reviews: ReviewCreateNestedManyWithoutUserInput
  role: String
  shares: ShareCreateNestedManyWithoutUserInput
  subscriptions: SubscriptionCreateNestedManyWithoutUserInput
  updatedAt: Timestamp
}

input UserCreateManyInput {
  createdAt: Timestamp
  email: String!
  id: String
  isPremium: Boolean
  isStore: Boolean
  name: String
  phone: String
  role: String
  updatedAt: Timestamp
}

input UserCreateNestedOneWithoutChatsFromInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutChatsFromInput
  create: UserCreateWithoutChatsFromInput
}

input UserCreateNestedOneWithoutChatsToInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutChatsToInput
  create: UserCreateWithoutChatsToInput
}

input UserCreateNestedOneWithoutCommentsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutCommentsInput
  create: UserCreateWithoutCommentsInput
}

input UserCreateNestedOneWithoutFavoritesInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutFavoritesInput
  create: UserCreateWithoutFavoritesInput
}

input UserCreateNestedOneWithoutMessagesInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutMessagesInput
  create: UserCreateWithoutMessagesInput
}

input UserCreateNestedOneWithoutNotificationsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutNotificationsInput
  create: UserCreateWithoutNotificationsInput
}

input UserCreateNestedOneWithoutProductsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutProductsInput
  create: UserCreateWithoutProductsInput
}

input UserCreateNestedOneWithoutRepliesInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutRepliesInput
  create: UserCreateWithoutRepliesInput
}

input UserCreateNestedOneWithoutReportsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutReportsInput
  create: UserCreateWithoutReportsInput
}

input UserCreateNestedOneWithoutReviewsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutReviewsInput
  create: UserCreateWithoutReviewsInput
}

input UserCreateNestedOneWithoutSharesInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutSharesInput
  create: UserCreateWithoutSharesInput
}

input UserCreateNestedOneWithoutSubscriptionsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutSubscriptionsInput
  create: UserCreateWithoutSubscriptionsInput
}

input UserCreateOrConnectWithoutChatsFromInput {
  create: UserCreateWithoutChatsFromInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutChatsToInput {
  create: UserCreateWithoutChatsToInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutCommentsInput {
  create: UserCreateWithoutCommentsInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutFavoritesInput {
  create: UserCreateWithoutFavoritesInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutMessagesInput {
  create: UserCreateWithoutMessagesInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutNotificationsInput {
  create: UserCreateWithoutNotificationsInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutProductsInput {
  create: UserCreateWithoutProductsInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutRepliesInput {
  create: UserCreateWithoutRepliesInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutReportsInput {
  create: UserCreateWithoutReportsInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutReviewsInput {
  create: UserCreateWithoutReviewsInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutSharesInput {
  create: UserCreateWithoutSharesInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutSubscriptionsInput {
  create: UserCreateWithoutSubscriptionsInput!
  where: UserWhereUniqueInput!
}

input UserCreateWithoutChatsFromInput {
  chatsTo: ChatCreateNestedManyWithoutUserToInput
  comments: CommentCreateNestedManyWithoutUserInput
  createdAt: Timestamp
  email: String!
  favorites: FavoriteCreateNestedManyWithoutUserInput
  id: String
  isPremium: Boolean
  isStore: Boolean
  messages: MessageCreateNestedManyWithoutUserInput
  name: String
  notifications: NotificationCreateNestedManyWithoutUserInput
  phone: String
  products: ProductCreateNestedManyWithoutUserInput
  replies: ReplyCreateNestedManyWithoutUserInput
  reports: ReportCreateNestedManyWithoutUserInput
  reviews: ReviewCreateNestedManyWithoutUserInput
  role: String
  shares: ShareCreateNestedManyWithoutUserInput
  subscriptions: SubscriptionCreateNestedManyWithoutUserInput
  updatedAt: Timestamp
}

input UserCreateWithoutChatsToInput {
  chatsFrom: ChatCreateNestedManyWithoutUserFromInput
  comments: CommentCreateNestedManyWithoutUserInput
  createdAt: Timestamp
  email: String!
  favorites: FavoriteCreateNestedManyWithoutUserInput
  id: String
  isPremium: Boolean
  isStore: Boolean
  messages: MessageCreateNestedManyWithoutUserInput
  name: String
  notifications: NotificationCreateNestedManyWithoutUserInput
  phone: String
  products: ProductCreateNestedManyWithoutUserInput
  replies: ReplyCreateNestedManyWithoutUserInput
  reports: ReportCreateNestedManyWithoutUserInput
  reviews: ReviewCreateNestedManyWithoutUserInput
  role: String
  shares: ShareCreateNestedManyWithoutUserInput
  subscriptions: SubscriptionCreateNestedManyWithoutUserInput
  updatedAt: Timestamp
}

input UserCreateWithoutCommentsInput {
  chatsFrom: ChatCreateNestedManyWithoutUserFromInput
  chatsTo: ChatCreateNestedManyWithoutUserToInput
  createdAt: Timestamp
  email: String!
  favorites: FavoriteCreateNestedManyWithoutUserInput
  id: String
  isPremium: Boolean
  isStore: Boolean
  messages: MessageCreateNestedManyWithoutUserInput
  name: String
  notifications: NotificationCreateNestedManyWithoutUserInput
  phone: String
  products: ProductCreateNestedManyWithoutUserInput
  replies: ReplyCreateNestedManyWithoutUserInput
  reports: ReportCreateNestedManyWithoutUserInput
  reviews: ReviewCreateNestedManyWithoutUserInput
  role: String
  shares: ShareCreateNestedManyWithoutUserInput
  subscriptions: SubscriptionCreateNestedManyWithoutUserInput
  updatedAt: Timestamp
}

input UserCreateWithoutFavoritesInput {
  chatsFrom: ChatCreateNestedManyWithoutUserFromInput
  chatsTo: ChatCreateNestedManyWithoutUserToInput
  comments: CommentCreateNestedManyWithoutUserInput
  createdAt: Timestamp
  email: String!
  id: String
  isPremium: Boolean
  isStore: Boolean
  messages: MessageCreateNestedManyWithoutUserInput
  name: String
  notifications: NotificationCreateNestedManyWithoutUserInput
  phone: String
  products: ProductCreateNestedManyWithoutUserInput
  replies: ReplyCreateNestedManyWithoutUserInput
  reports: ReportCreateNestedManyWithoutUserInput
  reviews: ReviewCreateNestedManyWithoutUserInput
  role: String
  shares: ShareCreateNestedManyWithoutUserInput
  subscriptions: SubscriptionCreateNestedManyWithoutUserInput
  updatedAt: Timestamp
}

input UserCreateWithoutMessagesInput {
  chatsFrom: ChatCreateNestedManyWithoutUserFromInput
  chatsTo: ChatCreateNestedManyWithoutUserToInput
  comments: CommentCreateNestedManyWithoutUserInput
  createdAt: Timestamp
  email: String!
  favorites: FavoriteCreateNestedManyWithoutUserInput
  id: String
  isPremium: Boolean
  isStore: Boolean
  name: String
  notifications: NotificationCreateNestedManyWithoutUserInput
  phone: String
  products: ProductCreateNestedManyWithoutUserInput
  replies: ReplyCreateNestedManyWithoutUserInput
  reports: ReportCreateNestedManyWithoutUserInput
  reviews: ReviewCreateNestedManyWithoutUserInput
  role: String
  shares: ShareCreateNestedManyWithoutUserInput
  subscriptions: SubscriptionCreateNestedManyWithoutUserInput
  updatedAt: Timestamp
}

input UserCreateWithoutNotificationsInput {
  chatsFrom: ChatCreateNestedManyWithoutUserFromInput
  chatsTo: ChatCreateNestedManyWithoutUserToInput
  comments: CommentCreateNestedManyWithoutUserInput
  createdAt: Timestamp
  email: String!
  favorites: FavoriteCreateNestedManyWithoutUserInput
  id: String
  isPremium: Boolean
  isStore: Boolean
  messages: MessageCreateNestedManyWithoutUserInput
  name: String
  phone: String
  products: ProductCreateNestedManyWithoutUserInput
  replies: ReplyCreateNestedManyWithoutUserInput
  reports: ReportCreateNestedManyWithoutUserInput
  reviews: ReviewCreateNestedManyWithoutUserInput
  role: String
  shares: ShareCreateNestedManyWithoutUserInput
  subscriptions: SubscriptionCreateNestedManyWithoutUserInput
  updatedAt: Timestamp
}

input UserCreateWithoutProductsInput {
  chatsFrom: ChatCreateNestedManyWithoutUserFromInput
  chatsTo: ChatCreateNestedManyWithoutUserToInput
  comments: CommentCreateNestedManyWithoutUserInput
  createdAt: Timestamp
  email: String!
  favorites: FavoriteCreateNestedManyWithoutUserInput
  id: String
  isPremium: Boolean
  isStore: Boolean
  messages: MessageCreateNestedManyWithoutUserInput
  name: String
  notifications: NotificationCreateNestedManyWithoutUserInput
  phone: String
  replies: ReplyCreateNestedManyWithoutUserInput
  reports: ReportCreateNestedManyWithoutUserInput
  reviews: ReviewCreateNestedManyWithoutUserInput
  role: String
  shares: ShareCreateNestedManyWithoutUserInput
  subscriptions: SubscriptionCreateNestedManyWithoutUserInput
  updatedAt: Timestamp
}

input UserCreateWithoutRepliesInput {
  chatsFrom: ChatCreateNestedManyWithoutUserFromInput
  chatsTo: ChatCreateNestedManyWithoutUserToInput
  comments: CommentCreateNestedManyWithoutUserInput
  createdAt: Timestamp
  email: String!
  favorites: FavoriteCreateNestedManyWithoutUserInput
  id: String
  isPremium: Boolean
  isStore: Boolean
  messages: MessageCreateNestedManyWithoutUserInput
  name: String
  notifications: NotificationCreateNestedManyWithoutUserInput
  phone: String
  products: ProductCreateNestedManyWithoutUserInput
  reports: ReportCreateNestedManyWithoutUserInput
  reviews: ReviewCreateNestedManyWithoutUserInput
  role: String
  shares: ShareCreateNestedManyWithoutUserInput
  subscriptions: SubscriptionCreateNestedManyWithoutUserInput
  updatedAt: Timestamp
}

input UserCreateWithoutReportsInput {
  chatsFrom: ChatCreateNestedManyWithoutUserFromInput
  chatsTo: ChatCreateNestedManyWithoutUserToInput
  comments: CommentCreateNestedManyWithoutUserInput
  createdAt: Timestamp
  email: String!
  favorites: FavoriteCreateNestedManyWithoutUserInput
  id: String
  isPremium: Boolean
  isStore: Boolean
  messages: MessageCreateNestedManyWithoutUserInput
  name: String
  notifications: NotificationCreateNestedManyWithoutUserInput
  phone: String
  products: ProductCreateNestedManyWithoutUserInput
  replies: ReplyCreateNestedManyWithoutUserInput
  reviews: ReviewCreateNestedManyWithoutUserInput
  role: String
  shares: ShareCreateNestedManyWithoutUserInput
  subscriptions: SubscriptionCreateNestedManyWithoutUserInput
  updatedAt: Timestamp
}

input UserCreateWithoutReviewsInput {
  chatsFrom: ChatCreateNestedManyWithoutUserFromInput
  chatsTo: ChatCreateNestedManyWithoutUserToInput
  comments: CommentCreateNestedManyWithoutUserInput
  createdAt: Timestamp
  email: String!
  favorites: FavoriteCreateNestedManyWithoutUserInput
  id: String
  isPremium: Boolean
  isStore: Boolean
  messages: MessageCreateNestedManyWithoutUserInput
  name: String
  notifications: NotificationCreateNestedManyWithoutUserInput
  phone: String
  products: ProductCreateNestedManyWithoutUserInput
  replies: ReplyCreateNestedManyWithoutUserInput
  reports: ReportCreateNestedManyWithoutUserInput
  role: String
  shares: ShareCreateNestedManyWithoutUserInput
  subscriptions: SubscriptionCreateNestedManyWithoutUserInput
  updatedAt: Timestamp
}

input UserCreateWithoutSharesInput {
  chatsFrom: ChatCreateNestedManyWithoutUserFromInput
  chatsTo: ChatCreateNestedManyWithoutUserToInput
  comments: CommentCreateNestedManyWithoutUserInput
  createdAt: Timestamp
  email: String!
  favorites: FavoriteCreateNestedManyWithoutUserInput
  id: String
  isPremium: Boolean
  isStore: Boolean
  messages: MessageCreateNestedManyWithoutUserInput
  name: String
  notifications: NotificationCreateNestedManyWithoutUserInput
  phone: String
  products: ProductCreateNestedManyWithoutUserInput
  replies: ReplyCreateNestedManyWithoutUserInput
  reports: ReportCreateNestedManyWithoutUserInput
  reviews: ReviewCreateNestedManyWithoutUserInput
  role: String
  subscriptions: SubscriptionCreateNestedManyWithoutUserInput
  updatedAt: Timestamp
}

input UserCreateWithoutSubscriptionsInput {
  chatsFrom: ChatCreateNestedManyWithoutUserFromInput
  chatsTo: ChatCreateNestedManyWithoutUserToInput
  comments: CommentCreateNestedManyWithoutUserInput
  createdAt: Timestamp
  email: String!
  favorites: FavoriteCreateNestedManyWithoutUserInput
  id: String
  isPremium: Boolean
  isStore: Boolean
  messages: MessageCreateNestedManyWithoutUserInput
  name: String
  notifications: NotificationCreateNestedManyWithoutUserInput
  phone: String
  products: ProductCreateNestedManyWithoutUserInput
  replies: ReplyCreateNestedManyWithoutUserInput
  reports: ReportCreateNestedManyWithoutUserInput
  reviews: ReviewCreateNestedManyWithoutUserInput
  role: String
  shares: ShareCreateNestedManyWithoutUserInput
  updatedAt: Timestamp
}

type UserGroupBy {
  _count: UserCountAggregate
  _max: UserMaxAggregate
  _min: UserMinAggregate
  createdAt: Timestamp!
  email: String!
  id: String!
  isPremium: Boolean!
  isStore: Boolean!
  name: String
  phone: String
  role: String!
  updatedAt: Timestamp
}

type UserMaxAggregate {
  createdAt: Timestamp
  email: String
  id: String
  isPremium: Boolean
  isStore: Boolean
  name: String
  phone: String
  role: String
  updatedAt: Timestamp
}

input UserMaxAggregateInput {
  createdAt: Boolean
  email: Boolean
  id: Boolean
  isPremium: Boolean
  isStore: Boolean
  name: Boolean
  phone: Boolean
  role: Boolean
  updatedAt: Boolean
}

input UserMaxOrderByAggregateInput {
  createdAt: SortOrder
  email: SortOrder
  id: SortOrder
  isPremium: SortOrder
  isStore: SortOrder
  name: SortOrder
  phone: SortOrder
  role: SortOrder
  updatedAt: SortOrder
}

type UserMinAggregate {
  createdAt: Timestamp
  email: String
  id: String
  isPremium: Boolean
  isStore: Boolean
  name: String
  phone: String
  role: String
  updatedAt: Timestamp
}

input UserMinAggregateInput {
  createdAt: Boolean
  email: Boolean
  id: Boolean
  isPremium: Boolean
  isStore: Boolean
  name: Boolean
  phone: Boolean
  role: Boolean
  updatedAt: Boolean
}

input UserMinOrderByAggregateInput {
  createdAt: SortOrder
  email: SortOrder
  id: SortOrder
  isPremium: SortOrder
  isStore: SortOrder
  name: SortOrder
  phone: SortOrder
  role: SortOrder
  updatedAt: SortOrder
}

input UserOrderByWithAggregationInput {
  _count: UserCountOrderByAggregateInput
  _max: UserMaxOrderByAggregateInput
  _min: UserMinOrderByAggregateInput
  createdAt: SortOrder
  email: SortOrder
  id: SortOrder
  isPremium: SortOrder
  isStore: SortOrder
  name: SortOrderInput
  phone: SortOrderInput
  role: SortOrder
  updatedAt: SortOrderInput
}

input UserOrderByWithRelationInput {
  chatsFrom: ChatOrderByRelationAggregateInput
  chatsTo: ChatOrderByRelationAggregateInput
  comments: CommentOrderByRelationAggregateInput
  createdAt: SortOrder
  email: SortOrder
  favorites: FavoriteOrderByRelationAggregateInput
  id: SortOrder
  isPremium: SortOrder
  isStore: SortOrder
  messages: MessageOrderByRelationAggregateInput
  name: SortOrderInput
  notifications: NotificationOrderByRelationAggregateInput
  phone: SortOrderInput
  products: ProductOrderByRelationAggregateInput
  replies: ReplyOrderByRelationAggregateInput
  reports: ReportOrderByRelationAggregateInput
  reviews: ReviewOrderByRelationAggregateInput
  role: SortOrder
  shares: ShareOrderByRelationAggregateInput
  subscriptions: SubscriptionOrderByRelationAggregateInput
  updatedAt: SortOrderInput
}

input UserRelationFilter {
  is: UserWhereInput
  isNot: UserWhereInput
}

enum UserScalarFieldEnum {
  createdAt
  email
  id
  isPremium
  isStore
  name
  phone
  role
  updatedAt
}

input UserScalarWhereWithAggregatesInput {
  AND: [UserScalarWhereWithAggregatesInput!]
  NOT: [UserScalarWhereWithAggregatesInput!]
  OR: [UserScalarWhereWithAggregatesInput!]
  createdAt: DateTimeWithAggregatesFilter
  email: StringWithAggregatesFilter
  id: StringWithAggregatesFilter
  isPremium: BoolWithAggregatesFilter
  isStore: BoolWithAggregatesFilter
  name: StringNullableWithAggregatesFilter
  phone: StringNullableWithAggregatesFilter
  role: StringWithAggregatesFilter
  updatedAt: DateTimeNullableWithAggregatesFilter
}

input UserUpdateInput {
  chatsFrom: ChatUpdateManyWithoutUserFromNestedInput
  chatsTo: ChatUpdateManyWithoutUserToNestedInput
  comments: CommentUpdateManyWithoutUserNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  favorites: FavoriteUpdateManyWithoutUserNestedInput
  id: StringFieldUpdateOperationsInput
  isPremium: BoolFieldUpdateOperationsInput
  isStore: BoolFieldUpdateOperationsInput
  messages: MessageUpdateManyWithoutUserNestedInput
  name: NullableStringFieldUpdateOperationsInput
  notifications: NotificationUpdateManyWithoutUserNestedInput
  phone: NullableStringFieldUpdateOperationsInput
  products: ProductUpdateManyWithoutUserNestedInput
  replies: ReplyUpdateManyWithoutUserNestedInput
  reports: ReportUpdateManyWithoutUserNestedInput
  reviews: ReviewUpdateManyWithoutUserNestedInput
  role: StringFieldUpdateOperationsInput
  shares: ShareUpdateManyWithoutUserNestedInput
  subscriptions: SubscriptionUpdateManyWithoutUserNestedInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
}

input UserUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  isPremium: BoolFieldUpdateOperationsInput
  isStore: BoolFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  phone: NullableStringFieldUpdateOperationsInput
  role: StringFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
}

input UserUpdateOneRequiredWithoutChatsFromNestedInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutChatsFromInput
  create: UserCreateWithoutChatsFromInput
  update: UserUpdateToOneWithWhereWithoutChatsFromInput
  upsert: UserUpsertWithoutChatsFromInput
}

input UserUpdateOneRequiredWithoutChatsToNestedInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutChatsToInput
  create: UserCreateWithoutChatsToInput
  update: UserUpdateToOneWithWhereWithoutChatsToInput
  upsert: UserUpsertWithoutChatsToInput
}

input UserUpdateOneRequiredWithoutCommentsNestedInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutCommentsInput
  create: UserCreateWithoutCommentsInput
  update: UserUpdateToOneWithWhereWithoutCommentsInput
  upsert: UserUpsertWithoutCommentsInput
}

input UserUpdateOneRequiredWithoutFavoritesNestedInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutFavoritesInput
  create: UserCreateWithoutFavoritesInput
  update: UserUpdateToOneWithWhereWithoutFavoritesInput
  upsert: UserUpsertWithoutFavoritesInput
}

input UserUpdateOneRequiredWithoutMessagesNestedInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutMessagesInput
  create: UserCreateWithoutMessagesInput
  update: UserUpdateToOneWithWhereWithoutMessagesInput
  upsert: UserUpsertWithoutMessagesInput
}

input UserUpdateOneRequiredWithoutNotificationsNestedInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutNotificationsInput
  create: UserCreateWithoutNotificationsInput
  update: UserUpdateToOneWithWhereWithoutNotificationsInput
  upsert: UserUpsertWithoutNotificationsInput
}

input UserUpdateOneRequiredWithoutProductsNestedInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutProductsInput
  create: UserCreateWithoutProductsInput
  update: UserUpdateToOneWithWhereWithoutProductsInput
  upsert: UserUpsertWithoutProductsInput
}

input UserUpdateOneRequiredWithoutRepliesNestedInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutRepliesInput
  create: UserCreateWithoutRepliesInput
  update: UserUpdateToOneWithWhereWithoutRepliesInput
  upsert: UserUpsertWithoutRepliesInput
}

input UserUpdateOneRequiredWithoutReportsNestedInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutReportsInput
  create: UserCreateWithoutReportsInput
  update: UserUpdateToOneWithWhereWithoutReportsInput
  upsert: UserUpsertWithoutReportsInput
}

input UserUpdateOneRequiredWithoutReviewsNestedInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutReviewsInput
  create: UserCreateWithoutReviewsInput
  update: UserUpdateToOneWithWhereWithoutReviewsInput
  upsert: UserUpsertWithoutReviewsInput
}

input UserUpdateOneRequiredWithoutSharesNestedInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutSharesInput
  create: UserCreateWithoutSharesInput
  update: UserUpdateToOneWithWhereWithoutSharesInput
  upsert: UserUpsertWithoutSharesInput
}

input UserUpdateOneRequiredWithoutSubscriptionsNestedInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutSubscriptionsInput
  create: UserCreateWithoutSubscriptionsInput
  update: UserUpdateToOneWithWhereWithoutSubscriptionsInput
  upsert: UserUpsertWithoutSubscriptionsInput
}

input UserUpdateToOneWithWhereWithoutChatsFromInput {
  data: UserUpdateWithoutChatsFromInput!
  where: UserWhereInput
}

input UserUpdateToOneWithWhereWithoutChatsToInput {
  data: UserUpdateWithoutChatsToInput!
  where: UserWhereInput
}

input UserUpdateToOneWithWhereWithoutCommentsInput {
  data: UserUpdateWithoutCommentsInput!
  where: UserWhereInput
}

input UserUpdateToOneWithWhereWithoutFavoritesInput {
  data: UserUpdateWithoutFavoritesInput!
  where: UserWhereInput
}

input UserUpdateToOneWithWhereWithoutMessagesInput {
  data: UserUpdateWithoutMessagesInput!
  where: UserWhereInput
}

input UserUpdateToOneWithWhereWithoutNotificationsInput {
  data: UserUpdateWithoutNotificationsInput!
  where: UserWhereInput
}

input UserUpdateToOneWithWhereWithoutProductsInput {
  data: UserUpdateWithoutProductsInput!
  where: UserWhereInput
}

input UserUpdateToOneWithWhereWithoutRepliesInput {
  data: UserUpdateWithoutRepliesInput!
  where: UserWhereInput
}

input UserUpdateToOneWithWhereWithoutReportsInput {
  data: UserUpdateWithoutReportsInput!
  where: UserWhereInput
}

input UserUpdateToOneWithWhereWithoutReviewsInput {
  data: UserUpdateWithoutReviewsInput!
  where: UserWhereInput
}

input UserUpdateToOneWithWhereWithoutSharesInput {
  data: UserUpdateWithoutSharesInput!
  where: UserWhereInput
}

input UserUpdateToOneWithWhereWithoutSubscriptionsInput {
  data: UserUpdateWithoutSubscriptionsInput!
  where: UserWhereInput
}

input UserUpdateWithoutChatsFromInput {
  chatsTo: ChatUpdateManyWithoutUserToNestedInput
  comments: CommentUpdateManyWithoutUserNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  favorites: FavoriteUpdateManyWithoutUserNestedInput
  id: StringFieldUpdateOperationsInput
  isPremium: BoolFieldUpdateOperationsInput
  isStore: BoolFieldUpdateOperationsInput
  messages: MessageUpdateManyWithoutUserNestedInput
  name: NullableStringFieldUpdateOperationsInput
  notifications: NotificationUpdateManyWithoutUserNestedInput
  phone: NullableStringFieldUpdateOperationsInput
  products: ProductUpdateManyWithoutUserNestedInput
  replies: ReplyUpdateManyWithoutUserNestedInput
  reports: ReportUpdateManyWithoutUserNestedInput
  reviews: ReviewUpdateManyWithoutUserNestedInput
  role: StringFieldUpdateOperationsInput
  shares: ShareUpdateManyWithoutUserNestedInput
  subscriptions: SubscriptionUpdateManyWithoutUserNestedInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
}

input UserUpdateWithoutChatsToInput {
  chatsFrom: ChatUpdateManyWithoutUserFromNestedInput
  comments: CommentUpdateManyWithoutUserNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  favorites: FavoriteUpdateManyWithoutUserNestedInput
  id: StringFieldUpdateOperationsInput
  isPremium: BoolFieldUpdateOperationsInput
  isStore: BoolFieldUpdateOperationsInput
  messages: MessageUpdateManyWithoutUserNestedInput
  name: NullableStringFieldUpdateOperationsInput
  notifications: NotificationUpdateManyWithoutUserNestedInput
  phone: NullableStringFieldUpdateOperationsInput
  products: ProductUpdateManyWithoutUserNestedInput
  replies: ReplyUpdateManyWithoutUserNestedInput
  reports: ReportUpdateManyWithoutUserNestedInput
  reviews: ReviewUpdateManyWithoutUserNestedInput
  role: StringFieldUpdateOperationsInput
  shares: ShareUpdateManyWithoutUserNestedInput
  subscriptions: SubscriptionUpdateManyWithoutUserNestedInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
}

input UserUpdateWithoutCommentsInput {
  chatsFrom: ChatUpdateManyWithoutUserFromNestedInput
  chatsTo: ChatUpdateManyWithoutUserToNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  favorites: FavoriteUpdateManyWithoutUserNestedInput
  id: StringFieldUpdateOperationsInput
  isPremium: BoolFieldUpdateOperationsInput
  isStore: BoolFieldUpdateOperationsInput
  messages: MessageUpdateManyWithoutUserNestedInput
  name: NullableStringFieldUpdateOperationsInput
  notifications: NotificationUpdateManyWithoutUserNestedInput
  phone: NullableStringFieldUpdateOperationsInput
  products: ProductUpdateManyWithoutUserNestedInput
  replies: ReplyUpdateManyWithoutUserNestedInput
  reports: ReportUpdateManyWithoutUserNestedInput
  reviews: ReviewUpdateManyWithoutUserNestedInput
  role: StringFieldUpdateOperationsInput
  shares: ShareUpdateManyWithoutUserNestedInput
  subscriptions: SubscriptionUpdateManyWithoutUserNestedInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
}

input UserUpdateWithoutFavoritesInput {
  chatsFrom: ChatUpdateManyWithoutUserFromNestedInput
  chatsTo: ChatUpdateManyWithoutUserToNestedInput
  comments: CommentUpdateManyWithoutUserNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  isPremium: BoolFieldUpdateOperationsInput
  isStore: BoolFieldUpdateOperationsInput
  messages: MessageUpdateManyWithoutUserNestedInput
  name: NullableStringFieldUpdateOperationsInput
  notifications: NotificationUpdateManyWithoutUserNestedInput
  phone: NullableStringFieldUpdateOperationsInput
  products: ProductUpdateManyWithoutUserNestedInput
  replies: ReplyUpdateManyWithoutUserNestedInput
  reports: ReportUpdateManyWithoutUserNestedInput
  reviews: ReviewUpdateManyWithoutUserNestedInput
  role: StringFieldUpdateOperationsInput
  shares: ShareUpdateManyWithoutUserNestedInput
  subscriptions: SubscriptionUpdateManyWithoutUserNestedInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
}

input UserUpdateWithoutMessagesInput {
  chatsFrom: ChatUpdateManyWithoutUserFromNestedInput
  chatsTo: ChatUpdateManyWithoutUserToNestedInput
  comments: CommentUpdateManyWithoutUserNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  favorites: FavoriteUpdateManyWithoutUserNestedInput
  id: StringFieldUpdateOperationsInput
  isPremium: BoolFieldUpdateOperationsInput
  isStore: BoolFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  notifications: NotificationUpdateManyWithoutUserNestedInput
  phone: NullableStringFieldUpdateOperationsInput
  products: ProductUpdateManyWithoutUserNestedInput
  replies: ReplyUpdateManyWithoutUserNestedInput
  reports: ReportUpdateManyWithoutUserNestedInput
  reviews: ReviewUpdateManyWithoutUserNestedInput
  role: StringFieldUpdateOperationsInput
  shares: ShareUpdateManyWithoutUserNestedInput
  subscriptions: SubscriptionUpdateManyWithoutUserNestedInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
}

input UserUpdateWithoutNotificationsInput {
  chatsFrom: ChatUpdateManyWithoutUserFromNestedInput
  chatsTo: ChatUpdateManyWithoutUserToNestedInput
  comments: CommentUpdateManyWithoutUserNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  favorites: FavoriteUpdateManyWithoutUserNestedInput
  id: StringFieldUpdateOperationsInput
  isPremium: BoolFieldUpdateOperationsInput
  isStore: BoolFieldUpdateOperationsInput
  messages: MessageUpdateManyWithoutUserNestedInput
  name: NullableStringFieldUpdateOperationsInput
  phone: NullableStringFieldUpdateOperationsInput
  products: ProductUpdateManyWithoutUserNestedInput
  replies: ReplyUpdateManyWithoutUserNestedInput
  reports: ReportUpdateManyWithoutUserNestedInput
  reviews: ReviewUpdateManyWithoutUserNestedInput
  role: StringFieldUpdateOperationsInput
  shares: ShareUpdateManyWithoutUserNestedInput
  subscriptions: SubscriptionUpdateManyWithoutUserNestedInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
}

input UserUpdateWithoutProductsInput {
  chatsFrom: ChatUpdateManyWithoutUserFromNestedInput
  chatsTo: ChatUpdateManyWithoutUserToNestedInput
  comments: CommentUpdateManyWithoutUserNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  favorites: FavoriteUpdateManyWithoutUserNestedInput
  id: StringFieldUpdateOperationsInput
  isPremium: BoolFieldUpdateOperationsInput
  isStore: BoolFieldUpdateOperationsInput
  messages: MessageUpdateManyWithoutUserNestedInput
  name: NullableStringFieldUpdateOperationsInput
  notifications: NotificationUpdateManyWithoutUserNestedInput
  phone: NullableStringFieldUpdateOperationsInput
  replies: ReplyUpdateManyWithoutUserNestedInput
  reports: ReportUpdateManyWithoutUserNestedInput
  reviews: ReviewUpdateManyWithoutUserNestedInput
  role: StringFieldUpdateOperationsInput
  shares: ShareUpdateManyWithoutUserNestedInput
  subscriptions: SubscriptionUpdateManyWithoutUserNestedInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
}

input UserUpdateWithoutRepliesInput {
  chatsFrom: ChatUpdateManyWithoutUserFromNestedInput
  chatsTo: ChatUpdateManyWithoutUserToNestedInput
  comments: CommentUpdateManyWithoutUserNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  favorites: FavoriteUpdateManyWithoutUserNestedInput
  id: StringFieldUpdateOperationsInput
  isPremium: BoolFieldUpdateOperationsInput
  isStore: BoolFieldUpdateOperationsInput
  messages: MessageUpdateManyWithoutUserNestedInput
  name: NullableStringFieldUpdateOperationsInput
  notifications: NotificationUpdateManyWithoutUserNestedInput
  phone: NullableStringFieldUpdateOperationsInput
  products: ProductUpdateManyWithoutUserNestedInput
  reports: ReportUpdateManyWithoutUserNestedInput
  reviews: ReviewUpdateManyWithoutUserNestedInput
  role: StringFieldUpdateOperationsInput
  shares: ShareUpdateManyWithoutUserNestedInput
  subscriptions: SubscriptionUpdateManyWithoutUserNestedInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
}

input UserUpdateWithoutReportsInput {
  chatsFrom: ChatUpdateManyWithoutUserFromNestedInput
  chatsTo: ChatUpdateManyWithoutUserToNestedInput
  comments: CommentUpdateManyWithoutUserNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  favorites: FavoriteUpdateManyWithoutUserNestedInput
  id: StringFieldUpdateOperationsInput
  isPremium: BoolFieldUpdateOperationsInput
  isStore: BoolFieldUpdateOperationsInput
  messages: MessageUpdateManyWithoutUserNestedInput
  name: NullableStringFieldUpdateOperationsInput
  notifications: NotificationUpdateManyWithoutUserNestedInput
  phone: NullableStringFieldUpdateOperationsInput
  products: ProductUpdateManyWithoutUserNestedInput
  replies: ReplyUpdateManyWithoutUserNestedInput
  reviews: ReviewUpdateManyWithoutUserNestedInput
  role: StringFieldUpdateOperationsInput
  shares: ShareUpdateManyWithoutUserNestedInput
  subscriptions: SubscriptionUpdateManyWithoutUserNestedInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
}

input UserUpdateWithoutReviewsInput {
  chatsFrom: ChatUpdateManyWithoutUserFromNestedInput
  chatsTo: ChatUpdateManyWithoutUserToNestedInput
  comments: CommentUpdateManyWithoutUserNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  favorites: FavoriteUpdateManyWithoutUserNestedInput
  id: StringFieldUpdateOperationsInput
  isPremium: BoolFieldUpdateOperationsInput
  isStore: BoolFieldUpdateOperationsInput
  messages: MessageUpdateManyWithoutUserNestedInput
  name: NullableStringFieldUpdateOperationsInput
  notifications: NotificationUpdateManyWithoutUserNestedInput
  phone: NullableStringFieldUpdateOperationsInput
  products: ProductUpdateManyWithoutUserNestedInput
  replies: ReplyUpdateManyWithoutUserNestedInput
  reports: ReportUpdateManyWithoutUserNestedInput
  role: StringFieldUpdateOperationsInput
  shares: ShareUpdateManyWithoutUserNestedInput
  subscriptions: SubscriptionUpdateManyWithoutUserNestedInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
}

input UserUpdateWithoutSharesInput {
  chatsFrom: ChatUpdateManyWithoutUserFromNestedInput
  chatsTo: ChatUpdateManyWithoutUserToNestedInput
  comments: CommentUpdateManyWithoutUserNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  favorites: FavoriteUpdateManyWithoutUserNestedInput
  id: StringFieldUpdateOperationsInput
  isPremium: BoolFieldUpdateOperationsInput
  isStore: BoolFieldUpdateOperationsInput
  messages: MessageUpdateManyWithoutUserNestedInput
  name: NullableStringFieldUpdateOperationsInput
  notifications: NotificationUpdateManyWithoutUserNestedInput
  phone: NullableStringFieldUpdateOperationsInput
  products: ProductUpdateManyWithoutUserNestedInput
  replies: ReplyUpdateManyWithoutUserNestedInput
  reports: ReportUpdateManyWithoutUserNestedInput
  reviews: ReviewUpdateManyWithoutUserNestedInput
  role: StringFieldUpdateOperationsInput
  subscriptions: SubscriptionUpdateManyWithoutUserNestedInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
}

input UserUpdateWithoutSubscriptionsInput {
  chatsFrom: ChatUpdateManyWithoutUserFromNestedInput
  chatsTo: ChatUpdateManyWithoutUserToNestedInput
  comments: CommentUpdateManyWithoutUserNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  favorites: FavoriteUpdateManyWithoutUserNestedInput
  id: StringFieldUpdateOperationsInput
  isPremium: BoolFieldUpdateOperationsInput
  isStore: BoolFieldUpdateOperationsInput
  messages: MessageUpdateManyWithoutUserNestedInput
  name: NullableStringFieldUpdateOperationsInput
  notifications: NotificationUpdateManyWithoutUserNestedInput
  phone: NullableStringFieldUpdateOperationsInput
  products: ProductUpdateManyWithoutUserNestedInput
  replies: ReplyUpdateManyWithoutUserNestedInput
  reports: ReportUpdateManyWithoutUserNestedInput
  reviews: ReviewUpdateManyWithoutUserNestedInput
  role: StringFieldUpdateOperationsInput
  shares: ShareUpdateManyWithoutUserNestedInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
}

input UserUpsertWithoutChatsFromInput {
  create: UserCreateWithoutChatsFromInput!
  update: UserUpdateWithoutChatsFromInput!
  where: UserWhereInput
}

input UserUpsertWithoutChatsToInput {
  create: UserCreateWithoutChatsToInput!
  update: UserUpdateWithoutChatsToInput!
  where: UserWhereInput
}

input UserUpsertWithoutCommentsInput {
  create: UserCreateWithoutCommentsInput!
  update: UserUpdateWithoutCommentsInput!
  where: UserWhereInput
}

input UserUpsertWithoutFavoritesInput {
  create: UserCreateWithoutFavoritesInput!
  update: UserUpdateWithoutFavoritesInput!
  where: UserWhereInput
}

input UserUpsertWithoutMessagesInput {
  create: UserCreateWithoutMessagesInput!
  update: UserUpdateWithoutMessagesInput!
  where: UserWhereInput
}

input UserUpsertWithoutNotificationsInput {
  create: UserCreateWithoutNotificationsInput!
  update: UserUpdateWithoutNotificationsInput!
  where: UserWhereInput
}

input UserUpsertWithoutProductsInput {
  create: UserCreateWithoutProductsInput!
  update: UserUpdateWithoutProductsInput!
  where: UserWhereInput
}

input UserUpsertWithoutRepliesInput {
  create: UserCreateWithoutRepliesInput!
  update: UserUpdateWithoutRepliesInput!
  where: UserWhereInput
}

input UserUpsertWithoutReportsInput {
  create: UserCreateWithoutReportsInput!
  update: UserUpdateWithoutReportsInput!
  where: UserWhereInput
}

input UserUpsertWithoutReviewsInput {
  create: UserCreateWithoutReviewsInput!
  update: UserUpdateWithoutReviewsInput!
  where: UserWhereInput
}

input UserUpsertWithoutSharesInput {
  create: UserCreateWithoutSharesInput!
  update: UserUpdateWithoutSharesInput!
  where: UserWhereInput
}

input UserUpsertWithoutSubscriptionsInput {
  create: UserCreateWithoutSubscriptionsInput!
  update: UserUpdateWithoutSubscriptionsInput!
  where: UserWhereInput
}

input UserWhereInput {
  AND: [UserWhereInput!]
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  chatsFrom: ChatListRelationFilter
  chatsTo: ChatListRelationFilter
  comments: CommentListRelationFilter
  createdAt: DateTimeFilter
  email: StringFilter
  favorites: FavoriteListRelationFilter
  id: StringFilter
  isPremium: BoolFilter
  isStore: BoolFilter
  messages: MessageListRelationFilter
  name: StringNullableFilter
  notifications: NotificationListRelationFilter
  phone: StringNullableFilter
  products: ProductListRelationFilter
  replies: ReplyListRelationFilter
  reports: ReportListRelationFilter
  reviews: ReviewListRelationFilter
  role: StringFilter
  shares: ShareListRelationFilter
  subscriptions: SubscriptionListRelationFilter
  updatedAt: DateTimeNullableFilter
}

input UserWhereUniqueInput {
  AND: [UserWhereInput!]
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  chatsFrom: ChatListRelationFilter
  chatsTo: ChatListRelationFilter
  comments: CommentListRelationFilter
  createdAt: DateTimeFilter
  email: String
  favorites: FavoriteListRelationFilter
  id: String
  isPremium: BoolFilter
  isStore: BoolFilter
  messages: MessageListRelationFilter
  name: StringNullableFilter
  notifications: NotificationListRelationFilter
  phone: StringNullableFilter
  products: ProductListRelationFilter
  replies: ReplyListRelationFilter
  reports: ReportListRelationFilter
  reviews: ReviewListRelationFilter
  role: StringFilter
  shares: ShareListRelationFilter
  subscriptions: SubscriptionListRelationFilter
  updatedAt: DateTimeNullableFilter
}